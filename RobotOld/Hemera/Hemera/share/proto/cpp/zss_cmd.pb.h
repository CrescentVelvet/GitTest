// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_cmd.proto

#ifndef PROTOBUF_zss_5fcmd_2eproto__INCLUDED
#define PROTOBUF_zss_5fcmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ZSS {
namespace Protocol {
class Robot_Command;
class Robot_CommandDefaultTypeInternal;
extern Robot_CommandDefaultTypeInternal _Robot_Command_default_instance_;
class Robot_Status;
class Robot_StatusDefaultTypeInternal;
extern Robot_StatusDefaultTypeInternal _Robot_Status_default_instance_;
class Robots_Command;
class Robots_CommandDefaultTypeInternal;
extern Robots_CommandDefaultTypeInternal _Robots_Command_default_instance_;
class Robots_Status;
class Robots_StatusDefaultTypeInternal;
extern Robots_StatusDefaultTypeInternal _Robots_Status_default_instance_;
}  // namespace Protocol
}  // namespace ZSS

namespace ZSS {
namespace Protocol {

namespace protobuf_zss_5fcmd_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_zss_5fcmd_2eproto

// ===================================================================

class Robots_Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Robots_Status) */ {
 public:
  Robots_Status();
  virtual ~Robots_Status();

  Robots_Status(const Robots_Status& from);

  inline Robots_Status& operator=(const Robots_Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robots_Status& default_instance();

  static inline const Robots_Status* internal_default_instance() {
    return reinterpret_cast<const Robots_Status*>(
               &_Robots_Status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Robots_Status* other);

  // implements Message ----------------------------------------------

  inline Robots_Status* New() const PROTOBUF_FINAL { return New(NULL); }

  Robots_Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Robots_Status& from);
  void MergeFrom(const Robots_Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Robots_Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  int robots_status_size() const;
  void clear_robots_status();
  static const int kRobotsStatusFieldNumber = 1;
  const ::ZSS::Protocol::Robot_Status& robots_status(int index) const;
  ::ZSS::Protocol::Robot_Status* mutable_robots_status(int index);
  ::ZSS::Protocol::Robot_Status* add_robots_status();
  ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Status >*
      mutable_robots_status();
  const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Status >&
      robots_status() const;

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Robots_Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Status > robots_status_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fcmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Robot_Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Robot_Status) */ {
 public:
  Robot_Status();
  virtual ~Robot_Status();

  Robot_Status(const Robot_Status& from);

  inline Robot_Status& operator=(const Robot_Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot_Status& default_instance();

  static inline const Robot_Status* internal_default_instance() {
    return reinterpret_cast<const Robot_Status*>(
               &_Robot_Status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Robot_Status* other);

  // implements Message ----------------------------------------------

  inline Robot_Status* New() const PROTOBUF_FINAL { return New(NULL); }

  Robot_Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Robot_Status& from);
  void MergeFrom(const Robot_Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Robot_Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 robot_id = 1;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 1;
  ::google::protobuf::int32 robot_id() const;
  void set_robot_id(::google::protobuf::int32 value);

  // bool infrared = 2;
  void clear_infrared();
  static const int kInfraredFieldNumber = 2;
  bool infrared() const;
  void set_infrared(bool value);

  // bool flat_kick = 3;
  void clear_flat_kick();
  static const int kFlatKickFieldNumber = 3;
  bool flat_kick() const;
  void set_flat_kick(bool value);

  // bool chip_kick = 4;
  void clear_chip_kick();
  static const int kChipKickFieldNumber = 4;
  bool chip_kick() const;
  void set_chip_kick(bool value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Robot_Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 robot_id_;
  bool infrared_;
  bool flat_kick_;
  bool chip_kick_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fcmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Robots_Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Robots_Command) */ {
 public:
  Robots_Command();
  virtual ~Robots_Command();

  Robots_Command(const Robots_Command& from);

  inline Robots_Command& operator=(const Robots_Command& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robots_Command& default_instance();

  static inline const Robots_Command* internal_default_instance() {
    return reinterpret_cast<const Robots_Command*>(
               &_Robots_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Robots_Command* other);

  // implements Message ----------------------------------------------

  inline Robots_Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Robots_Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Robots_Command& from);
  void MergeFrom(const Robots_Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Robots_Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZSS.Protocol.Robot_Command command = 1;
  int command_size() const;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::ZSS::Protocol::Robot_Command& command(int index) const;
  ::ZSS::Protocol::Robot_Command* mutable_command(int index);
  ::ZSS::Protocol::Robot_Command* add_command();
  ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Command >*
      mutable_command();
  const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Command >&
      command() const;

  // int32 delay = 2;
  void clear_delay();
  static const int kDelayFieldNumber = 2;
  ::google::protobuf::int32 delay() const;
  void set_delay(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Robots_Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Command > command_;
  ::google::protobuf::int32 delay_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fcmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Robot_Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Robot_Command) */ {
 public:
  Robot_Command();
  virtual ~Robot_Command();

  Robot_Command(const Robot_Command& from);

  inline Robot_Command& operator=(const Robot_Command& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot_Command& default_instance();

  static inline const Robot_Command* internal_default_instance() {
    return reinterpret_cast<const Robot_Command*>(
               &_Robot_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Robot_Command* other);

  // implements Message ----------------------------------------------

  inline Robot_Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Robot_Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Robot_Command& from);
  void MergeFrom(const Robot_Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Robot_Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 robot_id = 1;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 1;
  ::google::protobuf::int32 robot_id() const;
  void set_robot_id(::google::protobuf::int32 value);

  // float velocity_x = 2;
  void clear_velocity_x();
  static const int kVelocityXFieldNumber = 2;
  float velocity_x() const;
  void set_velocity_x(float value);

  // float velocity_y = 3;
  void clear_velocity_y();
  static const int kVelocityYFieldNumber = 3;
  float velocity_y() const;
  void set_velocity_y(float value);

  // float velocity_r = 4;
  void clear_velocity_r();
  static const int kVelocityRFieldNumber = 4;
  float velocity_r() const;
  void set_velocity_r(float value);

  // bool kick = 5;
  void clear_kick();
  static const int kKickFieldNumber = 5;
  bool kick() const;
  void set_kick(bool value);

  // float power = 6;
  void clear_power();
  static const int kPowerFieldNumber = 6;
  float power() const;
  void set_power(float value);

  // float dribbler_spin = 7;
  void clear_dribbler_spin();
  static const int kDribblerSpinFieldNumber = 7;
  float dribbler_spin() const;
  void set_dribbler_spin(float value);

  // float current_angle = 8;
  void clear_current_angle();
  static const int kCurrentAngleFieldNumber = 8;
  float current_angle() const;
  void set_current_angle(float value);

  // float target_angle = 9;
  void clear_target_angle();
  static const int kTargetAngleFieldNumber = 9;
  float target_angle() const;
  void set_target_angle(float value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Robot_Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 robot_id_;
  float velocity_x_;
  float velocity_y_;
  float velocity_r_;
  bool kick_;
  float power_;
  float dribbler_spin_;
  float current_angle_;
  float target_angle_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fcmd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Robots_Status

// repeated .ZSS.Protocol.Robot_Status robots_status = 1;
inline int Robots_Status::robots_status_size() const {
  return robots_status_.size();
}
inline void Robots_Status::clear_robots_status() {
  robots_status_.Clear();
}
inline const ::ZSS::Protocol::Robot_Status& Robots_Status::robots_status(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robots_Status.robots_status)
  return robots_status_.Get(index);
}
inline ::ZSS::Protocol::Robot_Status* Robots_Status::mutable_robots_status(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Robots_Status.robots_status)
  return robots_status_.Mutable(index);
}
inline ::ZSS::Protocol::Robot_Status* Robots_Status::add_robots_status() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Robots_Status.robots_status)
  return robots_status_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Status >*
Robots_Status::mutable_robots_status() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Robots_Status.robots_status)
  return &robots_status_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Status >&
Robots_Status::robots_status() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Robots_Status.robots_status)
  return robots_status_;
}

// -------------------------------------------------------------------

// Robot_Status

// int32 robot_id = 1;
inline void Robot_Status::clear_robot_id() {
  robot_id_ = 0;
}
inline ::google::protobuf::int32 Robot_Status::robot_id() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Status.robot_id)
  return robot_id_;
}
inline void Robot_Status::set_robot_id(::google::protobuf::int32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Status.robot_id)
}

// bool infrared = 2;
inline void Robot_Status::clear_infrared() {
  infrared_ = false;
}
inline bool Robot_Status::infrared() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Status.infrared)
  return infrared_;
}
inline void Robot_Status::set_infrared(bool value) {
  
  infrared_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Status.infrared)
}

// bool flat_kick = 3;
inline void Robot_Status::clear_flat_kick() {
  flat_kick_ = false;
}
inline bool Robot_Status::flat_kick() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Status.flat_kick)
  return flat_kick_;
}
inline void Robot_Status::set_flat_kick(bool value) {
  
  flat_kick_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Status.flat_kick)
}

// bool chip_kick = 4;
inline void Robot_Status::clear_chip_kick() {
  chip_kick_ = false;
}
inline bool Robot_Status::chip_kick() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Status.chip_kick)
  return chip_kick_;
}
inline void Robot_Status::set_chip_kick(bool value) {
  
  chip_kick_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Status.chip_kick)
}

// -------------------------------------------------------------------

// Robots_Command

// repeated .ZSS.Protocol.Robot_Command command = 1;
inline int Robots_Command::command_size() const {
  return command_.size();
}
inline void Robots_Command::clear_command() {
  command_.Clear();
}
inline const ::ZSS::Protocol::Robot_Command& Robots_Command::command(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robots_Command.command)
  return command_.Get(index);
}
inline ::ZSS::Protocol::Robot_Command* Robots_Command::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Robots_Command.command)
  return command_.Mutable(index);
}
inline ::ZSS::Protocol::Robot_Command* Robots_Command::add_command() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Robots_Command.command)
  return command_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Command >*
Robots_Command::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Robots_Command.command)
  return &command_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Command >&
Robots_Command::command() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Robots_Command.command)
  return command_;
}

// int32 delay = 2;
inline void Robots_Command::clear_delay() {
  delay_ = 0;
}
inline ::google::protobuf::int32 Robots_Command::delay() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robots_Command.delay)
  return delay_;
}
inline void Robots_Command::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robots_Command.delay)
}

// -------------------------------------------------------------------

// Robot_Command

// int32 robot_id = 1;
inline void Robot_Command::clear_robot_id() {
  robot_id_ = 0;
}
inline ::google::protobuf::int32 Robot_Command::robot_id() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.robot_id)
  return robot_id_;
}
inline void Robot_Command::set_robot_id(::google::protobuf::int32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.robot_id)
}

// float velocity_x = 2;
inline void Robot_Command::clear_velocity_x() {
  velocity_x_ = 0;
}
inline float Robot_Command::velocity_x() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.velocity_x)
  return velocity_x_;
}
inline void Robot_Command::set_velocity_x(float value) {
  
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.velocity_x)
}

// float velocity_y = 3;
inline void Robot_Command::clear_velocity_y() {
  velocity_y_ = 0;
}
inline float Robot_Command::velocity_y() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.velocity_y)
  return velocity_y_;
}
inline void Robot_Command::set_velocity_y(float value) {
  
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.velocity_y)
}

// float velocity_r = 4;
inline void Robot_Command::clear_velocity_r() {
  velocity_r_ = 0;
}
inline float Robot_Command::velocity_r() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.velocity_r)
  return velocity_r_;
}
inline void Robot_Command::set_velocity_r(float value) {
  
  velocity_r_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.velocity_r)
}

// bool kick = 5;
inline void Robot_Command::clear_kick() {
  kick_ = false;
}
inline bool Robot_Command::kick() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.kick)
  return kick_;
}
inline void Robot_Command::set_kick(bool value) {
  
  kick_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.kick)
}

// float power = 6;
inline void Robot_Command::clear_power() {
  power_ = 0;
}
inline float Robot_Command::power() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.power)
  return power_;
}
inline void Robot_Command::set_power(float value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.power)
}

// float dribbler_spin = 7;
inline void Robot_Command::clear_dribbler_spin() {
  dribbler_spin_ = 0;
}
inline float Robot_Command::dribbler_spin() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.dribbler_spin)
  return dribbler_spin_;
}
inline void Robot_Command::set_dribbler_spin(float value) {
  
  dribbler_spin_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.dribbler_spin)
}

// float current_angle = 8;
inline void Robot_Command::clear_current_angle() {
  current_angle_ = 0;
}
inline float Robot_Command::current_angle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.current_angle)
  return current_angle_;
}
inline void Robot_Command::set_current_angle(float value) {
  
  current_angle_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.current_angle)
}

// float target_angle = 9;
inline void Robot_Command::clear_target_angle() {
  target_angle_ = 0;
}
inline float Robot_Command::target_angle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.target_angle)
  return target_angle_;
}
inline void Robot_Command::set_target_angle(float value) {
  
  target_angle_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.target_angle)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zss_5fcmd_2eproto__INCLUDED
