// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_robocup_ssl_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SSL_DetectionBallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_DetectionBall> {
} _SSL_DetectionBall_default_instance_;
class SSL_DetectionRobotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_DetectionRobot> {
} _SSL_DetectionRobot_default_instance_;
class SSL_DetectionFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_DetectionFrame> {
} _SSL_DetectionFrame_default_instance_;

namespace protobuf_messages_5frobocup_5fssl_5fdetection_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, pixel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, pixel_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, pixel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, pixel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, frame_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, t_capture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, t_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, balls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, robots_yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, robots_blue_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SSL_DetectionBall)},
  { 12, -1, sizeof(SSL_DetectionRobot)},
  { 25, -1, sizeof(SSL_DetectionFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_DetectionBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_DetectionRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_DetectionFrame_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messages_robocup_ssl_detection.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _SSL_DetectionBall_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SSL_DetectionRobot_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SSL_DetectionFrame_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SSL_DetectionBall_default_instance_.DefaultConstruct();
  _SSL_DetectionRobot_default_instance_.DefaultConstruct();
  _SSL_DetectionFrame_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$messages_robocup_ssl_detection.proto\"x"
      "\n\021SSL_DetectionBall\022\022\n\nconfidence\030\001 \001(\002\022"
      "\014\n\004area\030\002 \001(\r\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z"
      "\030\005 \001(\002\022\017\n\007pixel_x\030\006 \001(\002\022\017\n\007pixel_y\030\007 \001(\002"
      "\"\227\001\n\022SSL_DetectionRobot\022\022\n\nconfidence\030\001 "
      "\001(\002\022\020\n\010robot_id\030\002 \001(\r\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 "
      "\001(\002\022\023\n\013orientation\030\005 \001(\002\022\017\n\007pixel_x\030\006 \001("
      "\002\022\017\n\007pixel_y\030\007 \001(\002\022\016\n\006height\030\010 \001(\002\"\331\001\n\022S"
      "SL_DetectionFrame\022\024\n\014frame_number\030\001 \001(\r\022"
      "\021\n\tt_capture\030\002 \001(\001\022\016\n\006t_sent\030\003 \001(\001\022\021\n\tca"
      "mera_id\030\004 \001(\r\022!\n\005balls\030\005 \003(\0132\022.SSL_Detec"
      "tionBall\022*\n\rrobots_yellow\030\006 \003(\0132\023.SSL_De"
      "tectionRobot\022(\n\013robots_blue\030\007 \003(\0132\023.SSL_"
      "DetectionRobotb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_detection.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_messages_5frobocup_5fssl_5fdetection_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionBall::kConfidenceFieldNumber;
const int SSL_DetectionBall::kAreaFieldNumber;
const int SSL_DetectionBall::kXFieldNumber;
const int SSL_DetectionBall::kYFieldNumber;
const int SSL_DetectionBall::kZFieldNumber;
const int SSL_DetectionBall::kPixelXFieldNumber;
const int SSL_DetectionBall::kPixelYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionBall::SSL_DetectionBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionBall)
}
SSL_DetectionBall::SSL_DetectionBall(const SSL_DetectionBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    reinterpret_cast<char*>(&pixel_y_) -
    reinterpret_cast<char*>(&confidence_) + sizeof(pixel_y_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionBall)
}

void SSL_DetectionBall::SharedCtor() {
  ::memset(&confidence_, 0, reinterpret_cast<char*>(&pixel_y_) -
    reinterpret_cast<char*>(&confidence_) + sizeof(pixel_y_));
  _cached_size_ = 0;
}

SSL_DetectionBall::~SSL_DetectionBall() {
  // @@protoc_insertion_point(destructor:SSL_DetectionBall)
  SharedDtor();
}

void SSL_DetectionBall::SharedDtor() {
}

void SSL_DetectionBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_DetectionBall::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_DetectionBall& SSL_DetectionBall::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSL_DetectionBall* SSL_DetectionBall::New(::google::protobuf::Arena* arena) const {
  SSL_DetectionBall* n = new SSL_DetectionBall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionBall)
  ::memset(&confidence_, 0, reinterpret_cast<char*>(&pixel_y_) -
    reinterpret_cast<char*>(&confidence_) + sizeof(pixel_y_));
}

bool SSL_DetectionBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pixel_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pixel_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionBall)
  return false;
#undef DO_
}

void SSL_DetectionBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float confidence = 1;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // uint32 area = 2;
  if (this->area() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area(), output);
  }

  // float x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // float y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // float z = 5;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // float pixel_x = 6;
  if (this->pixel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pixel_x(), output);
  }

  // float pixel_y = 7;
  if (this->pixel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pixel_y(), output);
  }

  // @@protoc_insertion_point(serialize_end:SSL_DetectionBall)
}

::google::protobuf::uint8* SSL_DetectionBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float confidence = 1;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // uint32 area = 2;
  if (this->area() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area(), target);
  }

  // float x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // float y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // float z = 5;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  // float pixel_x = 6;
  if (this->pixel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pixel_x(), target);
  }

  // float pixel_y = 7;
  if (this->pixel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pixel_y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionBall)
  return target;
}

size_t SSL_DetectionBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionBall)
  size_t total_size = 0;

  // float confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // uint32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->area());
  }

  // float x = 3;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float pixel_x = 6;
  if (this->pixel_x() != 0) {
    total_size += 1 + 4;
  }

  // float pixel_y = 7;
  if (this->pixel_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_DetectionBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionBall)
    MergeFrom(*source);
  }
}

void SSL_DetectionBall::MergeFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.area() != 0) {
    set_area(from.area());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.pixel_x() != 0) {
    set_pixel_x(from.pixel_x());
  }
  if (from.pixel_y() != 0) {
    set_pixel_y(from.pixel_y());
  }
}

void SSL_DetectionBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionBall::CopyFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionBall::IsInitialized() const {
  return true;
}

void SSL_DetectionBall::Swap(SSL_DetectionBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionBall::InternalSwap(SSL_DetectionBall* other) {
  std::swap(confidence_, other->confidence_);
  std::swap(area_, other->area_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(pixel_x_, other->pixel_x_);
  std::swap(pixel_y_, other->pixel_y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_DetectionBall::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_DetectionBall

// float confidence = 1;
void SSL_DetectionBall::clear_confidence() {
  confidence_ = 0;
}
float SSL_DetectionBall::confidence() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.confidence)
  return confidence_;
}
void SSL_DetectionBall::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.confidence)
}

// uint32 area = 2;
void SSL_DetectionBall::clear_area() {
  area_ = 0u;
}
::google::protobuf::uint32 SSL_DetectionBall::area() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.area)
  return area_;
}
void SSL_DetectionBall::set_area(::google::protobuf::uint32 value) {
  
  area_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.area)
}

// float x = 3;
void SSL_DetectionBall::clear_x() {
  x_ = 0;
}
float SSL_DetectionBall::x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.x)
  return x_;
}
void SSL_DetectionBall::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.x)
}

// float y = 4;
void SSL_DetectionBall::clear_y() {
  y_ = 0;
}
float SSL_DetectionBall::y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.y)
  return y_;
}
void SSL_DetectionBall::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.y)
}

// float z = 5;
void SSL_DetectionBall::clear_z() {
  z_ = 0;
}
float SSL_DetectionBall::z() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.z)
  return z_;
}
void SSL_DetectionBall::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.z)
}

// float pixel_x = 6;
void SSL_DetectionBall::clear_pixel_x() {
  pixel_x_ = 0;
}
float SSL_DetectionBall::pixel_x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.pixel_x)
  return pixel_x_;
}
void SSL_DetectionBall::set_pixel_x(float value) {
  
  pixel_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.pixel_x)
}

// float pixel_y = 7;
void SSL_DetectionBall::clear_pixel_y() {
  pixel_y_ = 0;
}
float SSL_DetectionBall::pixel_y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.pixel_y)
  return pixel_y_;
}
void SSL_DetectionBall::set_pixel_y(float value) {
  
  pixel_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.pixel_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionRobot::kConfidenceFieldNumber;
const int SSL_DetectionRobot::kRobotIdFieldNumber;
const int SSL_DetectionRobot::kXFieldNumber;
const int SSL_DetectionRobot::kYFieldNumber;
const int SSL_DetectionRobot::kOrientationFieldNumber;
const int SSL_DetectionRobot::kPixelXFieldNumber;
const int SSL_DetectionRobot::kPixelYFieldNumber;
const int SSL_DetectionRobot::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionRobot::SSL_DetectionRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionRobot)
}
SSL_DetectionRobot::SSL_DetectionRobot(const SSL_DetectionRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&confidence_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionRobot)
}

void SSL_DetectionRobot::SharedCtor() {
  ::memset(&confidence_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&confidence_) + sizeof(height_));
  _cached_size_ = 0;
}

SSL_DetectionRobot::~SSL_DetectionRobot() {
  // @@protoc_insertion_point(destructor:SSL_DetectionRobot)
  SharedDtor();
}

void SSL_DetectionRobot::SharedDtor() {
}

void SSL_DetectionRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_DetectionRobot::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_DetectionRobot& SSL_DetectionRobot::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSL_DetectionRobot* SSL_DetectionRobot::New(::google::protobuf::Arena* arena) const {
  SSL_DetectionRobot* n = new SSL_DetectionRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionRobot)
  ::memset(&confidence_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&confidence_) + sizeof(height_));
}

bool SSL_DetectionRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float orientation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pixel_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pixel_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionRobot)
  return false;
#undef DO_
}

void SSL_DetectionRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float confidence = 1;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  // float x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // float y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // float orientation = 5;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->orientation(), output);
  }

  // float pixel_x = 6;
  if (this->pixel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pixel_x(), output);
  }

  // float pixel_y = 7;
  if (this->pixel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pixel_y(), output);
  }

  // float height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:SSL_DetectionRobot)
}

::google::protobuf::uint8* SSL_DetectionRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float confidence = 1;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  // float x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // float y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // float orientation = 5;
  if (this->orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->orientation(), target);
  }

  // float pixel_x = 6;
  if (this->pixel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pixel_x(), target);
  }

  // float pixel_y = 7;
  if (this->pixel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pixel_y(), target);
  }

  // float height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionRobot)
  return target;
}

size_t SSL_DetectionRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionRobot)
  size_t total_size = 0;

  // float confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // float x = 3;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float orientation = 5;
  if (this->orientation() != 0) {
    total_size += 1 + 4;
  }

  // float pixel_x = 6;
  if (this->pixel_x() != 0) {
    total_size += 1 + 4;
  }

  // float pixel_y = 7;
  if (this->pixel_y() != 0) {
    total_size += 1 + 4;
  }

  // float height = 8;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_DetectionRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionRobot)
    MergeFrom(*source);
  }
}

void SSL_DetectionRobot::MergeFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
  if (from.pixel_x() != 0) {
    set_pixel_x(from.pixel_x());
  }
  if (from.pixel_y() != 0) {
    set_pixel_y(from.pixel_y());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void SSL_DetectionRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionRobot::CopyFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionRobot::IsInitialized() const {
  return true;
}

void SSL_DetectionRobot::Swap(SSL_DetectionRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionRobot::InternalSwap(SSL_DetectionRobot* other) {
  std::swap(confidence_, other->confidence_);
  std::swap(robot_id_, other->robot_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(orientation_, other->orientation_);
  std::swap(pixel_x_, other->pixel_x_);
  std::swap(pixel_y_, other->pixel_y_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_DetectionRobot::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_DetectionRobot

// float confidence = 1;
void SSL_DetectionRobot::clear_confidence() {
  confidence_ = 0;
}
float SSL_DetectionRobot::confidence() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.confidence)
  return confidence_;
}
void SSL_DetectionRobot::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.confidence)
}

// uint32 robot_id = 2;
void SSL_DetectionRobot::clear_robot_id() {
  robot_id_ = 0u;
}
::google::protobuf::uint32 SSL_DetectionRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.robot_id)
  return robot_id_;
}
void SSL_DetectionRobot::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.robot_id)
}

// float x = 3;
void SSL_DetectionRobot::clear_x() {
  x_ = 0;
}
float SSL_DetectionRobot::x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.x)
  return x_;
}
void SSL_DetectionRobot::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.x)
}

// float y = 4;
void SSL_DetectionRobot::clear_y() {
  y_ = 0;
}
float SSL_DetectionRobot::y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.y)
  return y_;
}
void SSL_DetectionRobot::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.y)
}

// float orientation = 5;
void SSL_DetectionRobot::clear_orientation() {
  orientation_ = 0;
}
float SSL_DetectionRobot::orientation() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.orientation)
  return orientation_;
}
void SSL_DetectionRobot::set_orientation(float value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.orientation)
}

// float pixel_x = 6;
void SSL_DetectionRobot::clear_pixel_x() {
  pixel_x_ = 0;
}
float SSL_DetectionRobot::pixel_x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.pixel_x)
  return pixel_x_;
}
void SSL_DetectionRobot::set_pixel_x(float value) {
  
  pixel_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.pixel_x)
}

// float pixel_y = 7;
void SSL_DetectionRobot::clear_pixel_y() {
  pixel_y_ = 0;
}
float SSL_DetectionRobot::pixel_y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.pixel_y)
  return pixel_y_;
}
void SSL_DetectionRobot::set_pixel_y(float value) {
  
  pixel_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.pixel_y)
}

// float height = 8;
void SSL_DetectionRobot::clear_height() {
  height_ = 0;
}
float SSL_DetectionRobot::height() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.height)
  return height_;
}
void SSL_DetectionRobot::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionFrame::kFrameNumberFieldNumber;
const int SSL_DetectionFrame::kTCaptureFieldNumber;
const int SSL_DetectionFrame::kTSentFieldNumber;
const int SSL_DetectionFrame::kCameraIdFieldNumber;
const int SSL_DetectionFrame::kBallsFieldNumber;
const int SSL_DetectionFrame::kRobotsYellowFieldNumber;
const int SSL_DetectionFrame::kRobotsBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionFrame::SSL_DetectionFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionFrame)
}
SSL_DetectionFrame::SSL_DetectionFrame(const SSL_DetectionFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      balls_(from.balls_),
      robots_yellow_(from.robots_yellow_),
      robots_blue_(from.robots_blue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t_capture_, &from.t_capture_,
    reinterpret_cast<char*>(&t_sent_) -
    reinterpret_cast<char*>(&t_capture_) + sizeof(t_sent_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionFrame)
}

void SSL_DetectionFrame::SharedCtor() {
  ::memset(&t_capture_, 0, reinterpret_cast<char*>(&t_sent_) -
    reinterpret_cast<char*>(&t_capture_) + sizeof(t_sent_));
  _cached_size_ = 0;
}

SSL_DetectionFrame::~SSL_DetectionFrame() {
  // @@protoc_insertion_point(destructor:SSL_DetectionFrame)
  SharedDtor();
}

void SSL_DetectionFrame::SharedDtor() {
}

void SSL_DetectionFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_DetectionFrame::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_DetectionFrame& SSL_DetectionFrame::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSL_DetectionFrame* SSL_DetectionFrame::New(::google::protobuf::Arena* arena) const {
  SSL_DetectionFrame* n = new SSL_DetectionFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionFrame)
  balls_.Clear();
  robots_yellow_.Clear();
  robots_blue_.Clear();
  ::memset(&t_capture_, 0, reinterpret_cast<char*>(&t_sent_) -
    reinterpret_cast<char*>(&t_capture_) + sizeof(t_sent_));
}

bool SSL_DetectionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 frame_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t_capture = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_capture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t_sent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 camera_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_DetectionBall balls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_balls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_DetectionRobot robots_yellow = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_yellow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_DetectionRobot robots_blue = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_blue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionFrame)
  return false;
#undef DO_
}

void SSL_DetectionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_number = 1;
  if (this->frame_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_number(), output);
  }

  // double t_capture = 2;
  if (this->t_capture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t_capture(), output);
  }

  // double t_sent = 3;
  if (this->t_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->t_sent(), output);
  }

  // uint32 camera_id = 4;
  if (this->camera_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->camera_id(), output);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned int i = 0, n = this->balls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->balls(i), output);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned int i = 0, n = this->robots_yellow_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->robots_yellow(i), output);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned int i = 0, n = this->robots_blue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->robots_blue(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SSL_DetectionFrame)
}

::google::protobuf::uint8* SSL_DetectionFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_number = 1;
  if (this->frame_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_number(), target);
  }

  // double t_capture = 2;
  if (this->t_capture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t_capture(), target);
  }

  // double t_sent = 3;
  if (this->t_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->t_sent(), target);
  }

  // uint32 camera_id = 4;
  if (this->camera_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->camera_id(), target);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned int i = 0, n = this->balls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->balls(i), deterministic, target);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned int i = 0, n = this->robots_yellow_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->robots_yellow(i), deterministic, target);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned int i = 0, n = this->robots_blue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->robots_blue(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionFrame)
  return target;
}

size_t SSL_DetectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionFrame)
  size_t total_size = 0;

  // repeated .SSL_DetectionBall balls = 5;
  {
    unsigned int count = this->balls_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balls(i));
    }
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  {
    unsigned int count = this->robots_yellow_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robots_yellow(i));
    }
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  {
    unsigned int count = this->robots_blue_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robots_blue(i));
    }
  }

  // double t_capture = 2;
  if (this->t_capture() != 0) {
    total_size += 1 + 8;
  }

  // uint32 frame_number = 1;
  if (this->frame_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_number());
  }

  // uint32 camera_id = 4;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());
  }

  // double t_sent = 3;
  if (this->t_sent() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_DetectionFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionFrame)
    MergeFrom(*source);
  }
}

void SSL_DetectionFrame::MergeFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balls_.MergeFrom(from.balls_);
  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from.t_capture() != 0) {
    set_t_capture(from.t_capture());
  }
  if (from.frame_number() != 0) {
    set_frame_number(from.frame_number());
  }
  if (from.camera_id() != 0) {
    set_camera_id(from.camera_id());
  }
  if (from.t_sent() != 0) {
    set_t_sent(from.t_sent());
  }
}

void SSL_DetectionFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionFrame::CopyFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionFrame::IsInitialized() const {
  return true;
}

void SSL_DetectionFrame::Swap(SSL_DetectionFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionFrame::InternalSwap(SSL_DetectionFrame* other) {
  balls_.InternalSwap(&other->balls_);
  robots_yellow_.InternalSwap(&other->robots_yellow_);
  robots_blue_.InternalSwap(&other->robots_blue_);
  std::swap(t_capture_, other->t_capture_);
  std::swap(frame_number_, other->frame_number_);
  std::swap(camera_id_, other->camera_id_);
  std::swap(t_sent_, other->t_sent_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_DetectionFrame::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_DetectionFrame

// uint32 frame_number = 1;
void SSL_DetectionFrame::clear_frame_number() {
  frame_number_ = 0u;
}
::google::protobuf::uint32 SSL_DetectionFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.frame_number)
  return frame_number_;
}
void SSL_DetectionFrame::set_frame_number(::google::protobuf::uint32 value) {
  
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.frame_number)
}

// double t_capture = 2;
void SSL_DetectionFrame::clear_t_capture() {
  t_capture_ = 0;
}
double SSL_DetectionFrame::t_capture() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.t_capture)
  return t_capture_;
}
void SSL_DetectionFrame::set_t_capture(double value) {
  
  t_capture_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.t_capture)
}

// double t_sent = 3;
void SSL_DetectionFrame::clear_t_sent() {
  t_sent_ = 0;
}
double SSL_DetectionFrame::t_sent() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.t_sent)
  return t_sent_;
}
void SSL_DetectionFrame::set_t_sent(double value) {
  
  t_sent_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.t_sent)
}

// uint32 camera_id = 4;
void SSL_DetectionFrame::clear_camera_id() {
  camera_id_ = 0u;
}
::google::protobuf::uint32 SSL_DetectionFrame::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.camera_id)
  return camera_id_;
}
void SSL_DetectionFrame::set_camera_id(::google::protobuf::uint32 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.camera_id)
}

// repeated .SSL_DetectionBall balls = 5;
int SSL_DetectionFrame::balls_size() const {
  return balls_.size();
}
void SSL_DetectionFrame::clear_balls() {
  balls_.Clear();
}
const ::SSL_DetectionBall& SSL_DetectionFrame::balls(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.balls)
  return balls_.Get(index);
}
::SSL_DetectionBall* SSL_DetectionFrame::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.balls)
  return balls_.Mutable(index);
}
::SSL_DetectionBall* SSL_DetectionFrame::add_balls() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.balls)
  return balls_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall >*
SSL_DetectionFrame::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.balls)
  return &balls_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall >&
SSL_DetectionFrame::balls() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.balls)
  return balls_;
}

// repeated .SSL_DetectionRobot robots_yellow = 6;
int SSL_DetectionFrame::robots_yellow_size() const {
  return robots_yellow_.size();
}
void SSL_DetectionFrame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
const ::SSL_DetectionRobot& SSL_DetectionFrame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_.Get(index);
}
::SSL_DetectionRobot* SSL_DetectionFrame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
::SSL_DetectionRobot* SSL_DetectionFrame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot >*
SSL_DetectionFrame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.robots_yellow)
  return &robots_yellow_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot >&
SSL_DetectionFrame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_;
}

// repeated .SSL_DetectionRobot robots_blue = 7;
int SSL_DetectionFrame::robots_blue_size() const {
  return robots_blue_.size();
}
void SSL_DetectionFrame::clear_robots_blue() {
  robots_blue_.Clear();
}
const ::SSL_DetectionRobot& SSL_DetectionFrame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.robots_blue)
  return robots_blue_.Get(index);
}
::SSL_DetectionRobot* SSL_DetectionFrame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.robots_blue)
  return robots_blue_.Mutable(index);
}
::SSL_DetectionRobot* SSL_DetectionFrame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.robots_blue)
  return robots_blue_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot >*
SSL_DetectionFrame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.robots_blue)
  return &robots_blue_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot >&
SSL_DetectionFrame::robots_blue() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.robots_blue)
  return robots_blue_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
