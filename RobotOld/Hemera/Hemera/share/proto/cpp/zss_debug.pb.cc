// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_debug.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zss_debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZSS {
namespace Protocol {
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class RectangleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Rectangle> {
} _Rectangle_default_instance_;
class Debug_RobotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Robot> {
} _Debug_Robot_default_instance_;
class Debug_LineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Line> {
} _Debug_Line_default_instance_;
class Debug_ArcDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Arc> {
} _Debug_Arc_default_instance_;
class Debug_PolygonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Polygon> {
} _Debug_Polygon_default_instance_;
class Debug_TextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Text> {
} _Debug_Text_default_instance_;
class Debug_Curve_DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Curve_> {
} _Debug_Curve__default_instance_;
class Debug_CurveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Curve> {
} _Debug_Curve_default_instance_;
class Debug_MsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Msg> {
} _Debug_Msg_default_instance_;
class Debug_MsgsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Msgs> {
} _Debug_Msgs_default_instance_;

namespace protobuf_zss_5fdebug_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, point1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, point2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Robot, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Robot, dir_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, back_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, rectangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Arc, fill_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Polygon, vertex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Polygon, fill_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Text, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Text, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, maxlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve_, minlimit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, p1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, p2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Curve, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, arc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, robot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msg, polygon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Msgs, msgs_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Point)},
  { 7, -1, sizeof(Rectangle)},
  { 14, -1, sizeof(Debug_Robot)},
  { 21, -1, sizeof(Debug_Line)},
  { 30, -1, sizeof(Debug_Arc)},
  { 39, -1, sizeof(Debug_Polygon)},
  { 46, -1, sizeof(Debug_Text)},
  { 53, -1, sizeof(Debug_Curve_)},
  { 61, -1, sizeof(Debug_Curve)},
  { 70, -1, sizeof(Debug_Msg)},
  { 83, -1, sizeof(Debug_Msgs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rectangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Robot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Arc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Text_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Curve__default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Curve_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Msg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Msgs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zss_debug.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Rectangle_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Debug_Robot_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Debug_Line_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Debug_Arc_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Debug_Polygon_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Debug_Text_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Debug_Curve__default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Debug_Curve_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Debug_Msg_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Debug_Msgs_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Point_default_instance_.DefaultConstruct();
  _Rectangle_default_instance_.DefaultConstruct();
  _Debug_Robot_default_instance_.DefaultConstruct();
  _Debug_Line_default_instance_.DefaultConstruct();
  _Debug_Arc_default_instance_.DefaultConstruct();
  _Debug_Polygon_default_instance_.DefaultConstruct();
  _Debug_Text_default_instance_.DefaultConstruct();
  _Debug_Curve__default_instance_.DefaultConstruct();
  _Debug_Curve_default_instance_.DefaultConstruct();
  _Debug_Msg_default_instance_.DefaultConstruct();
  _Debug_Msgs_default_instance_.DefaultConstruct();
  _Rectangle_default_instance_.get_mutable()->point1_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Rectangle_default_instance_.get_mutable()->point2_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Robot_default_instance_.get_mutable()->pos_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Line_default_instance_.get_mutable()->start_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Line_default_instance_.get_mutable()->end_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Arc_default_instance_.get_mutable()->rectangle_ = const_cast< ::ZSS::Protocol::Rectangle*>(
      ::ZSS::Protocol::Rectangle::internal_default_instance());
  _Debug_Text_default_instance_.get_mutable()->pos_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Curve_default_instance_.get_mutable()->start_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Curve_default_instance_.get_mutable()->p1_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Curve_default_instance_.get_mutable()->p2_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Curve_default_instance_.get_mutable()->end_ = const_cast< ::ZSS::Protocol::Point*>(
      ::ZSS::Protocol::Point::internal_default_instance());
  _Debug_Msg_default_instance_.get_mutable()->arc_ = const_cast< ::ZSS::Protocol::Debug_Arc*>(
      ::ZSS::Protocol::Debug_Arc::internal_default_instance());
  _Debug_Msg_default_instance_.get_mutable()->line_ = const_cast< ::ZSS::Protocol::Debug_Line*>(
      ::ZSS::Protocol::Debug_Line::internal_default_instance());
  _Debug_Msg_default_instance_.get_mutable()->text_ = const_cast< ::ZSS::Protocol::Debug_Text*>(
      ::ZSS::Protocol::Debug_Text::internal_default_instance());
  _Debug_Msg_default_instance_.get_mutable()->robot_ = const_cast< ::ZSS::Protocol::Debug_Robot*>(
      ::ZSS::Protocol::Debug_Robot::internal_default_instance());
  _Debug_Msg_default_instance_.get_mutable()->curve_ = const_cast< ::ZSS::Protocol::Debug_Curve_*>(
      ::ZSS::Protocol::Debug_Curve_::internal_default_instance());
  _Debug_Msg_default_instance_.get_mutable()->polygon_ = const_cast< ::ZSS::Protocol::Debug_Polygon*>(
      ::ZSS::Protocol::Debug_Polygon::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017zss_debug.proto\022\014ZSS.Protocol\"\035\n\005Point"
      "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"U\n\tRectangle\022#\n\006p"
      "oint1\030\001 \001(\0132\023.ZSS.Protocol.Point\022#\n\006poin"
      "t2\030\002 \001(\0132\023.ZSS.Protocol.Point\"<\n\013Debug_R"
      "obot\022 \n\003pos\030\001 \001(\0132\023.ZSS.Protocol.Point\022\013"
      "\n\003dir\030\002 \001(\002\"q\n\nDebug_Line\022\"\n\005start\030\001 \001(\013"
      "2\023.ZSS.Protocol.Point\022 \n\003end\030\002 \001(\0132\023.ZSS"
      ".Protocol.Point\022\017\n\007FORWARD\030\003 \001(\010\022\014\n\004BACK"
      "\030\004 \001(\010\"a\n\tDebug_Arc\022*\n\trectangle\030\001 \001(\0132\027"
      ".ZSS.Protocol.Rectangle\022\r\n\005start\030\002 \001(\002\022\013"
      "\n\003end\030\003 \001(\002\022\014\n\004FILL\030\004 \001(\010\"B\n\rDebug_Polyg"
      "on\022#\n\006vertex\030\001 \003(\0132\023.ZSS.Protocol.Point\022"
      "\014\n\004FILL\030\002 \001(\010\"<\n\nDebug_Text\022 \n\003pos\030\001 \001(\013"
      "2\023.ZSS.Protocol.Point\022\014\n\004text\030\002 \001(\t\"\?\n\014D"
      "ebug_Curve_\022\013\n\003num\030\001 \001(\002\022\020\n\010maxLimit\030\002 \001"
      "(\002\022\020\n\010minLimit\030\003 \001(\002\"\225\001\n\013Debug_Curve\022\"\n\005"
      "start\030\001 \001(\0132\023.ZSS.Protocol.Point\022\037\n\002p1\030\002"
      " \001(\0132\023.ZSS.Protocol.Point\022\037\n\002p2\030\003 \001(\0132\023."
      "ZSS.Protocol.Point\022 \n\003end\030\004 \001(\0132\023.ZSS.Pr"
      "otocol.Point\"\247\004\n\tDebug_Msg\0220\n\004type\030\001 \001(\016"
      "2\".ZSS.Protocol.Debug_Msg.Debug_Type\022,\n\005"
      "color\030\002 \001(\0162\035.ZSS.Protocol.Debug_Msg.Col"
      "or\022$\n\003arc\030\003 \001(\0132\027.ZSS.Protocol.Debug_Arc"
      "\022&\n\004line\030\004 \001(\0132\030.ZSS.Protocol.Debug_Line"
      "\022&\n\004text\030\005 \001(\0132\030.ZSS.Protocol.Debug_Text"
      "\022(\n\005robot\030\006 \001(\0132\031.ZSS.Protocol.Debug_Rob"
      "ot\022)\n\005curve\030\007 \001(\0132\032.ZSS.Protocol.Debug_C"
      "urve_\022,\n\007polygon\030\010 \001(\0132\033.ZSS.Protocol.De"
      "bug_Polygon\"L\n\nDebug_Type\022\007\n\003ARC\020\000\022\010\n\004LI"
      "NE\020\001\022\010\n\004TEXT\020\002\022\t\n\005ROBOT\020\003\022\t\n\005CURVE\020\004\022\013\n\007"
      "POLYGON\020\005\"s\n\005Color\022\t\n\005WHITE\020\000\022\007\n\003RED\020\001\022\n"
      "\n\006ORANGE\020\002\022\n\n\006YELLOW\020\003\022\t\n\005GREEN\020\004\022\010\n\004CYA"
      "N\020\005\022\010\n\004BLUE\020\006\022\n\n\006PURPLE\020\007\022\010\n\004GRAY\020\010\022\t\n\005B"
      "LACK\020\t\"3\n\nDebug_Msgs\022%\n\004msgs\030\001 \003(\0132\027.ZSS"
      ".Protocol.Debug_Msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zss_debug.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_zss_5fdebug_2eproto

const ::google::protobuf::EnumDescriptor* Debug_Msg_Debug_Type_descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_enum_descriptors[0];
}
bool Debug_Msg_Debug_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Debug_Msg_Debug_Type Debug_Msg::ARC;
const Debug_Msg_Debug_Type Debug_Msg::LINE;
const Debug_Msg_Debug_Type Debug_Msg::TEXT;
const Debug_Msg_Debug_Type Debug_Msg::ROBOT;
const Debug_Msg_Debug_Type Debug_Msg::CURVE;
const Debug_Msg_Debug_Type Debug_Msg::POLYGON;
const Debug_Msg_Debug_Type Debug_Msg::Debug_Type_MIN;
const Debug_Msg_Debug_Type Debug_Msg::Debug_Type_MAX;
const int Debug_Msg::Debug_Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Debug_Msg_Color_descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_enum_descriptors[1];
}
bool Debug_Msg_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Debug_Msg_Color Debug_Msg::WHITE;
const Debug_Msg_Color Debug_Msg::RED;
const Debug_Msg_Color Debug_Msg::ORANGE;
const Debug_Msg_Color Debug_Msg::YELLOW;
const Debug_Msg_Color Debug_Msg::GREEN;
const Debug_Msg_Color Debug_Msg::CYAN;
const Debug_Msg_Color Debug_Msg::BLUE;
const Debug_Msg_Color Debug_Msg::PURPLE;
const Debug_Msg_Color Debug_Msg::GRAY;
const Debug_Msg_Color Debug_Msg::BLACK;
const Debug_Msg_Color Debug_Msg::Color_MIN;
const Debug_Msg_Color Debug_Msg::Color_MAX;
const int Debug_Msg::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Point)
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Point)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// float x = 1;
void Point::clear_x() {
  x_ = 0;
}
float Point::x() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Point.x)
  return x_;
}
void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Point.x)
}

// float y = 2;
void Point::clear_y() {
  y_ = 0;
}
float Point::y() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Point.y)
  return y_;
}
void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Point.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rectangle::kPoint1FieldNumber;
const int Rectangle::kPoint2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rectangle::Rectangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point1()) {
    point1_ = new ::ZSS::Protocol::Point(*from.point1_);
  } else {
    point1_ = NULL;
  }
  if (from.has_point2()) {
    point2_ = new ::ZSS::Protocol::Point(*from.point2_);
  } else {
    point2_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Rectangle)
}

void Rectangle::SharedCtor() {
  ::memset(&point1_, 0, reinterpret_cast<char*>(&point2_) -
    reinterpret_cast<char*>(&point1_) + sizeof(point2_));
  _cached_size_ = 0;
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete point1_;
  }
  if (this != internal_default_instance()) {
    delete point2_;
  }
}

void Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rectangle& Rectangle::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rectangle* Rectangle::New(::google::protobuf::Arena* arena) const {
  Rectangle* n = new Rectangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Rectangle)
  if (GetArenaNoVirtual() == NULL && point1_ != NULL) {
    delete point1_;
  }
  point1_ = NULL;
  if (GetArenaNoVirtual() == NULL && point2_ != NULL) {
    delete point2_;
  }
  point2_ = NULL;
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Rectangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZSS.Protocol.Point point1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Point point2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Rectangle)
  return false;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point point1 = 1;
  if (this->has_point1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point1_, output);
  }

  // .ZSS.Protocol.Point point2 = 2;
  if (this->has_point2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->point2_, output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Rectangle)
}

::google::protobuf::uint8* Rectangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point point1 = 1;
  if (this->has_point1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->point1_, deterministic, target);
  }

  // .ZSS.Protocol.Point point2 = 2;
  if (this->has_point2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->point2_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Rectangle)
  size_t total_size = 0;

  // .ZSS.Protocol.Point point1 = 1;
  if (this->has_point1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point1_);
  }

  // .ZSS.Protocol.Point point2 = 2;
  if (this->has_point2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point2_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rectangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Rectangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point1()) {
    mutable_point1()->::ZSS::Protocol::Point::MergeFrom(from.point1());
  }
  if (from.has_point2()) {
    mutable_point2()->::ZSS::Protocol::Point::MergeFrom(from.point2());
  }
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rectangle::InternalSwap(Rectangle* other) {
  std::swap(point1_, other->point1_);
  std::swap(point2_, other->point2_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rectangle

// .ZSS.Protocol.Point point1 = 1;
bool Rectangle::has_point1() const {
  return this != internal_default_instance() && point1_ != NULL;
}
void Rectangle::clear_point1() {
  if (GetArenaNoVirtual() == NULL && point1_ != NULL) delete point1_;
  point1_ = NULL;
}
const ::ZSS::Protocol::Point& Rectangle::point1() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Rectangle.point1)
  return point1_ != NULL ? *point1_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Rectangle::mutable_point1() {
  
  if (point1_ == NULL) {
    point1_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Rectangle.point1)
  return point1_;
}
::ZSS::Protocol::Point* Rectangle::release_point1() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Rectangle.point1)
  
  ::ZSS::Protocol::Point* temp = point1_;
  point1_ = NULL;
  return temp;
}
void Rectangle::set_allocated_point1(::ZSS::Protocol::Point* point1) {
  delete point1_;
  point1_ = point1;
  if (point1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Rectangle.point1)
}

// .ZSS.Protocol.Point point2 = 2;
bool Rectangle::has_point2() const {
  return this != internal_default_instance() && point2_ != NULL;
}
void Rectangle::clear_point2() {
  if (GetArenaNoVirtual() == NULL && point2_ != NULL) delete point2_;
  point2_ = NULL;
}
const ::ZSS::Protocol::Point& Rectangle::point2() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Rectangle.point2)
  return point2_ != NULL ? *point2_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Rectangle::mutable_point2() {
  
  if (point2_ == NULL) {
    point2_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Rectangle.point2)
  return point2_;
}
::ZSS::Protocol::Point* Rectangle::release_point2() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Rectangle.point2)
  
  ::ZSS::Protocol::Point* temp = point2_;
  point2_ = NULL;
  return temp;
}
void Rectangle::set_allocated_point2(::ZSS::Protocol::Point* point2) {
  delete point2_;
  point2_ = point2;
  if (point2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Rectangle.point2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Robot::kPosFieldNumber;
const int Debug_Robot::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Robot::Debug_Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Robot)
}
Debug_Robot::Debug_Robot(const Debug_Robot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::ZSS::Protocol::Point(*from.pos_);
  } else {
    pos_ = NULL;
  }
  dir_ = from.dir_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Robot)
}

void Debug_Robot::SharedCtor() {
  ::memset(&pos_, 0, reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&pos_) + sizeof(dir_));
  _cached_size_ = 0;
}

Debug_Robot::~Debug_Robot() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Robot)
  SharedDtor();
}

void Debug_Robot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
}

void Debug_Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Robot::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Robot& Debug_Robot::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Robot* Debug_Robot::New(::google::protobuf::Arena* arena) const {
  Debug_Robot* n = new Debug_Robot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Robot)
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  dir_ = 0;
}

bool Debug_Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Robot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZSS.Protocol.Point pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Robot)
  return false;
#undef DO_
}

void Debug_Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // float dir = 2;
  if (this->dir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Robot)
}

::google::protobuf::uint8* Debug_Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, deterministic, target);
  }

  // float dir = 2;
  if (this->dir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Robot)
  return target;
}

size_t Debug_Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Robot)
  size_t total_size = 0;

  // .ZSS.Protocol.Point pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // float dir = 2;
  if (this->dir() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Robot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Robot)
    MergeFrom(*source);
  }
}

void Debug_Robot::MergeFrom(const Debug_Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::ZSS::Protocol::Point::MergeFrom(from.pos());
  }
  if (from.dir() != 0) {
    set_dir(from.dir());
  }
}

void Debug_Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Robot::CopyFrom(const Debug_Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Robot::IsInitialized() const {
  return true;
}

void Debug_Robot::Swap(Debug_Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Robot::InternalSwap(Debug_Robot* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Robot::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Robot

// .ZSS.Protocol.Point pos = 1;
bool Debug_Robot::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void Debug_Robot::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::ZSS::Protocol::Point& Debug_Robot::pos() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Robot.pos)
  return pos_ != NULL ? *pos_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Debug_Robot::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Robot.pos)
  return pos_;
}
::ZSS::Protocol::Point* Debug_Robot::release_pos() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Robot.pos)
  
  ::ZSS::Protocol::Point* temp = pos_;
  pos_ = NULL;
  return temp;
}
void Debug_Robot::set_allocated_pos(::ZSS::Protocol::Point* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Robot.pos)
}

// float dir = 2;
void Debug_Robot::clear_dir() {
  dir_ = 0;
}
float Debug_Robot::dir() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Robot.dir)
  return dir_;
}
void Debug_Robot::set_dir(float value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Robot.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Line::kStartFieldNumber;
const int Debug_Line::kEndFieldNumber;
const int Debug_Line::kFORWARDFieldNumber;
const int Debug_Line::kBACKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Line::Debug_Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Line)
}
Debug_Line::Debug_Line(const Debug_Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::ZSS::Protocol::Point(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::ZSS::Protocol::Point(*from.end_);
  } else {
    end_ = NULL;
  }
  ::memcpy(&forward_, &from.forward_,
    reinterpret_cast<char*>(&back_) -
    reinterpret_cast<char*>(&forward_) + sizeof(back_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Line)
}

void Debug_Line::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&back_) -
    reinterpret_cast<char*>(&start_) + sizeof(back_));
  _cached_size_ = 0;
}

Debug_Line::~Debug_Line() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Line)
  SharedDtor();
}

void Debug_Line::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete end_;
  }
}

void Debug_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Line::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Line& Debug_Line::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Line* Debug_Line::New(::google::protobuf::Arena* arena) const {
  Debug_Line* n = new Debug_Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Line::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Line)
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
  ::memset(&forward_, 0, reinterpret_cast<char*>(&back_) -
    reinterpret_cast<char*>(&forward_) + sizeof(back_));
}

bool Debug_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZSS.Protocol.Point start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Point end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool FORWARD = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BACK = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Line)
  return false;
#undef DO_
}

void Debug_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_, output);
  }

  // .ZSS.Protocol.Point end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_, output);
  }

  // bool FORWARD = 3;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forward(), output);
  }

  // bool BACK = 4;
  if (this->back() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->back(), output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Line)
}

::google::protobuf::uint8* Debug_Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_, deterministic, target);
  }

  // .ZSS.Protocol.Point end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->end_, deterministic, target);
  }

  // bool FORWARD = 3;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forward(), target);
  }

  // bool BACK = 4;
  if (this->back() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->back(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Line)
  return target;
}

size_t Debug_Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Line)
  size_t total_size = 0;

  // .ZSS.Protocol.Point start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  // .ZSS.Protocol.Point end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_);
  }

  // bool FORWARD = 3;
  if (this->forward() != 0) {
    total_size += 1 + 1;
  }

  // bool BACK = 4;
  if (this->back() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Line)
    MergeFrom(*source);
  }
}

void Debug_Line::MergeFrom(const Debug_Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::ZSS::Protocol::Point::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::ZSS::Protocol::Point::MergeFrom(from.end());
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.back() != 0) {
    set_back(from.back());
  }
}

void Debug_Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Line::CopyFrom(const Debug_Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Line::IsInitialized() const {
  return true;
}

void Debug_Line::Swap(Debug_Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Line::InternalSwap(Debug_Line* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(forward_, other->forward_);
  std::swap(back_, other->back_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Line::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Line

// .ZSS.Protocol.Point start = 1;
bool Debug_Line::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
void Debug_Line::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
const ::ZSS::Protocol::Point& Debug_Line::start() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Line.start)
  return start_ != NULL ? *start_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Debug_Line::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Line.start)
  return start_;
}
::ZSS::Protocol::Point* Debug_Line::release_start() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Line.start)
  
  ::ZSS::Protocol::Point* temp = start_;
  start_ = NULL;
  return temp;
}
void Debug_Line::set_allocated_start(::ZSS::Protocol::Point* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Line.start)
}

// .ZSS.Protocol.Point end = 2;
bool Debug_Line::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
void Debug_Line::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
const ::ZSS::Protocol::Point& Debug_Line::end() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Line.end)
  return end_ != NULL ? *end_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Debug_Line::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Line.end)
  return end_;
}
::ZSS::Protocol::Point* Debug_Line::release_end() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Line.end)
  
  ::ZSS::Protocol::Point* temp = end_;
  end_ = NULL;
  return temp;
}
void Debug_Line::set_allocated_end(::ZSS::Protocol::Point* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Line.end)
}

// bool FORWARD = 3;
void Debug_Line::clear_forward() {
  forward_ = false;
}
bool Debug_Line::forward() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Line.FORWARD)
  return forward_;
}
void Debug_Line::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Line.FORWARD)
}

// bool BACK = 4;
void Debug_Line::clear_back() {
  back_ = false;
}
bool Debug_Line::back() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Line.BACK)
  return back_;
}
void Debug_Line::set_back(bool value) {
  
  back_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Line.BACK)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Arc::kRectangleFieldNumber;
const int Debug_Arc::kStartFieldNumber;
const int Debug_Arc::kEndFieldNumber;
const int Debug_Arc::kFILLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Arc::Debug_Arc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Arc)
}
Debug_Arc::Debug_Arc(const Debug_Arc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rectangle()) {
    rectangle_ = new ::ZSS::Protocol::Rectangle(*from.rectangle_);
  } else {
    rectangle_ = NULL;
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&fill_) -
    reinterpret_cast<char*>(&start_) + sizeof(fill_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Arc)
}

void Debug_Arc::SharedCtor() {
  ::memset(&rectangle_, 0, reinterpret_cast<char*>(&fill_) -
    reinterpret_cast<char*>(&rectangle_) + sizeof(fill_));
  _cached_size_ = 0;
}

Debug_Arc::~Debug_Arc() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Arc)
  SharedDtor();
}

void Debug_Arc::SharedDtor() {
  if (this != internal_default_instance()) {
    delete rectangle_;
  }
}

void Debug_Arc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Arc::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Arc& Debug_Arc::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Arc* Debug_Arc::New(::google::protobuf::Arena* arena) const {
  Debug_Arc* n = new Debug_Arc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Arc::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Arc)
  if (GetArenaNoVirtual() == NULL && rectangle_ != NULL) {
    delete rectangle_;
  }
  rectangle_ = NULL;
  ::memset(&start_, 0, reinterpret_cast<char*>(&fill_) -
    reinterpret_cast<char*>(&start_) + sizeof(fill_));
}

bool Debug_Arc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Arc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZSS.Protocol.Rectangle rectangle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool FILL = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Arc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Arc)
  return false;
#undef DO_
}

void Debug_Arc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Rectangle rectangle = 1;
  if (this->has_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rectangle_, output);
  }

  // float start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start(), output);
  }

  // float end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end(), output);
  }

  // bool FILL = 4;
  if (this->fill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fill(), output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Arc)
}

::google::protobuf::uint8* Debug_Arc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Rectangle rectangle = 1;
  if (this->has_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->rectangle_, deterministic, target);
  }

  // float start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->start(), target);
  }

  // float end = 3;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end(), target);
  }

  // bool FILL = 4;
  if (this->fill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fill(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Arc)
  return target;
}

size_t Debug_Arc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Arc)
  size_t total_size = 0;

  // .ZSS.Protocol.Rectangle rectangle = 1;
  if (this->has_rectangle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rectangle_);
  }

  // float start = 2;
  if (this->start() != 0) {
    total_size += 1 + 4;
  }

  // float end = 3;
  if (this->end() != 0) {
    total_size += 1 + 4;
  }

  // bool FILL = 4;
  if (this->fill() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Arc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Arc)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Arc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Arc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Arc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Arc)
    MergeFrom(*source);
  }
}

void Debug_Arc::MergeFrom(const Debug_Arc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Arc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rectangle()) {
    mutable_rectangle()->::ZSS::Protocol::Rectangle::MergeFrom(from.rectangle());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.fill() != 0) {
    set_fill(from.fill());
  }
}

void Debug_Arc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Arc::CopyFrom(const Debug_Arc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Arc::IsInitialized() const {
  return true;
}

void Debug_Arc::Swap(Debug_Arc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Arc::InternalSwap(Debug_Arc* other) {
  std::swap(rectangle_, other->rectangle_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(fill_, other->fill_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Arc::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Arc

// .ZSS.Protocol.Rectangle rectangle = 1;
bool Debug_Arc::has_rectangle() const {
  return this != internal_default_instance() && rectangle_ != NULL;
}
void Debug_Arc::clear_rectangle() {
  if (GetArenaNoVirtual() == NULL && rectangle_ != NULL) delete rectangle_;
  rectangle_ = NULL;
}
const ::ZSS::Protocol::Rectangle& Debug_Arc::rectangle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Arc.rectangle)
  return rectangle_ != NULL ? *rectangle_
                         : *::ZSS::Protocol::Rectangle::internal_default_instance();
}
::ZSS::Protocol::Rectangle* Debug_Arc::mutable_rectangle() {
  
  if (rectangle_ == NULL) {
    rectangle_ = new ::ZSS::Protocol::Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Arc.rectangle)
  return rectangle_;
}
::ZSS::Protocol::Rectangle* Debug_Arc::release_rectangle() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Arc.rectangle)
  
  ::ZSS::Protocol::Rectangle* temp = rectangle_;
  rectangle_ = NULL;
  return temp;
}
void Debug_Arc::set_allocated_rectangle(::ZSS::Protocol::Rectangle* rectangle) {
  delete rectangle_;
  rectangle_ = rectangle;
  if (rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Arc.rectangle)
}

// float start = 2;
void Debug_Arc::clear_start() {
  start_ = 0;
}
float Debug_Arc::start() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Arc.start)
  return start_;
}
void Debug_Arc::set_start(float value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Arc.start)
}

// float end = 3;
void Debug_Arc::clear_end() {
  end_ = 0;
}
float Debug_Arc::end() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Arc.end)
  return end_;
}
void Debug_Arc::set_end(float value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Arc.end)
}

// bool FILL = 4;
void Debug_Arc::clear_fill() {
  fill_ = false;
}
bool Debug_Arc::fill() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Arc.FILL)
  return fill_;
}
void Debug_Arc::set_fill(bool value) {
  
  fill_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Arc.FILL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Polygon::kVertexFieldNumber;
const int Debug_Polygon::kFILLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Polygon::Debug_Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Polygon)
}
Debug_Polygon::Debug_Polygon(const Debug_Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vertex_(from.vertex_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fill_ = from.fill_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Polygon)
}

void Debug_Polygon::SharedCtor() {
  fill_ = false;
  _cached_size_ = 0;
}

Debug_Polygon::~Debug_Polygon() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Polygon)
  SharedDtor();
}

void Debug_Polygon::SharedDtor() {
}

void Debug_Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Polygon::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Polygon& Debug_Polygon::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Polygon* Debug_Polygon::New(::google::protobuf::Arena* arena) const {
  Debug_Polygon* n = new Debug_Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Polygon)
  vertex_.Clear();
  fill_ = false;
}

bool Debug_Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.Point vertex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool FILL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Polygon)
  return false;
#undef DO_
}

void Debug_Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Point vertex = 1;
  for (unsigned int i = 0, n = this->vertex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertex(i), output);
  }

  // bool FILL = 2;
  if (this->fill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fill(), output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Polygon)
}

::google::protobuf::uint8* Debug_Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Point vertex = 1;
  for (unsigned int i = 0, n = this->vertex_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->vertex(i), deterministic, target);
  }

  // bool FILL = 2;
  if (this->fill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fill(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Polygon)
  return target;
}

size_t Debug_Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Polygon)
  size_t total_size = 0;

  // repeated .ZSS.Protocol.Point vertex = 1;
  {
    unsigned int count = this->vertex_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertex(i));
    }
  }

  // bool FILL = 2;
  if (this->fill() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Polygon)
    MergeFrom(*source);
  }
}

void Debug_Polygon::MergeFrom(const Debug_Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_.MergeFrom(from.vertex_);
  if (from.fill() != 0) {
    set_fill(from.fill());
  }
}

void Debug_Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Polygon::CopyFrom(const Debug_Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Polygon::IsInitialized() const {
  return true;
}

void Debug_Polygon::Swap(Debug_Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Polygon::InternalSwap(Debug_Polygon* other) {
  vertex_.InternalSwap(&other->vertex_);
  std::swap(fill_, other->fill_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Polygon::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Polygon

// repeated .ZSS.Protocol.Point vertex = 1;
int Debug_Polygon::vertex_size() const {
  return vertex_.size();
}
void Debug_Polygon::clear_vertex() {
  vertex_.Clear();
}
const ::ZSS::Protocol::Point& Debug_Polygon::vertex(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Polygon.vertex)
  return vertex_.Get(index);
}
::ZSS::Protocol::Point* Debug_Polygon::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Polygon.vertex)
  return vertex_.Mutable(index);
}
::ZSS::Protocol::Point* Debug_Polygon::add_vertex() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Debug_Polygon.vertex)
  return vertex_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Point >*
Debug_Polygon::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Debug_Polygon.vertex)
  return &vertex_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Point >&
Debug_Polygon::vertex() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Debug_Polygon.vertex)
  return vertex_;
}

// bool FILL = 2;
void Debug_Polygon::clear_fill() {
  fill_ = false;
}
bool Debug_Polygon::fill() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Polygon.FILL)
  return fill_;
}
void Debug_Polygon::set_fill(bool value) {
  
  fill_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Polygon.FILL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Text::kPosFieldNumber;
const int Debug_Text::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Text::Debug_Text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Text)
}
Debug_Text::Debug_Text(const Debug_Text& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_pos()) {
    pos_ = new ::ZSS::Protocol::Point(*from.pos_);
  } else {
    pos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Text)
}

void Debug_Text::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = NULL;
  _cached_size_ = 0;
}

Debug_Text::~Debug_Text() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Text)
  SharedDtor();
}

void Debug_Text::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pos_;
  }
}

void Debug_Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Text::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Text& Debug_Text::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Text* Debug_Text::New(::google::protobuf::Arena* arena) const {
  Debug_Text* n = new Debug_Text;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Text::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Text)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}

bool Debug_Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZSS.Protocol.Point pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZSS.Protocol.Debug_Text.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Text)
  return false;
#undef DO_
}

void Debug_Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZSS.Protocol.Debug_Text.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Text)
}

::google::protobuf::uint8* Debug_Text::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, deterministic, target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZSS.Protocol.Debug_Text.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Text)
  return target;
}

size_t Debug_Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Text)
  size_t total_size = 0;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .ZSS.Protocol.Point pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Text* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Text)
    MergeFrom(*source);
  }
}

void Debug_Text::MergeFrom(const Debug_Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_pos()) {
    mutable_pos()->::ZSS::Protocol::Point::MergeFrom(from.pos());
  }
}

void Debug_Text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Text::CopyFrom(const Debug_Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Text::IsInitialized() const {
  return true;
}

void Debug_Text::Swap(Debug_Text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Text::InternalSwap(Debug_Text* other) {
  text_.Swap(&other->text_);
  std::swap(pos_, other->pos_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Text::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Text

// .ZSS.Protocol.Point pos = 1;
bool Debug_Text::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void Debug_Text::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::ZSS::Protocol::Point& Debug_Text::pos() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Text.pos)
  return pos_ != NULL ? *pos_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Debug_Text::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Text.pos)
  return pos_;
}
::ZSS::Protocol::Point* Debug_Text::release_pos() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Text.pos)
  
  ::ZSS::Protocol::Point* temp = pos_;
  pos_ = NULL;
  return temp;
}
void Debug_Text::set_allocated_pos(::ZSS::Protocol::Point* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Text.pos)
}

// string text = 2;
void Debug_Text::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Debug_Text::text() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Text.text)
  return text_.GetNoArena();
}
void Debug_Text::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Text.text)
}
#if LANG_CXX11
void Debug_Text::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZSS.Protocol.Debug_Text.text)
}
#endif
void Debug_Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZSS.Protocol.Debug_Text.text)
}
void Debug_Text::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZSS.Protocol.Debug_Text.text)
}
::std::string* Debug_Text::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Text.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Debug_Text::release_text() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Text.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Debug_Text::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Text.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Curve_::kNumFieldNumber;
const int Debug_Curve_::kMaxLimitFieldNumber;
const int Debug_Curve_::kMinLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Curve_::Debug_Curve_()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Curve_)
}
Debug_Curve_::Debug_Curve_(const Debug_Curve_& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    reinterpret_cast<char*>(&minlimit_) -
    reinterpret_cast<char*>(&num_) + sizeof(minlimit_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Curve_)
}

void Debug_Curve_::SharedCtor() {
  ::memset(&num_, 0, reinterpret_cast<char*>(&minlimit_) -
    reinterpret_cast<char*>(&num_) + sizeof(minlimit_));
  _cached_size_ = 0;
}

Debug_Curve_::~Debug_Curve_() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Curve_)
  SharedDtor();
}

void Debug_Curve_::SharedDtor() {
}

void Debug_Curve_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Curve_::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Curve_& Debug_Curve_::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Curve_* Debug_Curve_::New(::google::protobuf::Arena* arena) const {
  Debug_Curve_* n = new Debug_Curve_;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Curve_::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Curve_)
  ::memset(&num_, 0, reinterpret_cast<char*>(&minlimit_) -
    reinterpret_cast<char*>(&num_) + sizeof(minlimit_));
}

bool Debug_Curve_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Curve_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxLimit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float minLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Curve_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Curve_)
  return false;
#undef DO_
}

void Debug_Curve_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Curve_)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float num = 1;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->num(), output);
  }

  // float maxLimit = 2;
  if (this->maxlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxlimit(), output);
  }

  // float minLimit = 3;
  if (this->minlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minlimit(), output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Curve_)
}

::google::protobuf::uint8* Debug_Curve_::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Curve_)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float num = 1;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->num(), target);
  }

  // float maxLimit = 2;
  if (this->maxlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxlimit(), target);
  }

  // float minLimit = 3;
  if (this->minlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minlimit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Curve_)
  return target;
}

size_t Debug_Curve_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Curve_)
  size_t total_size = 0;

  // float num = 1;
  if (this->num() != 0) {
    total_size += 1 + 4;
  }

  // float maxLimit = 2;
  if (this->maxlimit() != 0) {
    total_size += 1 + 4;
  }

  // float minLimit = 3;
  if (this->minlimit() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Curve_::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Curve_)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Curve_* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Curve_>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Curve_)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Curve_)
    MergeFrom(*source);
  }
}

void Debug_Curve_::MergeFrom(const Debug_Curve_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Curve_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.maxlimit() != 0) {
    set_maxlimit(from.maxlimit());
  }
  if (from.minlimit() != 0) {
    set_minlimit(from.minlimit());
  }
}

void Debug_Curve_::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Curve_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Curve_::CopyFrom(const Debug_Curve_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Curve_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Curve_::IsInitialized() const {
  return true;
}

void Debug_Curve_::Swap(Debug_Curve_* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Curve_::InternalSwap(Debug_Curve_* other) {
  std::swap(num_, other->num_);
  std::swap(maxlimit_, other->maxlimit_);
  std::swap(minlimit_, other->minlimit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Curve_::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Curve_

// float num = 1;
void Debug_Curve_::clear_num() {
  num_ = 0;
}
float Debug_Curve_::num() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve_.num)
  return num_;
}
void Debug_Curve_::set_num(float value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Curve_.num)
}

// float maxLimit = 2;
void Debug_Curve_::clear_maxlimit() {
  maxlimit_ = 0;
}
float Debug_Curve_::maxlimit() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve_.maxLimit)
  return maxlimit_;
}
void Debug_Curve_::set_maxlimit(float value) {
  
  maxlimit_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Curve_.maxLimit)
}

// float minLimit = 3;
void Debug_Curve_::clear_minlimit() {
  minlimit_ = 0;
}
float Debug_Curve_::minlimit() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve_.minLimit)
  return minlimit_;
}
void Debug_Curve_::set_minlimit(float value) {
  
  minlimit_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Curve_.minLimit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Curve::kStartFieldNumber;
const int Debug_Curve::kP1FieldNumber;
const int Debug_Curve::kP2FieldNumber;
const int Debug_Curve::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Curve::Debug_Curve()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Curve)
}
Debug_Curve::Debug_Curve(const Debug_Curve& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::ZSS::Protocol::Point(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_p1()) {
    p1_ = new ::ZSS::Protocol::Point(*from.p1_);
  } else {
    p1_ = NULL;
  }
  if (from.has_p2()) {
    p2_ = new ::ZSS::Protocol::Point(*from.p2_);
  } else {
    p2_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::ZSS::Protocol::Point(*from.end_);
  } else {
    end_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Curve)
}

void Debug_Curve::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

Debug_Curve::~Debug_Curve() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Curve)
  SharedDtor();
}

void Debug_Curve::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete p1_;
  }
  if (this != internal_default_instance()) {
    delete p2_;
  }
  if (this != internal_default_instance()) {
    delete end_;
  }
}

void Debug_Curve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Curve::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Curve& Debug_Curve::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Curve* Debug_Curve::New(::google::protobuf::Arena* arena) const {
  Debug_Curve* n = new Debug_Curve;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Curve::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Curve)
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && p1_ != NULL) {
    delete p1_;
  }
  p1_ = NULL;
  if (GetArenaNoVirtual() == NULL && p2_ != NULL) {
    delete p2_;
  }
  p2_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
}

bool Debug_Curve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Curve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZSS.Protocol.Point start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Point p1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Point p2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Point end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Curve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Curve)
  return false;
#undef DO_
}

void Debug_Curve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Curve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_, output);
  }

  // .ZSS.Protocol.Point p1 = 2;
  if (this->has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->p1_, output);
  }

  // .ZSS.Protocol.Point p2 = 3;
  if (this->has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->p2_, output);
  }

  // .ZSS.Protocol.Point end = 4;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->end_, output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Curve)
}

::google::protobuf::uint8* Debug_Curve::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Curve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Point start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_, deterministic, target);
  }

  // .ZSS.Protocol.Point p1 = 2;
  if (this->has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->p1_, deterministic, target);
  }

  // .ZSS.Protocol.Point p2 = 3;
  if (this->has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->p2_, deterministic, target);
  }

  // .ZSS.Protocol.Point end = 4;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->end_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Curve)
  return target;
}

size_t Debug_Curve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Curve)
  size_t total_size = 0;

  // .ZSS.Protocol.Point start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  // .ZSS.Protocol.Point p1 = 2;
  if (this->has_p1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p1_);
  }

  // .ZSS.Protocol.Point p2 = 3;
  if (this->has_p2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p2_);
  }

  // .ZSS.Protocol.Point end = 4;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Curve::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Curve)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Curve* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Curve>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Curve)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Curve)
    MergeFrom(*source);
  }
}

void Debug_Curve::MergeFrom(const Debug_Curve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Curve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::ZSS::Protocol::Point::MergeFrom(from.start());
  }
  if (from.has_p1()) {
    mutable_p1()->::ZSS::Protocol::Point::MergeFrom(from.p1());
  }
  if (from.has_p2()) {
    mutable_p2()->::ZSS::Protocol::Point::MergeFrom(from.p2());
  }
  if (from.has_end()) {
    mutable_end()->::ZSS::Protocol::Point::MergeFrom(from.end());
  }
}

void Debug_Curve::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Curve::CopyFrom(const Debug_Curve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Curve::IsInitialized() const {
  return true;
}

void Debug_Curve::Swap(Debug_Curve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Curve::InternalSwap(Debug_Curve* other) {
  std::swap(start_, other->start_);
  std::swap(p1_, other->p1_);
  std::swap(p2_, other->p2_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Curve::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Curve

// .ZSS.Protocol.Point start = 1;
bool Debug_Curve::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
void Debug_Curve::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
const ::ZSS::Protocol::Point& Debug_Curve::start() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve.start)
  return start_ != NULL ? *start_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Debug_Curve::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Curve.start)
  return start_;
}
::ZSS::Protocol::Point* Debug_Curve::release_start() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Curve.start)
  
  ::ZSS::Protocol::Point* temp = start_;
  start_ = NULL;
  return temp;
}
void Debug_Curve::set_allocated_start(::ZSS::Protocol::Point* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Curve.start)
}

// .ZSS.Protocol.Point p1 = 2;
bool Debug_Curve::has_p1() const {
  return this != internal_default_instance() && p1_ != NULL;
}
void Debug_Curve::clear_p1() {
  if (GetArenaNoVirtual() == NULL && p1_ != NULL) delete p1_;
  p1_ = NULL;
}
const ::ZSS::Protocol::Point& Debug_Curve::p1() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve.p1)
  return p1_ != NULL ? *p1_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Debug_Curve::mutable_p1() {
  
  if (p1_ == NULL) {
    p1_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Curve.p1)
  return p1_;
}
::ZSS::Protocol::Point* Debug_Curve::release_p1() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Curve.p1)
  
  ::ZSS::Protocol::Point* temp = p1_;
  p1_ = NULL;
  return temp;
}
void Debug_Curve::set_allocated_p1(::ZSS::Protocol::Point* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Curve.p1)
}

// .ZSS.Protocol.Point p2 = 3;
bool Debug_Curve::has_p2() const {
  return this != internal_default_instance() && p2_ != NULL;
}
void Debug_Curve::clear_p2() {
  if (GetArenaNoVirtual() == NULL && p2_ != NULL) delete p2_;
  p2_ = NULL;
}
const ::ZSS::Protocol::Point& Debug_Curve::p2() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve.p2)
  return p2_ != NULL ? *p2_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Debug_Curve::mutable_p2() {
  
  if (p2_ == NULL) {
    p2_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Curve.p2)
  return p2_;
}
::ZSS::Protocol::Point* Debug_Curve::release_p2() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Curve.p2)
  
  ::ZSS::Protocol::Point* temp = p2_;
  p2_ = NULL;
  return temp;
}
void Debug_Curve::set_allocated_p2(::ZSS::Protocol::Point* p2) {
  delete p2_;
  p2_ = p2;
  if (p2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Curve.p2)
}

// .ZSS.Protocol.Point end = 4;
bool Debug_Curve::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
void Debug_Curve::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
const ::ZSS::Protocol::Point& Debug_Curve::end() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve.end)
  return end_ != NULL ? *end_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
::ZSS::Protocol::Point* Debug_Curve::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Curve.end)
  return end_;
}
::ZSS::Protocol::Point* Debug_Curve::release_end() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Curve.end)
  
  ::ZSS::Protocol::Point* temp = end_;
  end_ = NULL;
  return temp;
}
void Debug_Curve::set_allocated_end(::ZSS::Protocol::Point* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Curve.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Msg::kTypeFieldNumber;
const int Debug_Msg::kColorFieldNumber;
const int Debug_Msg::kArcFieldNumber;
const int Debug_Msg::kLineFieldNumber;
const int Debug_Msg::kTextFieldNumber;
const int Debug_Msg::kRobotFieldNumber;
const int Debug_Msg::kCurveFieldNumber;
const int Debug_Msg::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Msg::Debug_Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Msg)
}
Debug_Msg::Debug_Msg(const Debug_Msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_arc()) {
    arc_ = new ::ZSS::Protocol::Debug_Arc(*from.arc_);
  } else {
    arc_ = NULL;
  }
  if (from.has_line()) {
    line_ = new ::ZSS::Protocol::Debug_Line(*from.line_);
  } else {
    line_ = NULL;
  }
  if (from.has_text()) {
    text_ = new ::ZSS::Protocol::Debug_Text(*from.text_);
  } else {
    text_ = NULL;
  }
  if (from.has_robot()) {
    robot_ = new ::ZSS::Protocol::Debug_Robot(*from.robot_);
  } else {
    robot_ = NULL;
  }
  if (from.has_curve()) {
    curve_ = new ::ZSS::Protocol::Debug_Curve_(*from.curve_);
  } else {
    curve_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::ZSS::Protocol::Debug_Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Msg)
}

void Debug_Msg::SharedCtor() {
  ::memset(&arc_, 0, reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&arc_) + sizeof(color_));
  _cached_size_ = 0;
}

Debug_Msg::~Debug_Msg() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Msg)
  SharedDtor();
}

void Debug_Msg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete arc_;
  }
  if (this != internal_default_instance()) {
    delete line_;
  }
  if (this != internal_default_instance()) {
    delete text_;
  }
  if (this != internal_default_instance()) {
    delete robot_;
  }
  if (this != internal_default_instance()) {
    delete curve_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void Debug_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Msg::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Msg& Debug_Msg::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Msg* Debug_Msg::New(::google::protobuf::Arena* arena) const {
  Debug_Msg* n = new Debug_Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Msg)
  if (GetArenaNoVirtual() == NULL && arc_ != NULL) {
    delete arc_;
  }
  arc_ = NULL;
  if (GetArenaNoVirtual() == NULL && line_ != NULL) {
    delete line_;
  }
  line_ = NULL;
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
  if (GetArenaNoVirtual() == NULL && robot_ != NULL) {
    delete robot_;
  }
  robot_ = NULL;
  if (GetArenaNoVirtual() == NULL && curve_ != NULL) {
    delete curve_;
  }
  curve_ = NULL;
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) {
    delete polygon_;
  }
  polygon_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_) + sizeof(color_));
}

bool Debug_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ZSS::Protocol::Debug_Msg_Debug_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Debug_Msg.Color color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::ZSS::Protocol::Debug_Msg_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Debug_Arc arc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Debug_Line line = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Debug_Text text = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Debug_Robot robot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Debug_Curve_ curve = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZSS.Protocol.Debug_Polygon polygon = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Msg)
  return false;
#undef DO_
}

void Debug_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .ZSS.Protocol.Debug_Msg.Color color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // .ZSS.Protocol.Debug_Arc arc = 3;
  if (this->has_arc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->arc_, output);
  }

  // .ZSS.Protocol.Debug_Line line = 4;
  if (this->has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->line_, output);
  }

  // .ZSS.Protocol.Debug_Text text = 5;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->text_, output);
  }

  // .ZSS.Protocol.Debug_Robot robot = 6;
  if (this->has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->robot_, output);
  }

  // .ZSS.Protocol.Debug_Curve_ curve = 7;
  if (this->has_curve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->curve_, output);
  }

  // .ZSS.Protocol.Debug_Polygon polygon = 8;
  if (this->has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->polygon_, output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Msg)
}

::google::protobuf::uint8* Debug_Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .ZSS.Protocol.Debug_Msg.Color color = 2;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // .ZSS.Protocol.Debug_Arc arc = 3;
  if (this->has_arc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->arc_, deterministic, target);
  }

  // .ZSS.Protocol.Debug_Line line = 4;
  if (this->has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->line_, deterministic, target);
  }

  // .ZSS.Protocol.Debug_Text text = 5;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->text_, deterministic, target);
  }

  // .ZSS.Protocol.Debug_Robot robot = 6;
  if (this->has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->robot_, deterministic, target);
  }

  // .ZSS.Protocol.Debug_Curve_ curve = 7;
  if (this->has_curve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->curve_, deterministic, target);
  }

  // .ZSS.Protocol.Debug_Polygon polygon = 8;
  if (this->has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->polygon_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Msg)
  return target;
}

size_t Debug_Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Msg)
  size_t total_size = 0;

  // .ZSS.Protocol.Debug_Arc arc = 3;
  if (this->has_arc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->arc_);
  }

  // .ZSS.Protocol.Debug_Line line = 4;
  if (this->has_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->line_);
  }

  // .ZSS.Protocol.Debug_Text text = 5;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  // .ZSS.Protocol.Debug_Robot robot = 6;
  if (this->has_robot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->robot_);
  }

  // .ZSS.Protocol.Debug_Curve_ curve = 7;
  if (this->has_curve()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->curve_);
  }

  // .ZSS.Protocol.Debug_Polygon polygon = 8;
  if (this->has_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->polygon_);
  }

  // .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .ZSS.Protocol.Debug_Msg.Color color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Msg)
    MergeFrom(*source);
  }
}

void Debug_Msg::MergeFrom(const Debug_Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_arc()) {
    mutable_arc()->::ZSS::Protocol::Debug_Arc::MergeFrom(from.arc());
  }
  if (from.has_line()) {
    mutable_line()->::ZSS::Protocol::Debug_Line::MergeFrom(from.line());
  }
  if (from.has_text()) {
    mutable_text()->::ZSS::Protocol::Debug_Text::MergeFrom(from.text());
  }
  if (from.has_robot()) {
    mutable_robot()->::ZSS::Protocol::Debug_Robot::MergeFrom(from.robot());
  }
  if (from.has_curve()) {
    mutable_curve()->::ZSS::Protocol::Debug_Curve_::MergeFrom(from.curve());
  }
  if (from.has_polygon()) {
    mutable_polygon()->::ZSS::Protocol::Debug_Polygon::MergeFrom(from.polygon());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void Debug_Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Msg::CopyFrom(const Debug_Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Msg::IsInitialized() const {
  return true;
}

void Debug_Msg::Swap(Debug_Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Msg::InternalSwap(Debug_Msg* other) {
  std::swap(arc_, other->arc_);
  std::swap(line_, other->line_);
  std::swap(text_, other->text_);
  std::swap(robot_, other->robot_);
  std::swap(curve_, other->curve_);
  std::swap(polygon_, other->polygon_);
  std::swap(type_, other->type_);
  std::swap(color_, other->color_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Msg::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Msg

// .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
void Debug_Msg::clear_type() {
  type_ = 0;
}
::ZSS::Protocol::Debug_Msg_Debug_Type Debug_Msg::type() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.type)
  return static_cast< ::ZSS::Protocol::Debug_Msg_Debug_Type >(type_);
}
void Debug_Msg::set_type(::ZSS::Protocol::Debug_Msg_Debug_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Msg.type)
}

// .ZSS.Protocol.Debug_Msg.Color color = 2;
void Debug_Msg::clear_color() {
  color_ = 0;
}
::ZSS::Protocol::Debug_Msg_Color Debug_Msg::color() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.color)
  return static_cast< ::ZSS::Protocol::Debug_Msg_Color >(color_);
}
void Debug_Msg::set_color(::ZSS::Protocol::Debug_Msg_Color value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Msg.color)
}

// .ZSS.Protocol.Debug_Arc arc = 3;
bool Debug_Msg::has_arc() const {
  return this != internal_default_instance() && arc_ != NULL;
}
void Debug_Msg::clear_arc() {
  if (GetArenaNoVirtual() == NULL && arc_ != NULL) delete arc_;
  arc_ = NULL;
}
const ::ZSS::Protocol::Debug_Arc& Debug_Msg::arc() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.arc)
  return arc_ != NULL ? *arc_
                         : *::ZSS::Protocol::Debug_Arc::internal_default_instance();
}
::ZSS::Protocol::Debug_Arc* Debug_Msg::mutable_arc() {
  
  if (arc_ == NULL) {
    arc_ = new ::ZSS::Protocol::Debug_Arc;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.arc)
  return arc_;
}
::ZSS::Protocol::Debug_Arc* Debug_Msg::release_arc() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.arc)
  
  ::ZSS::Protocol::Debug_Arc* temp = arc_;
  arc_ = NULL;
  return temp;
}
void Debug_Msg::set_allocated_arc(::ZSS::Protocol::Debug_Arc* arc) {
  delete arc_;
  arc_ = arc;
  if (arc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.arc)
}

// .ZSS.Protocol.Debug_Line line = 4;
bool Debug_Msg::has_line() const {
  return this != internal_default_instance() && line_ != NULL;
}
void Debug_Msg::clear_line() {
  if (GetArenaNoVirtual() == NULL && line_ != NULL) delete line_;
  line_ = NULL;
}
const ::ZSS::Protocol::Debug_Line& Debug_Msg::line() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.line)
  return line_ != NULL ? *line_
                         : *::ZSS::Protocol::Debug_Line::internal_default_instance();
}
::ZSS::Protocol::Debug_Line* Debug_Msg::mutable_line() {
  
  if (line_ == NULL) {
    line_ = new ::ZSS::Protocol::Debug_Line;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.line)
  return line_;
}
::ZSS::Protocol::Debug_Line* Debug_Msg::release_line() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.line)
  
  ::ZSS::Protocol::Debug_Line* temp = line_;
  line_ = NULL;
  return temp;
}
void Debug_Msg::set_allocated_line(::ZSS::Protocol::Debug_Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.line)
}

// .ZSS.Protocol.Debug_Text text = 5;
bool Debug_Msg::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
void Debug_Msg::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
const ::ZSS::Protocol::Debug_Text& Debug_Msg::text() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.text)
  return text_ != NULL ? *text_
                         : *::ZSS::Protocol::Debug_Text::internal_default_instance();
}
::ZSS::Protocol::Debug_Text* Debug_Msg::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::ZSS::Protocol::Debug_Text;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.text)
  return text_;
}
::ZSS::Protocol::Debug_Text* Debug_Msg::release_text() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.text)
  
  ::ZSS::Protocol::Debug_Text* temp = text_;
  text_ = NULL;
  return temp;
}
void Debug_Msg::set_allocated_text(::ZSS::Protocol::Debug_Text* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.text)
}

// .ZSS.Protocol.Debug_Robot robot = 6;
bool Debug_Msg::has_robot() const {
  return this != internal_default_instance() && robot_ != NULL;
}
void Debug_Msg::clear_robot() {
  if (GetArenaNoVirtual() == NULL && robot_ != NULL) delete robot_;
  robot_ = NULL;
}
const ::ZSS::Protocol::Debug_Robot& Debug_Msg::robot() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.robot)
  return robot_ != NULL ? *robot_
                         : *::ZSS::Protocol::Debug_Robot::internal_default_instance();
}
::ZSS::Protocol::Debug_Robot* Debug_Msg::mutable_robot() {
  
  if (robot_ == NULL) {
    robot_ = new ::ZSS::Protocol::Debug_Robot;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.robot)
  return robot_;
}
::ZSS::Protocol::Debug_Robot* Debug_Msg::release_robot() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.robot)
  
  ::ZSS::Protocol::Debug_Robot* temp = robot_;
  robot_ = NULL;
  return temp;
}
void Debug_Msg::set_allocated_robot(::ZSS::Protocol::Debug_Robot* robot) {
  delete robot_;
  robot_ = robot;
  if (robot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.robot)
}

// .ZSS.Protocol.Debug_Curve_ curve = 7;
bool Debug_Msg::has_curve() const {
  return this != internal_default_instance() && curve_ != NULL;
}
void Debug_Msg::clear_curve() {
  if (GetArenaNoVirtual() == NULL && curve_ != NULL) delete curve_;
  curve_ = NULL;
}
const ::ZSS::Protocol::Debug_Curve_& Debug_Msg::curve() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.curve)
  return curve_ != NULL ? *curve_
                         : *::ZSS::Protocol::Debug_Curve_::internal_default_instance();
}
::ZSS::Protocol::Debug_Curve_* Debug_Msg::mutable_curve() {
  
  if (curve_ == NULL) {
    curve_ = new ::ZSS::Protocol::Debug_Curve_;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.curve)
  return curve_;
}
::ZSS::Protocol::Debug_Curve_* Debug_Msg::release_curve() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.curve)
  
  ::ZSS::Protocol::Debug_Curve_* temp = curve_;
  curve_ = NULL;
  return temp;
}
void Debug_Msg::set_allocated_curve(::ZSS::Protocol::Debug_Curve_* curve) {
  delete curve_;
  curve_ = curve;
  if (curve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.curve)
}

// .ZSS.Protocol.Debug_Polygon polygon = 8;
bool Debug_Msg::has_polygon() const {
  return this != internal_default_instance() && polygon_ != NULL;
}
void Debug_Msg::clear_polygon() {
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) delete polygon_;
  polygon_ = NULL;
}
const ::ZSS::Protocol::Debug_Polygon& Debug_Msg::polygon() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::ZSS::Protocol::Debug_Polygon::internal_default_instance();
}
::ZSS::Protocol::Debug_Polygon* Debug_Msg::mutable_polygon() {
  
  if (polygon_ == NULL) {
    polygon_ = new ::ZSS::Protocol::Debug_Polygon;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.polygon)
  return polygon_;
}
::ZSS::Protocol::Debug_Polygon* Debug_Msg::release_polygon() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.polygon)
  
  ::ZSS::Protocol::Debug_Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Debug_Msg::set_allocated_polygon(::ZSS::Protocol::Debug_Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.polygon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Msgs::kMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Msgs::Debug_Msgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fdebug_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Debug_Msgs)
}
Debug_Msgs::Debug_Msgs(const Debug_Msgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      msgs_(from.msgs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Debug_Msgs)
}

void Debug_Msgs::SharedCtor() {
  _cached_size_ = 0;
}

Debug_Msgs::~Debug_Msgs() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Debug_Msgs)
  SharedDtor();
}

void Debug_Msgs::SharedDtor() {
}

void Debug_Msgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Msgs::descriptor() {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Msgs& Debug_Msgs::default_instance() {
  protobuf_zss_5fdebug_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_Msgs* Debug_Msgs::New(::google::protobuf::Arena* arena) const {
  Debug_Msgs* n = new Debug_Msgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Msgs::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Debug_Msgs)
  msgs_.Clear();
}

bool Debug_Msgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Debug_Msgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Debug_Msgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Debug_Msgs)
  return false;
#undef DO_
}

void Debug_Msgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Debug_Msgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Debug_Msgs)
}

::google::protobuf::uint8* Debug_Msgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Debug_Msgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->msgs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Debug_Msgs)
  return target;
}

size_t Debug_Msgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Debug_Msgs)
  size_t total_size = 0;

  // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
  {
    unsigned int count = this->msgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Msgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Debug_Msgs)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Msgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Msgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Debug_Msgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Debug_Msgs)
    MergeFrom(*source);
  }
}

void Debug_Msgs::MergeFrom(const Debug_Msgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Debug_Msgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
}

void Debug_Msgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Debug_Msgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Msgs::CopyFrom(const Debug_Msgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Debug_Msgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Msgs::IsInitialized() const {
  return true;
}

void Debug_Msgs::Swap(Debug_Msgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Msgs::InternalSwap(Debug_Msgs* other) {
  msgs_.InternalSwap(&other->msgs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Msgs::GetMetadata() const {
  protobuf_zss_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Msgs

// repeated .ZSS.Protocol.Debug_Msg msgs = 1;
int Debug_Msgs::msgs_size() const {
  return msgs_.size();
}
void Debug_Msgs::clear_msgs() {
  msgs_.Clear();
}
const ::ZSS::Protocol::Debug_Msg& Debug_Msgs::msgs(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msgs.msgs)
  return msgs_.Get(index);
}
::ZSS::Protocol::Debug_Msg* Debug_Msgs::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msgs.msgs)
  return msgs_.Mutable(index);
}
::ZSS::Protocol::Debug_Msg* Debug_Msgs::add_msgs() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Debug_Msgs.msgs)
  return msgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msg >*
Debug_Msgs::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Debug_Msgs.msgs)
  return &msgs_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msg >&
Debug_Msgs::msgs() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Debug_Msgs.msgs)
  return msgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)
