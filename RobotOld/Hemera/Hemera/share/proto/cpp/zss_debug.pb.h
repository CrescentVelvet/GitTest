// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_debug.proto

#ifndef PROTOBUF_zss_5fdebug_2eproto__INCLUDED
#define PROTOBUF_zss_5fdebug_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ZSS {
namespace Protocol {
class Debug_Arc;
class Debug_ArcDefaultTypeInternal;
extern Debug_ArcDefaultTypeInternal _Debug_Arc_default_instance_;
class Debug_Curve;
class Debug_CurveDefaultTypeInternal;
extern Debug_CurveDefaultTypeInternal _Debug_Curve_default_instance_;
class Debug_Curve_;
class Debug_Curve_DefaultTypeInternal;
extern Debug_Curve_DefaultTypeInternal _Debug_Curve__default_instance_;
class Debug_Line;
class Debug_LineDefaultTypeInternal;
extern Debug_LineDefaultTypeInternal _Debug_Line_default_instance_;
class Debug_Msg;
class Debug_MsgDefaultTypeInternal;
extern Debug_MsgDefaultTypeInternal _Debug_Msg_default_instance_;
class Debug_Msgs;
class Debug_MsgsDefaultTypeInternal;
extern Debug_MsgsDefaultTypeInternal _Debug_Msgs_default_instance_;
class Debug_Polygon;
class Debug_PolygonDefaultTypeInternal;
extern Debug_PolygonDefaultTypeInternal _Debug_Polygon_default_instance_;
class Debug_Robot;
class Debug_RobotDefaultTypeInternal;
extern Debug_RobotDefaultTypeInternal _Debug_Robot_default_instance_;
class Debug_Text;
class Debug_TextDefaultTypeInternal;
extern Debug_TextDefaultTypeInternal _Debug_Text_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
}  // namespace Protocol
}  // namespace ZSS

namespace ZSS {
namespace Protocol {

namespace protobuf_zss_5fdebug_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_zss_5fdebug_2eproto

enum Debug_Msg_Debug_Type {
  Debug_Msg_Debug_Type_ARC = 0,
  Debug_Msg_Debug_Type_LINE = 1,
  Debug_Msg_Debug_Type_TEXT = 2,
  Debug_Msg_Debug_Type_ROBOT = 3,
  Debug_Msg_Debug_Type_CURVE = 4,
  Debug_Msg_Debug_Type_POLYGON = 5,
  Debug_Msg_Debug_Type_Debug_Msg_Debug_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Debug_Msg_Debug_Type_Debug_Msg_Debug_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Debug_Msg_Debug_Type_IsValid(int value);
const Debug_Msg_Debug_Type Debug_Msg_Debug_Type_Debug_Type_MIN = Debug_Msg_Debug_Type_ARC;
const Debug_Msg_Debug_Type Debug_Msg_Debug_Type_Debug_Type_MAX = Debug_Msg_Debug_Type_POLYGON;
const int Debug_Msg_Debug_Type_Debug_Type_ARRAYSIZE = Debug_Msg_Debug_Type_Debug_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Debug_Msg_Debug_Type_descriptor();
inline const ::std::string& Debug_Msg_Debug_Type_Name(Debug_Msg_Debug_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Debug_Msg_Debug_Type_descriptor(), value);
}
inline bool Debug_Msg_Debug_Type_Parse(
    const ::std::string& name, Debug_Msg_Debug_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Debug_Msg_Debug_Type>(
    Debug_Msg_Debug_Type_descriptor(), name, value);
}
enum Debug_Msg_Color {
  Debug_Msg_Color_WHITE = 0,
  Debug_Msg_Color_RED = 1,
  Debug_Msg_Color_ORANGE = 2,
  Debug_Msg_Color_YELLOW = 3,
  Debug_Msg_Color_GREEN = 4,
  Debug_Msg_Color_CYAN = 5,
  Debug_Msg_Color_BLUE = 6,
  Debug_Msg_Color_PURPLE = 7,
  Debug_Msg_Color_GRAY = 8,
  Debug_Msg_Color_BLACK = 9,
  Debug_Msg_Color_Debug_Msg_Color_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Debug_Msg_Color_Debug_Msg_Color_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Debug_Msg_Color_IsValid(int value);
const Debug_Msg_Color Debug_Msg_Color_Color_MIN = Debug_Msg_Color_WHITE;
const Debug_Msg_Color Debug_Msg_Color_Color_MAX = Debug_Msg_Color_BLACK;
const int Debug_Msg_Color_Color_ARRAYSIZE = Debug_Msg_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* Debug_Msg_Color_descriptor();
inline const ::std::string& Debug_Msg_Color_Name(Debug_Msg_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    Debug_Msg_Color_descriptor(), value);
}
inline bool Debug_Msg_Color_Parse(
    const ::std::string& name, Debug_Msg_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Debug_Msg_Color>(
    Debug_Msg_Color_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rectangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();

  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Rectangle* other);

  // implements Message ----------------------------------------------

  inline Rectangle* New() const PROTOBUF_FINAL { return New(NULL); }

  Rectangle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rectangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ZSS.Protocol.Point point1 = 1;
  bool has_point1() const;
  void clear_point1();
  static const int kPoint1FieldNumber = 1;
  const ::ZSS::Protocol::Point& point1() const;
  ::ZSS::Protocol::Point* mutable_point1();
  ::ZSS::Protocol::Point* release_point1();
  void set_allocated_point1(::ZSS::Protocol::Point* point1);

  // .ZSS.Protocol.Point point2 = 2;
  bool has_point2() const;
  void clear_point2();
  static const int kPoint2FieldNumber = 2;
  const ::ZSS::Protocol::Point& point2() const;
  ::ZSS::Protocol::Point* mutable_point2();
  ::ZSS::Protocol::Point* release_point2();
  void set_allocated_point2(::ZSS::Protocol::Point* point2);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Rectangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZSS::Protocol::Point* point1_;
  ::ZSS::Protocol::Point* point2_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Robot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Robot) */ {
 public:
  Debug_Robot();
  virtual ~Debug_Robot();

  Debug_Robot(const Debug_Robot& from);

  inline Debug_Robot& operator=(const Debug_Robot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Robot& default_instance();

  static inline const Debug_Robot* internal_default_instance() {
    return reinterpret_cast<const Debug_Robot*>(
               &_Debug_Robot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Debug_Robot* other);

  // implements Message ----------------------------------------------

  inline Debug_Robot* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Robot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Robot& from);
  void MergeFrom(const Debug_Robot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Robot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ZSS.Protocol.Point pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::ZSS::Protocol::Point& pos() const;
  ::ZSS::Protocol::Point* mutable_pos();
  ::ZSS::Protocol::Point* release_pos();
  void set_allocated_pos(::ZSS::Protocol::Point* pos);

  // float dir = 2;
  void clear_dir();
  static const int kDirFieldNumber = 2;
  float dir() const;
  void set_dir(float value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Robot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZSS::Protocol::Point* pos_;
  float dir_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Line : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Line) */ {
 public:
  Debug_Line();
  virtual ~Debug_Line();

  Debug_Line(const Debug_Line& from);

  inline Debug_Line& operator=(const Debug_Line& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Line& default_instance();

  static inline const Debug_Line* internal_default_instance() {
    return reinterpret_cast<const Debug_Line*>(
               &_Debug_Line_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Debug_Line* other);

  // implements Message ----------------------------------------------

  inline Debug_Line* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Line* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Line& from);
  void MergeFrom(const Debug_Line& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ZSS.Protocol.Point start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::ZSS::Protocol::Point& start() const;
  ::ZSS::Protocol::Point* mutable_start();
  ::ZSS::Protocol::Point* release_start();
  void set_allocated_start(::ZSS::Protocol::Point* start);

  // .ZSS.Protocol.Point end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::ZSS::Protocol::Point& end() const;
  ::ZSS::Protocol::Point* mutable_end();
  ::ZSS::Protocol::Point* release_end();
  void set_allocated_end(::ZSS::Protocol::Point* end);

  // bool FORWARD = 3;
  void clear_forward();
  static const int kFORWARDFieldNumber = 3;
  bool forward() const;
  void set_forward(bool value);

  // bool BACK = 4;
  void clear_back();
  static const int kBACKFieldNumber = 4;
  bool back() const;
  void set_back(bool value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Line)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZSS::Protocol::Point* start_;
  ::ZSS::Protocol::Point* end_;
  bool forward_;
  bool back_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Arc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Arc) */ {
 public:
  Debug_Arc();
  virtual ~Debug_Arc();

  Debug_Arc(const Debug_Arc& from);

  inline Debug_Arc& operator=(const Debug_Arc& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Arc& default_instance();

  static inline const Debug_Arc* internal_default_instance() {
    return reinterpret_cast<const Debug_Arc*>(
               &_Debug_Arc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Debug_Arc* other);

  // implements Message ----------------------------------------------

  inline Debug_Arc* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Arc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Arc& from);
  void MergeFrom(const Debug_Arc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Arc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ZSS.Protocol.Rectangle rectangle = 1;
  bool has_rectangle() const;
  void clear_rectangle();
  static const int kRectangleFieldNumber = 1;
  const ::ZSS::Protocol::Rectangle& rectangle() const;
  ::ZSS::Protocol::Rectangle* mutable_rectangle();
  ::ZSS::Protocol::Rectangle* release_rectangle();
  void set_allocated_rectangle(::ZSS::Protocol::Rectangle* rectangle);

  // float start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  float start() const;
  void set_start(float value);

  // float end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  float end() const;
  void set_end(float value);

  // bool FILL = 4;
  void clear_fill();
  static const int kFILLFieldNumber = 4;
  bool fill() const;
  void set_fill(bool value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Arc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZSS::Protocol::Rectangle* rectangle_;
  float start_;
  float end_;
  bool fill_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Polygon) */ {
 public:
  Debug_Polygon();
  virtual ~Debug_Polygon();

  Debug_Polygon(const Debug_Polygon& from);

  inline Debug_Polygon& operator=(const Debug_Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Polygon& default_instance();

  static inline const Debug_Polygon* internal_default_instance() {
    return reinterpret_cast<const Debug_Polygon*>(
               &_Debug_Polygon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Debug_Polygon* other);

  // implements Message ----------------------------------------------

  inline Debug_Polygon* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Polygon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Polygon& from);
  void MergeFrom(const Debug_Polygon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZSS.Protocol.Point vertex = 1;
  int vertex_size() const;
  void clear_vertex();
  static const int kVertexFieldNumber = 1;
  const ::ZSS::Protocol::Point& vertex(int index) const;
  ::ZSS::Protocol::Point* mutable_vertex(int index);
  ::ZSS::Protocol::Point* add_vertex();
  ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Point >*
      mutable_vertex();
  const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Point >&
      vertex() const;

  // bool FILL = 2;
  void clear_fill();
  static const int kFILLFieldNumber = 2;
  bool fill() const;
  void set_fill(bool value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Point > vertex_;
  bool fill_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Text : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Text) */ {
 public:
  Debug_Text();
  virtual ~Debug_Text();

  Debug_Text(const Debug_Text& from);

  inline Debug_Text& operator=(const Debug_Text& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Text& default_instance();

  static inline const Debug_Text* internal_default_instance() {
    return reinterpret_cast<const Debug_Text*>(
               &_Debug_Text_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Debug_Text* other);

  // implements Message ----------------------------------------------

  inline Debug_Text* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Text* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Text& from);
  void MergeFrom(const Debug_Text& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Text* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .ZSS.Protocol.Point pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::ZSS::Protocol::Point& pos() const;
  ::ZSS::Protocol::Point* mutable_pos();
  ::ZSS::Protocol::Point* release_pos();
  void set_allocated_pos(::ZSS::Protocol::Point* pos);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Text)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::ZSS::Protocol::Point* pos_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Curve_ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Curve_) */ {
 public:
  Debug_Curve_();
  virtual ~Debug_Curve_();

  Debug_Curve_(const Debug_Curve_& from);

  inline Debug_Curve_& operator=(const Debug_Curve_& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Curve_& default_instance();

  static inline const Debug_Curve_* internal_default_instance() {
    return reinterpret_cast<const Debug_Curve_*>(
               &_Debug_Curve__default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Debug_Curve_* other);

  // implements Message ----------------------------------------------

  inline Debug_Curve_* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Curve_* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Curve_& from);
  void MergeFrom(const Debug_Curve_& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Curve_* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  float num() const;
  void set_num(float value);

  // float maxLimit = 2;
  void clear_maxlimit();
  static const int kMaxLimitFieldNumber = 2;
  float maxlimit() const;
  void set_maxlimit(float value);

  // float minLimit = 3;
  void clear_minlimit();
  static const int kMinLimitFieldNumber = 3;
  float minlimit() const;
  void set_minlimit(float value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Curve_)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float num_;
  float maxlimit_;
  float minlimit_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Curve : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Curve) */ {
 public:
  Debug_Curve();
  virtual ~Debug_Curve();

  Debug_Curve(const Debug_Curve& from);

  inline Debug_Curve& operator=(const Debug_Curve& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Curve& default_instance();

  static inline const Debug_Curve* internal_default_instance() {
    return reinterpret_cast<const Debug_Curve*>(
               &_Debug_Curve_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Debug_Curve* other);

  // implements Message ----------------------------------------------

  inline Debug_Curve* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Curve* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Curve& from);
  void MergeFrom(const Debug_Curve& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Curve* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ZSS.Protocol.Point start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::ZSS::Protocol::Point& start() const;
  ::ZSS::Protocol::Point* mutable_start();
  ::ZSS::Protocol::Point* release_start();
  void set_allocated_start(::ZSS::Protocol::Point* start);

  // .ZSS.Protocol.Point p1 = 2;
  bool has_p1() const;
  void clear_p1();
  static const int kP1FieldNumber = 2;
  const ::ZSS::Protocol::Point& p1() const;
  ::ZSS::Protocol::Point* mutable_p1();
  ::ZSS::Protocol::Point* release_p1();
  void set_allocated_p1(::ZSS::Protocol::Point* p1);

  // .ZSS.Protocol.Point p2 = 3;
  bool has_p2() const;
  void clear_p2();
  static const int kP2FieldNumber = 3;
  const ::ZSS::Protocol::Point& p2() const;
  ::ZSS::Protocol::Point* mutable_p2();
  ::ZSS::Protocol::Point* release_p2();
  void set_allocated_p2(::ZSS::Protocol::Point* p2);

  // .ZSS.Protocol.Point end = 4;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 4;
  const ::ZSS::Protocol::Point& end() const;
  ::ZSS::Protocol::Point* mutable_end();
  ::ZSS::Protocol::Point* release_end();
  void set_allocated_end(::ZSS::Protocol::Point* end);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Curve)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZSS::Protocol::Point* start_;
  ::ZSS::Protocol::Point* p1_;
  ::ZSS::Protocol::Point* p2_;
  ::ZSS::Protocol::Point* end_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Msg) */ {
 public:
  Debug_Msg();
  virtual ~Debug_Msg();

  Debug_Msg(const Debug_Msg& from);

  inline Debug_Msg& operator=(const Debug_Msg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Msg& default_instance();

  static inline const Debug_Msg* internal_default_instance() {
    return reinterpret_cast<const Debug_Msg*>(
               &_Debug_Msg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Debug_Msg* other);

  // implements Message ----------------------------------------------

  inline Debug_Msg* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Msg& from);
  void MergeFrom(const Debug_Msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Debug_Msg_Debug_Type Debug_Type;
  static const Debug_Type ARC =
    Debug_Msg_Debug_Type_ARC;
  static const Debug_Type LINE =
    Debug_Msg_Debug_Type_LINE;
  static const Debug_Type TEXT =
    Debug_Msg_Debug_Type_TEXT;
  static const Debug_Type ROBOT =
    Debug_Msg_Debug_Type_ROBOT;
  static const Debug_Type CURVE =
    Debug_Msg_Debug_Type_CURVE;
  static const Debug_Type POLYGON =
    Debug_Msg_Debug_Type_POLYGON;
  static inline bool Debug_Type_IsValid(int value) {
    return Debug_Msg_Debug_Type_IsValid(value);
  }
  static const Debug_Type Debug_Type_MIN =
    Debug_Msg_Debug_Type_Debug_Type_MIN;
  static const Debug_Type Debug_Type_MAX =
    Debug_Msg_Debug_Type_Debug_Type_MAX;
  static const int Debug_Type_ARRAYSIZE =
    Debug_Msg_Debug_Type_Debug_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Debug_Type_descriptor() {
    return Debug_Msg_Debug_Type_descriptor();
  }
  static inline const ::std::string& Debug_Type_Name(Debug_Type value) {
    return Debug_Msg_Debug_Type_Name(value);
  }
  static inline bool Debug_Type_Parse(const ::std::string& name,
      Debug_Type* value) {
    return Debug_Msg_Debug_Type_Parse(name, value);
  }

  typedef Debug_Msg_Color Color;
  static const Color WHITE =
    Debug_Msg_Color_WHITE;
  static const Color RED =
    Debug_Msg_Color_RED;
  static const Color ORANGE =
    Debug_Msg_Color_ORANGE;
  static const Color YELLOW =
    Debug_Msg_Color_YELLOW;
  static const Color GREEN =
    Debug_Msg_Color_GREEN;
  static const Color CYAN =
    Debug_Msg_Color_CYAN;
  static const Color BLUE =
    Debug_Msg_Color_BLUE;
  static const Color PURPLE =
    Debug_Msg_Color_PURPLE;
  static const Color GRAY =
    Debug_Msg_Color_GRAY;
  static const Color BLACK =
    Debug_Msg_Color_BLACK;
  static inline bool Color_IsValid(int value) {
    return Debug_Msg_Color_IsValid(value);
  }
  static const Color Color_MIN =
    Debug_Msg_Color_Color_MIN;
  static const Color Color_MAX =
    Debug_Msg_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    Debug_Msg_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return Debug_Msg_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return Debug_Msg_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return Debug_Msg_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ZSS.Protocol.Debug_Arc arc = 3;
  bool has_arc() const;
  void clear_arc();
  static const int kArcFieldNumber = 3;
  const ::ZSS::Protocol::Debug_Arc& arc() const;
  ::ZSS::Protocol::Debug_Arc* mutable_arc();
  ::ZSS::Protocol::Debug_Arc* release_arc();
  void set_allocated_arc(::ZSS::Protocol::Debug_Arc* arc);

  // .ZSS.Protocol.Debug_Line line = 4;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 4;
  const ::ZSS::Protocol::Debug_Line& line() const;
  ::ZSS::Protocol::Debug_Line* mutable_line();
  ::ZSS::Protocol::Debug_Line* release_line();
  void set_allocated_line(::ZSS::Protocol::Debug_Line* line);

  // .ZSS.Protocol.Debug_Text text = 5;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 5;
  const ::ZSS::Protocol::Debug_Text& text() const;
  ::ZSS::Protocol::Debug_Text* mutable_text();
  ::ZSS::Protocol::Debug_Text* release_text();
  void set_allocated_text(::ZSS::Protocol::Debug_Text* text);

  // .ZSS.Protocol.Debug_Robot robot = 6;
  bool has_robot() const;
  void clear_robot();
  static const int kRobotFieldNumber = 6;
  const ::ZSS::Protocol::Debug_Robot& robot() const;
  ::ZSS::Protocol::Debug_Robot* mutable_robot();
  ::ZSS::Protocol::Debug_Robot* release_robot();
  void set_allocated_robot(::ZSS::Protocol::Debug_Robot* robot);

  // .ZSS.Protocol.Debug_Curve_ curve = 7;
  bool has_curve() const;
  void clear_curve();
  static const int kCurveFieldNumber = 7;
  const ::ZSS::Protocol::Debug_Curve_& curve() const;
  ::ZSS::Protocol::Debug_Curve_* mutable_curve();
  ::ZSS::Protocol::Debug_Curve_* release_curve();
  void set_allocated_curve(::ZSS::Protocol::Debug_Curve_* curve);

  // .ZSS.Protocol.Debug_Polygon polygon = 8;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 8;
  const ::ZSS::Protocol::Debug_Polygon& polygon() const;
  ::ZSS::Protocol::Debug_Polygon* mutable_polygon();
  ::ZSS::Protocol::Debug_Polygon* release_polygon();
  void set_allocated_polygon(::ZSS::Protocol::Debug_Polygon* polygon);

  // .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ZSS::Protocol::Debug_Msg_Debug_Type type() const;
  void set_type(::ZSS::Protocol::Debug_Msg_Debug_Type value);

  // .ZSS.Protocol.Debug_Msg.Color color = 2;
  void clear_color();
  static const int kColorFieldNumber = 2;
  ::ZSS::Protocol::Debug_Msg_Color color() const;
  void set_color(::ZSS::Protocol::Debug_Msg_Color value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZSS::Protocol::Debug_Arc* arc_;
  ::ZSS::Protocol::Debug_Line* line_;
  ::ZSS::Protocol::Debug_Text* text_;
  ::ZSS::Protocol::Debug_Robot* robot_;
  ::ZSS::Protocol::Debug_Curve_* curve_;
  ::ZSS::Protocol::Debug_Polygon* polygon_;
  int type_;
  int color_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_Msgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Debug_Msgs) */ {
 public:
  Debug_Msgs();
  virtual ~Debug_Msgs();

  Debug_Msgs(const Debug_Msgs& from);

  inline Debug_Msgs& operator=(const Debug_Msgs& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Msgs& default_instance();

  static inline const Debug_Msgs* internal_default_instance() {
    return reinterpret_cast<const Debug_Msgs*>(
               &_Debug_Msgs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Debug_Msgs* other);

  // implements Message ----------------------------------------------

  inline Debug_Msgs* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_Msgs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug_Msgs& from);
  void MergeFrom(const Debug_Msgs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug_Msgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZSS.Protocol.Debug_Msg msgs = 1;
  int msgs_size() const;
  void clear_msgs();
  static const int kMsgsFieldNumber = 1;
  const ::ZSS::Protocol::Debug_Msg& msgs(int index) const;
  ::ZSS::Protocol::Debug_Msg* mutable_msgs(int index);
  ::ZSS::Protocol::Debug_Msg* add_msgs();
  ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msg >*
      mutable_msgs();
  const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msg >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Debug_Msgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msg > msgs_;
  mutable int _cached_size_;
  friend struct protobuf_zss_5fdebug_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Point.x)
}

// float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Point.y)
}

// -------------------------------------------------------------------

// Rectangle

// .ZSS.Protocol.Point point1 = 1;
inline bool Rectangle::has_point1() const {
  return this != internal_default_instance() && point1_ != NULL;
}
inline void Rectangle::clear_point1() {
  if (GetArenaNoVirtual() == NULL && point1_ != NULL) delete point1_;
  point1_ = NULL;
}
inline const ::ZSS::Protocol::Point& Rectangle::point1() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Rectangle.point1)
  return point1_ != NULL ? *point1_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Rectangle::mutable_point1() {
  
  if (point1_ == NULL) {
    point1_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Rectangle.point1)
  return point1_;
}
inline ::ZSS::Protocol::Point* Rectangle::release_point1() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Rectangle.point1)
  
  ::ZSS::Protocol::Point* temp = point1_;
  point1_ = NULL;
  return temp;
}
inline void Rectangle::set_allocated_point1(::ZSS::Protocol::Point* point1) {
  delete point1_;
  point1_ = point1;
  if (point1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Rectangle.point1)
}

// .ZSS.Protocol.Point point2 = 2;
inline bool Rectangle::has_point2() const {
  return this != internal_default_instance() && point2_ != NULL;
}
inline void Rectangle::clear_point2() {
  if (GetArenaNoVirtual() == NULL && point2_ != NULL) delete point2_;
  point2_ = NULL;
}
inline const ::ZSS::Protocol::Point& Rectangle::point2() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Rectangle.point2)
  return point2_ != NULL ? *point2_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Rectangle::mutable_point2() {
  
  if (point2_ == NULL) {
    point2_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Rectangle.point2)
  return point2_;
}
inline ::ZSS::Protocol::Point* Rectangle::release_point2() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Rectangle.point2)
  
  ::ZSS::Protocol::Point* temp = point2_;
  point2_ = NULL;
  return temp;
}
inline void Rectangle::set_allocated_point2(::ZSS::Protocol::Point* point2) {
  delete point2_;
  point2_ = point2;
  if (point2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Rectangle.point2)
}

// -------------------------------------------------------------------

// Debug_Robot

// .ZSS.Protocol.Point pos = 1;
inline bool Debug_Robot::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void Debug_Robot::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::ZSS::Protocol::Point& Debug_Robot::pos() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Robot.pos)
  return pos_ != NULL ? *pos_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Debug_Robot::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Robot.pos)
  return pos_;
}
inline ::ZSS::Protocol::Point* Debug_Robot::release_pos() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Robot.pos)
  
  ::ZSS::Protocol::Point* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Debug_Robot::set_allocated_pos(::ZSS::Protocol::Point* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Robot.pos)
}

// float dir = 2;
inline void Debug_Robot::clear_dir() {
  dir_ = 0;
}
inline float Debug_Robot::dir() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Robot.dir)
  return dir_;
}
inline void Debug_Robot::set_dir(float value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Robot.dir)
}

// -------------------------------------------------------------------

// Debug_Line

// .ZSS.Protocol.Point start = 1;
inline bool Debug_Line::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline void Debug_Line::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
inline const ::ZSS::Protocol::Point& Debug_Line::start() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Line.start)
  return start_ != NULL ? *start_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Debug_Line::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Line.start)
  return start_;
}
inline ::ZSS::Protocol::Point* Debug_Line::release_start() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Line.start)
  
  ::ZSS::Protocol::Point* temp = start_;
  start_ = NULL;
  return temp;
}
inline void Debug_Line::set_allocated_start(::ZSS::Protocol::Point* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Line.start)
}

// .ZSS.Protocol.Point end = 2;
inline bool Debug_Line::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
inline void Debug_Line::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
inline const ::ZSS::Protocol::Point& Debug_Line::end() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Line.end)
  return end_ != NULL ? *end_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Debug_Line::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Line.end)
  return end_;
}
inline ::ZSS::Protocol::Point* Debug_Line::release_end() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Line.end)
  
  ::ZSS::Protocol::Point* temp = end_;
  end_ = NULL;
  return temp;
}
inline void Debug_Line::set_allocated_end(::ZSS::Protocol::Point* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Line.end)
}

// bool FORWARD = 3;
inline void Debug_Line::clear_forward() {
  forward_ = false;
}
inline bool Debug_Line::forward() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Line.FORWARD)
  return forward_;
}
inline void Debug_Line::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Line.FORWARD)
}

// bool BACK = 4;
inline void Debug_Line::clear_back() {
  back_ = false;
}
inline bool Debug_Line::back() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Line.BACK)
  return back_;
}
inline void Debug_Line::set_back(bool value) {
  
  back_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Line.BACK)
}

// -------------------------------------------------------------------

// Debug_Arc

// .ZSS.Protocol.Rectangle rectangle = 1;
inline bool Debug_Arc::has_rectangle() const {
  return this != internal_default_instance() && rectangle_ != NULL;
}
inline void Debug_Arc::clear_rectangle() {
  if (GetArenaNoVirtual() == NULL && rectangle_ != NULL) delete rectangle_;
  rectangle_ = NULL;
}
inline const ::ZSS::Protocol::Rectangle& Debug_Arc::rectangle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Arc.rectangle)
  return rectangle_ != NULL ? *rectangle_
                         : *::ZSS::Protocol::Rectangle::internal_default_instance();
}
inline ::ZSS::Protocol::Rectangle* Debug_Arc::mutable_rectangle() {
  
  if (rectangle_ == NULL) {
    rectangle_ = new ::ZSS::Protocol::Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Arc.rectangle)
  return rectangle_;
}
inline ::ZSS::Protocol::Rectangle* Debug_Arc::release_rectangle() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Arc.rectangle)
  
  ::ZSS::Protocol::Rectangle* temp = rectangle_;
  rectangle_ = NULL;
  return temp;
}
inline void Debug_Arc::set_allocated_rectangle(::ZSS::Protocol::Rectangle* rectangle) {
  delete rectangle_;
  rectangle_ = rectangle;
  if (rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Arc.rectangle)
}

// float start = 2;
inline void Debug_Arc::clear_start() {
  start_ = 0;
}
inline float Debug_Arc::start() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Arc.start)
  return start_;
}
inline void Debug_Arc::set_start(float value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Arc.start)
}

// float end = 3;
inline void Debug_Arc::clear_end() {
  end_ = 0;
}
inline float Debug_Arc::end() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Arc.end)
  return end_;
}
inline void Debug_Arc::set_end(float value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Arc.end)
}

// bool FILL = 4;
inline void Debug_Arc::clear_fill() {
  fill_ = false;
}
inline bool Debug_Arc::fill() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Arc.FILL)
  return fill_;
}
inline void Debug_Arc::set_fill(bool value) {
  
  fill_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Arc.FILL)
}

// -------------------------------------------------------------------

// Debug_Polygon

// repeated .ZSS.Protocol.Point vertex = 1;
inline int Debug_Polygon::vertex_size() const {
  return vertex_.size();
}
inline void Debug_Polygon::clear_vertex() {
  vertex_.Clear();
}
inline const ::ZSS::Protocol::Point& Debug_Polygon::vertex(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Polygon.vertex)
  return vertex_.Get(index);
}
inline ::ZSS::Protocol::Point* Debug_Polygon::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Polygon.vertex)
  return vertex_.Mutable(index);
}
inline ::ZSS::Protocol::Point* Debug_Polygon::add_vertex() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Debug_Polygon.vertex)
  return vertex_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Point >*
Debug_Polygon::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Debug_Polygon.vertex)
  return &vertex_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Point >&
Debug_Polygon::vertex() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Debug_Polygon.vertex)
  return vertex_;
}

// bool FILL = 2;
inline void Debug_Polygon::clear_fill() {
  fill_ = false;
}
inline bool Debug_Polygon::fill() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Polygon.FILL)
  return fill_;
}
inline void Debug_Polygon::set_fill(bool value) {
  
  fill_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Polygon.FILL)
}

// -------------------------------------------------------------------

// Debug_Text

// .ZSS.Protocol.Point pos = 1;
inline bool Debug_Text::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void Debug_Text::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::ZSS::Protocol::Point& Debug_Text::pos() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Text.pos)
  return pos_ != NULL ? *pos_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Debug_Text::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Text.pos)
  return pos_;
}
inline ::ZSS::Protocol::Point* Debug_Text::release_pos() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Text.pos)
  
  ::ZSS::Protocol::Point* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Debug_Text::set_allocated_pos(::ZSS::Protocol::Point* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Text.pos)
}

// string text = 2;
inline void Debug_Text::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debug_Text::text() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Text.text)
  return text_.GetNoArena();
}
inline void Debug_Text::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Text.text)
}
#if LANG_CXX11
inline void Debug_Text::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZSS.Protocol.Debug_Text.text)
}
#endif
inline void Debug_Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZSS.Protocol.Debug_Text.text)
}
inline void Debug_Text::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZSS.Protocol.Debug_Text.text)
}
inline ::std::string* Debug_Text::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Text.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug_Text::release_text() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Text.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debug_Text::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Text.text)
}

// -------------------------------------------------------------------

// Debug_Curve_

// float num = 1;
inline void Debug_Curve_::clear_num() {
  num_ = 0;
}
inline float Debug_Curve_::num() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve_.num)
  return num_;
}
inline void Debug_Curve_::set_num(float value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Curve_.num)
}

// float maxLimit = 2;
inline void Debug_Curve_::clear_maxlimit() {
  maxlimit_ = 0;
}
inline float Debug_Curve_::maxlimit() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve_.maxLimit)
  return maxlimit_;
}
inline void Debug_Curve_::set_maxlimit(float value) {
  
  maxlimit_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Curve_.maxLimit)
}

// float minLimit = 3;
inline void Debug_Curve_::clear_minlimit() {
  minlimit_ = 0;
}
inline float Debug_Curve_::minlimit() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve_.minLimit)
  return minlimit_;
}
inline void Debug_Curve_::set_minlimit(float value) {
  
  minlimit_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Curve_.minLimit)
}

// -------------------------------------------------------------------

// Debug_Curve

// .ZSS.Protocol.Point start = 1;
inline bool Debug_Curve::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline void Debug_Curve::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
inline const ::ZSS::Protocol::Point& Debug_Curve::start() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve.start)
  return start_ != NULL ? *start_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Debug_Curve::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Curve.start)
  return start_;
}
inline ::ZSS::Protocol::Point* Debug_Curve::release_start() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Curve.start)
  
  ::ZSS::Protocol::Point* temp = start_;
  start_ = NULL;
  return temp;
}
inline void Debug_Curve::set_allocated_start(::ZSS::Protocol::Point* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Curve.start)
}

// .ZSS.Protocol.Point p1 = 2;
inline bool Debug_Curve::has_p1() const {
  return this != internal_default_instance() && p1_ != NULL;
}
inline void Debug_Curve::clear_p1() {
  if (GetArenaNoVirtual() == NULL && p1_ != NULL) delete p1_;
  p1_ = NULL;
}
inline const ::ZSS::Protocol::Point& Debug_Curve::p1() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve.p1)
  return p1_ != NULL ? *p1_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Debug_Curve::mutable_p1() {
  
  if (p1_ == NULL) {
    p1_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Curve.p1)
  return p1_;
}
inline ::ZSS::Protocol::Point* Debug_Curve::release_p1() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Curve.p1)
  
  ::ZSS::Protocol::Point* temp = p1_;
  p1_ = NULL;
  return temp;
}
inline void Debug_Curve::set_allocated_p1(::ZSS::Protocol::Point* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Curve.p1)
}

// .ZSS.Protocol.Point p2 = 3;
inline bool Debug_Curve::has_p2() const {
  return this != internal_default_instance() && p2_ != NULL;
}
inline void Debug_Curve::clear_p2() {
  if (GetArenaNoVirtual() == NULL && p2_ != NULL) delete p2_;
  p2_ = NULL;
}
inline const ::ZSS::Protocol::Point& Debug_Curve::p2() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve.p2)
  return p2_ != NULL ? *p2_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Debug_Curve::mutable_p2() {
  
  if (p2_ == NULL) {
    p2_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Curve.p2)
  return p2_;
}
inline ::ZSS::Protocol::Point* Debug_Curve::release_p2() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Curve.p2)
  
  ::ZSS::Protocol::Point* temp = p2_;
  p2_ = NULL;
  return temp;
}
inline void Debug_Curve::set_allocated_p2(::ZSS::Protocol::Point* p2) {
  delete p2_;
  p2_ = p2;
  if (p2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Curve.p2)
}

// .ZSS.Protocol.Point end = 4;
inline bool Debug_Curve::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
inline void Debug_Curve::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
inline const ::ZSS::Protocol::Point& Debug_Curve::end() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Curve.end)
  return end_ != NULL ? *end_
                         : *::ZSS::Protocol::Point::internal_default_instance();
}
inline ::ZSS::Protocol::Point* Debug_Curve::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::ZSS::Protocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Curve.end)
  return end_;
}
inline ::ZSS::Protocol::Point* Debug_Curve::release_end() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Curve.end)
  
  ::ZSS::Protocol::Point* temp = end_;
  end_ = NULL;
  return temp;
}
inline void Debug_Curve::set_allocated_end(::ZSS::Protocol::Point* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Curve.end)
}

// -------------------------------------------------------------------

// Debug_Msg

// .ZSS.Protocol.Debug_Msg.Debug_Type type = 1;
inline void Debug_Msg::clear_type() {
  type_ = 0;
}
inline ::ZSS::Protocol::Debug_Msg_Debug_Type Debug_Msg::type() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.type)
  return static_cast< ::ZSS::Protocol::Debug_Msg_Debug_Type >(type_);
}
inline void Debug_Msg::set_type(::ZSS::Protocol::Debug_Msg_Debug_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Msg.type)
}

// .ZSS.Protocol.Debug_Msg.Color color = 2;
inline void Debug_Msg::clear_color() {
  color_ = 0;
}
inline ::ZSS::Protocol::Debug_Msg_Color Debug_Msg::color() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.color)
  return static_cast< ::ZSS::Protocol::Debug_Msg_Color >(color_);
}
inline void Debug_Msg::set_color(::ZSS::Protocol::Debug_Msg_Color value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Debug_Msg.color)
}

// .ZSS.Protocol.Debug_Arc arc = 3;
inline bool Debug_Msg::has_arc() const {
  return this != internal_default_instance() && arc_ != NULL;
}
inline void Debug_Msg::clear_arc() {
  if (GetArenaNoVirtual() == NULL && arc_ != NULL) delete arc_;
  arc_ = NULL;
}
inline const ::ZSS::Protocol::Debug_Arc& Debug_Msg::arc() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.arc)
  return arc_ != NULL ? *arc_
                         : *::ZSS::Protocol::Debug_Arc::internal_default_instance();
}
inline ::ZSS::Protocol::Debug_Arc* Debug_Msg::mutable_arc() {
  
  if (arc_ == NULL) {
    arc_ = new ::ZSS::Protocol::Debug_Arc;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.arc)
  return arc_;
}
inline ::ZSS::Protocol::Debug_Arc* Debug_Msg::release_arc() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.arc)
  
  ::ZSS::Protocol::Debug_Arc* temp = arc_;
  arc_ = NULL;
  return temp;
}
inline void Debug_Msg::set_allocated_arc(::ZSS::Protocol::Debug_Arc* arc) {
  delete arc_;
  arc_ = arc;
  if (arc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.arc)
}

// .ZSS.Protocol.Debug_Line line = 4;
inline bool Debug_Msg::has_line() const {
  return this != internal_default_instance() && line_ != NULL;
}
inline void Debug_Msg::clear_line() {
  if (GetArenaNoVirtual() == NULL && line_ != NULL) delete line_;
  line_ = NULL;
}
inline const ::ZSS::Protocol::Debug_Line& Debug_Msg::line() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.line)
  return line_ != NULL ? *line_
                         : *::ZSS::Protocol::Debug_Line::internal_default_instance();
}
inline ::ZSS::Protocol::Debug_Line* Debug_Msg::mutable_line() {
  
  if (line_ == NULL) {
    line_ = new ::ZSS::Protocol::Debug_Line;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.line)
  return line_;
}
inline ::ZSS::Protocol::Debug_Line* Debug_Msg::release_line() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.line)
  
  ::ZSS::Protocol::Debug_Line* temp = line_;
  line_ = NULL;
  return temp;
}
inline void Debug_Msg::set_allocated_line(::ZSS::Protocol::Debug_Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.line)
}

// .ZSS.Protocol.Debug_Text text = 5;
inline bool Debug_Msg::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void Debug_Msg::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
inline const ::ZSS::Protocol::Debug_Text& Debug_Msg::text() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.text)
  return text_ != NULL ? *text_
                         : *::ZSS::Protocol::Debug_Text::internal_default_instance();
}
inline ::ZSS::Protocol::Debug_Text* Debug_Msg::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::ZSS::Protocol::Debug_Text;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.text)
  return text_;
}
inline ::ZSS::Protocol::Debug_Text* Debug_Msg::release_text() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.text)
  
  ::ZSS::Protocol::Debug_Text* temp = text_;
  text_ = NULL;
  return temp;
}
inline void Debug_Msg::set_allocated_text(::ZSS::Protocol::Debug_Text* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.text)
}

// .ZSS.Protocol.Debug_Robot robot = 6;
inline bool Debug_Msg::has_robot() const {
  return this != internal_default_instance() && robot_ != NULL;
}
inline void Debug_Msg::clear_robot() {
  if (GetArenaNoVirtual() == NULL && robot_ != NULL) delete robot_;
  robot_ = NULL;
}
inline const ::ZSS::Protocol::Debug_Robot& Debug_Msg::robot() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.robot)
  return robot_ != NULL ? *robot_
                         : *::ZSS::Protocol::Debug_Robot::internal_default_instance();
}
inline ::ZSS::Protocol::Debug_Robot* Debug_Msg::mutable_robot() {
  
  if (robot_ == NULL) {
    robot_ = new ::ZSS::Protocol::Debug_Robot;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.robot)
  return robot_;
}
inline ::ZSS::Protocol::Debug_Robot* Debug_Msg::release_robot() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.robot)
  
  ::ZSS::Protocol::Debug_Robot* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline void Debug_Msg::set_allocated_robot(::ZSS::Protocol::Debug_Robot* robot) {
  delete robot_;
  robot_ = robot;
  if (robot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.robot)
}

// .ZSS.Protocol.Debug_Curve_ curve = 7;
inline bool Debug_Msg::has_curve() const {
  return this != internal_default_instance() && curve_ != NULL;
}
inline void Debug_Msg::clear_curve() {
  if (GetArenaNoVirtual() == NULL && curve_ != NULL) delete curve_;
  curve_ = NULL;
}
inline const ::ZSS::Protocol::Debug_Curve_& Debug_Msg::curve() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.curve)
  return curve_ != NULL ? *curve_
                         : *::ZSS::Protocol::Debug_Curve_::internal_default_instance();
}
inline ::ZSS::Protocol::Debug_Curve_* Debug_Msg::mutable_curve() {
  
  if (curve_ == NULL) {
    curve_ = new ::ZSS::Protocol::Debug_Curve_;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.curve)
  return curve_;
}
inline ::ZSS::Protocol::Debug_Curve_* Debug_Msg::release_curve() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.curve)
  
  ::ZSS::Protocol::Debug_Curve_* temp = curve_;
  curve_ = NULL;
  return temp;
}
inline void Debug_Msg::set_allocated_curve(::ZSS::Protocol::Debug_Curve_* curve) {
  delete curve_;
  curve_ = curve;
  if (curve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.curve)
}

// .ZSS.Protocol.Debug_Polygon polygon = 8;
inline bool Debug_Msg::has_polygon() const {
  return this != internal_default_instance() && polygon_ != NULL;
}
inline void Debug_Msg::clear_polygon() {
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) delete polygon_;
  polygon_ = NULL;
}
inline const ::ZSS::Protocol::Debug_Polygon& Debug_Msg::polygon() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msg.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::ZSS::Protocol::Debug_Polygon::internal_default_instance();
}
inline ::ZSS::Protocol::Debug_Polygon* Debug_Msg::mutable_polygon() {
  
  if (polygon_ == NULL) {
    polygon_ = new ::ZSS::Protocol::Debug_Polygon;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msg.polygon)
  return polygon_;
}
inline ::ZSS::Protocol::Debug_Polygon* Debug_Msg::release_polygon() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Debug_Msg.polygon)
  
  ::ZSS::Protocol::Debug_Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void Debug_Msg::set_allocated_polygon(::ZSS::Protocol::Debug_Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Debug_Msg.polygon)
}

// -------------------------------------------------------------------

// Debug_Msgs

// repeated .ZSS.Protocol.Debug_Msg msgs = 1;
inline int Debug_Msgs::msgs_size() const {
  return msgs_.size();
}
inline void Debug_Msgs::clear_msgs() {
  msgs_.Clear();
}
inline const ::ZSS::Protocol::Debug_Msg& Debug_Msgs::msgs(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Debug_Msgs.msgs)
  return msgs_.Get(index);
}
inline ::ZSS::Protocol::Debug_Msg* Debug_Msgs::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Debug_Msgs.msgs)
  return msgs_.Mutable(index);
}
inline ::ZSS::Protocol::Debug_Msg* Debug_Msgs::add_msgs() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Debug_Msgs.msgs)
  return msgs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msg >*
Debug_Msgs::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Debug_Msgs.msgs)
  return &msgs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msg >&
Debug_Msgs::msgs() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Debug_Msgs.msgs)
  return msgs_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Protocol
}  // namespace ZSS

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ZSS::Protocol::Debug_Msg_Debug_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZSS::Protocol::Debug_Msg_Debug_Type>() {
  return ::ZSS::Protocol::Debug_Msg_Debug_Type_descriptor();
}
template <> struct is_proto_enum< ::ZSS::Protocol::Debug_Msg_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZSS::Protocol::Debug_Msg_Color>() {
  return ::ZSS::Protocol::Debug_Msg_Color_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zss_5fdebug_2eproto__INCLUDED
