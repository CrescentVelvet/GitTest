// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_robocup_ssl_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class Vector2fDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector2f> {
} _Vector2f_default_instance_;
class SSL_FieldLineSegmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_FieldLineSegment> {
} _SSL_FieldLineSegment_default_instance_;
class SSL_FieldCicularArcDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_FieldCicularArc> {
} _SSL_FieldCicularArc_default_instance_;
class SSL_GeometryFieldSizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryFieldSize> {
} _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryCameraCalibrationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryCameraCalibration> {
} _SSL_GeometryCameraCalibration_default_instance_;
class SSL_GeometryDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryData> {
} _SSL_GeometryData_default_instance_;

namespace protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, p1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, p2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, thickness_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, a1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, a2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, thickness_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, boundary_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_arcs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, focal_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, principal_point_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, principal_point_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, distortion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, ty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, tz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_ty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_tz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, calib_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Vector2f)},
  { 7, -1, sizeof(SSL_FieldLineSegment)},
  { 16, -1, sizeof(SSL_FieldCicularArc)},
  { 27, -1, sizeof(SSL_GeometryFieldSize)},
  { 39, -1, sizeof(SSL_GeometryCameraCalibration)},
  { 59, -1, sizeof(SSL_GeometryData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_FieldLineSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_FieldCicularArc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryFieldSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryCameraCalibration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messages_robocup_ssl_geometry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vector2f_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SSL_FieldLineSegment_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SSL_FieldCicularArc_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SSL_GeometryFieldSize_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SSL_GeometryCameraCalibration_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SSL_GeometryData_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vector2f_default_instance_.DefaultConstruct();
  _SSL_FieldLineSegment_default_instance_.DefaultConstruct();
  _SSL_FieldCicularArc_default_instance_.DefaultConstruct();
  _SSL_GeometryFieldSize_default_instance_.DefaultConstruct();
  _SSL_GeometryCameraCalibration_default_instance_.DefaultConstruct();
  _SSL_GeometryData_default_instance_.DefaultConstruct();
  _SSL_FieldLineSegment_default_instance_.get_mutable()->p1_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
  _SSL_FieldLineSegment_default_instance_.get_mutable()->p2_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
  _SSL_FieldCicularArc_default_instance_.get_mutable()->center_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
  _SSL_GeometryData_default_instance_.get_mutable()->field_ = const_cast< ::SSL_GeometryFieldSize*>(
      ::SSL_GeometryFieldSize::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n#messages_robocup_ssl_geometry.proto\" \n"
      "\010Vector2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"e\n\024SSL_F"
      "ieldLineSegment\022\014\n\004name\030\001 \001(\t\022\025\n\002p1\030\002 \001("
      "\0132\t.Vector2f\022\025\n\002p2\030\003 \001(\0132\t.Vector2f\022\021\n\tt"
      "hickness\030\004 \001(\002\"y\n\023SSL_FieldCicularArc\022\014\n"
      "\004name\030\001 \001(\t\022\031\n\006center\030\002 \001(\0132\t.Vector2f\022\016"
      "\n\006radius\030\003 \001(\002\022\n\n\002a1\030\004 \001(\002\022\n\n\002a2\030\005 \001(\002\022\021"
      "\n\tthickness\030\006 \001(\002\"\330\001\n\025SSL_GeometryFieldS"
      "ize\022\024\n\014field_length\030\001 \001(\005\022\023\n\013field_width"
      "\030\002 \001(\005\022\022\n\ngoal_width\030\003 \001(\005\022\022\n\ngoal_depth"
      "\030\004 \001(\005\022\026\n\016boundary_width\030\005 \001(\005\022*\n\013field_"
      "lines\030\006 \003(\0132\025.SSL_FieldLineSegment\022(\n\nfi"
      "eld_arcs\030\007 \003(\0132\024.SSL_FieldCicularArc\"\311\002\n"
      "\035SSL_GeometryCameraCalibration\022\021\n\tcamera"
      "_id\030\001 \001(\r\022\024\n\014focal_length\030\002 \001(\002\022\031\n\021princ"
      "ipal_point_x\030\003 \001(\002\022\031\n\021principal_point_y\030"
      "\004 \001(\002\022\022\n\ndistortion\030\005 \001(\002\022\n\n\002q0\030\006 \001(\002\022\n\n"
      "\002q1\030\007 \001(\002\022\n\n\002q2\030\010 \001(\002\022\n\n\002q3\030\t \001(\002\022\n\n\002tx\030"
      "\n \001(\002\022\n\n\002ty\030\013 \001(\002\022\n\n\002tz\030\014 \001(\002\022\037\n\027derived"
      "_camera_world_tx\030\r \001(\002\022\037\n\027derived_camera"
      "_world_ty\030\016 \001(\002\022\037\n\027derived_camera_world_"
      "tz\030\017 \001(\002\"h\n\020SSL_GeometryData\022%\n\005field\030\001 "
      "\001(\0132\026.SSL_GeometryFieldSize\022-\n\005calib\030\002 \003"
      "(\0132\036.SSL_GeometryCameraCalibrationb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 962);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_geometry.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2f::kXFieldNumber;
const int Vector2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2f::Vector2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vector2f)
}

void Vector2f::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:Vector2f)
  SharedDtor();
}

void Vector2f::SharedDtor() {
}

void Vector2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector2f& Vector2f::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector2f* Vector2f::New(::google::protobuf::Arena* arena) const {
  Vector2f* n = new Vector2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector2f)
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector2f)
  return false;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:Vector2f)
}

::google::protobuf::uint8* Vector2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector2f)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vector2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vector2f)
    MergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2f::InternalSwap(Vector2f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2f

// float x = 1;
void Vector2f::clear_x() {
  x_ = 0;
}
float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:Vector2f.x)
  return x_;
}
void Vector2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector2f.x)
}

// float y = 2;
void Vector2f::clear_y() {
  y_ = 0;
}
float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:Vector2f.y)
  return y_;
}
void Vector2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector2f.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_FieldLineSegment::kNameFieldNumber;
const int SSL_FieldLineSegment::kP1FieldNumber;
const int SSL_FieldLineSegment::kP2FieldNumber;
const int SSL_FieldLineSegment::kThicknessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_FieldLineSegment::SSL_FieldLineSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_FieldLineSegment)
}
SSL_FieldLineSegment::SSL_FieldLineSegment(const SSL_FieldLineSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_p1()) {
    p1_ = new ::Vector2f(*from.p1_);
  } else {
    p1_ = NULL;
  }
  if (from.has_p2()) {
    p2_ = new ::Vector2f(*from.p2_);
  } else {
    p2_ = NULL;
  }
  thickness_ = from.thickness_;
  // @@protoc_insertion_point(copy_constructor:SSL_FieldLineSegment)
}

void SSL_FieldLineSegment::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&p1_, 0, reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&p1_) + sizeof(thickness_));
  _cached_size_ = 0;
}

SSL_FieldLineSegment::~SSL_FieldLineSegment() {
  // @@protoc_insertion_point(destructor:SSL_FieldLineSegment)
  SharedDtor();
}

void SSL_FieldLineSegment::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete p1_;
  }
  if (this != internal_default_instance()) {
    delete p2_;
  }
}

void SSL_FieldLineSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_FieldLineSegment::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_FieldLineSegment& SSL_FieldLineSegment::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSL_FieldLineSegment* SSL_FieldLineSegment::New(::google::protobuf::Arena* arena) const {
  SSL_FieldLineSegment* n = new SSL_FieldLineSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_FieldLineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldLineSegment)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && p1_ != NULL) {
    delete p1_;
  }
  p1_ = NULL;
  if (GetArenaNoVirtual() == NULL && p2_ != NULL) {
    delete p2_;
  }
  p2_ = NULL;
  thickness_ = 0;
}

bool SSL_FieldLineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_FieldLineSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SSL_FieldLineSegment.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vector2f p1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vector2f p2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float thickness = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_FieldLineSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_FieldLineSegment)
  return false;
#undef DO_
}

void SSL_FieldLineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SSL_FieldLineSegment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .Vector2f p1 = 2;
  if (this->has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->p1_, output);
  }

  // .Vector2f p2 = 3;
  if (this->has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->p2_, output);
  }

  // float thickness = 4;
  if (this->thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->thickness(), output);
  }

  // @@protoc_insertion_point(serialize_end:SSL_FieldLineSegment)
}

::google::protobuf::uint8* SSL_FieldLineSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SSL_FieldLineSegment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .Vector2f p1 = 2;
  if (this->has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->p1_, deterministic, target);
  }

  // .Vector2f p2 = 3;
  if (this->has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->p2_, deterministic, target);
  }

  // float thickness = 4;
  if (this->thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->thickness(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldLineSegment)
  return target;
}

size_t SSL_FieldLineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldLineSegment)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .Vector2f p1 = 2;
  if (this->has_p1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p1_);
  }

  // .Vector2f p2 = 3;
  if (this->has_p2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p2_);
  }

  // float thickness = 4;
  if (this->thickness() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_FieldLineSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_FieldLineSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_FieldLineSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_FieldLineSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_FieldLineSegment)
    MergeFrom(*source);
  }
}

void SSL_FieldLineSegment::MergeFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_p1()) {
    mutable_p1()->::Vector2f::MergeFrom(from.p1());
  }
  if (from.has_p2()) {
    mutable_p2()->::Vector2f::MergeFrom(from.p2());
  }
  if (from.thickness() != 0) {
    set_thickness(from.thickness());
  }
}

void SSL_FieldLineSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_FieldLineSegment::CopyFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldLineSegment::IsInitialized() const {
  return true;
}

void SSL_FieldLineSegment::Swap(SSL_FieldLineSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_FieldLineSegment::InternalSwap(SSL_FieldLineSegment* other) {
  name_.Swap(&other->name_);
  std::swap(p1_, other->p1_);
  std::swap(p2_, other->p2_);
  std::swap(thickness_, other->thickness_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_FieldLineSegment::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_FieldLineSegment

// string name = 1;
void SSL_FieldLineSegment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SSL_FieldLineSegment::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.name)
  return name_.GetNoArena();
}
void SSL_FieldLineSegment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.name)
}
#if LANG_CXX11
void SSL_FieldLineSegment::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSL_FieldLineSegment.name)
}
#endif
void SSL_FieldLineSegment::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_FieldLineSegment.name)
}
void SSL_FieldLineSegment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_FieldLineSegment.name)
}
::std::string* SSL_FieldLineSegment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SSL_FieldLineSegment::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SSL_FieldLineSegment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.name)
}

// .Vector2f p1 = 2;
bool SSL_FieldLineSegment::has_p1() const {
  return this != internal_default_instance() && p1_ != NULL;
}
void SSL_FieldLineSegment::clear_p1() {
  if (GetArenaNoVirtual() == NULL && p1_ != NULL) delete p1_;
  p1_ = NULL;
}
const ::Vector2f& SSL_FieldLineSegment::p1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p1)
  return p1_ != NULL ? *p1_
                         : *::Vector2f::internal_default_instance();
}
::Vector2f* SSL_FieldLineSegment::mutable_p1() {
  
  if (p1_ == NULL) {
    p1_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p1)
  return p1_;
}
::Vector2f* SSL_FieldLineSegment::release_p1() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p1)
  
  ::Vector2f* temp = p1_;
  p1_ = NULL;
  return temp;
}
void SSL_FieldLineSegment::set_allocated_p1(::Vector2f* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p1)
}

// .Vector2f p2 = 3;
bool SSL_FieldLineSegment::has_p2() const {
  return this != internal_default_instance() && p2_ != NULL;
}
void SSL_FieldLineSegment::clear_p2() {
  if (GetArenaNoVirtual() == NULL && p2_ != NULL) delete p2_;
  p2_ = NULL;
}
const ::Vector2f& SSL_FieldLineSegment::p2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p2)
  return p2_ != NULL ? *p2_
                         : *::Vector2f::internal_default_instance();
}
::Vector2f* SSL_FieldLineSegment::mutable_p2() {
  
  if (p2_ == NULL) {
    p2_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p2)
  return p2_;
}
::Vector2f* SSL_FieldLineSegment::release_p2() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p2)
  
  ::Vector2f* temp = p2_;
  p2_ = NULL;
  return temp;
}
void SSL_FieldLineSegment::set_allocated_p2(::Vector2f* p2) {
  delete p2_;
  p2_ = p2;
  if (p2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p2)
}

// float thickness = 4;
void SSL_FieldLineSegment::clear_thickness() {
  thickness_ = 0;
}
float SSL_FieldLineSegment::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.thickness)
  return thickness_;
}
void SSL_FieldLineSegment::set_thickness(float value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.thickness)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_FieldCicularArc::kNameFieldNumber;
const int SSL_FieldCicularArc::kCenterFieldNumber;
const int SSL_FieldCicularArc::kRadiusFieldNumber;
const int SSL_FieldCicularArc::kA1FieldNumber;
const int SSL_FieldCicularArc::kA2FieldNumber;
const int SSL_FieldCicularArc::kThicknessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_FieldCicularArc::SSL_FieldCicularArc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_FieldCicularArc)
}
SSL_FieldCicularArc::SSL_FieldCicularArc(const SSL_FieldCicularArc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_center()) {
    center_ = new ::Vector2f(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&radius_) + sizeof(thickness_));
  // @@protoc_insertion_point(copy_constructor:SSL_FieldCicularArc)
}

void SSL_FieldCicularArc::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_, 0, reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&center_) + sizeof(thickness_));
  _cached_size_ = 0;
}

SSL_FieldCicularArc::~SSL_FieldCicularArc() {
  // @@protoc_insertion_point(destructor:SSL_FieldCicularArc)
  SharedDtor();
}

void SSL_FieldCicularArc::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete center_;
  }
}

void SSL_FieldCicularArc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_FieldCicularArc::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_FieldCicularArc& SSL_FieldCicularArc::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSL_FieldCicularArc* SSL_FieldCicularArc::New(::google::protobuf::Arena* arena) const {
  SSL_FieldCicularArc* n = new SSL_FieldCicularArc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_FieldCicularArc::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldCicularArc)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  ::memset(&radius_, 0, reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&radius_) + sizeof(thickness_));
}

bool SSL_FieldCicularArc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_FieldCicularArc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SSL_FieldCicularArc.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vector2f center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float thickness = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_FieldCicularArc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_FieldCicularArc)
  return false;
#undef DO_
}

void SSL_FieldCicularArc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_FieldCicularArc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SSL_FieldCicularArc.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .Vector2f center = 2;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->center_, output);
  }

  // float radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // float a1 = 4;
  if (this->a1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a1(), output);
  }

  // float a2 = 5;
  if (this->a2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->a2(), output);
  }

  // float thickness = 6;
  if (this->thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->thickness(), output);
  }

  // @@protoc_insertion_point(serialize_end:SSL_FieldCicularArc)
}

::google::protobuf::uint8* SSL_FieldCicularArc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldCicularArc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SSL_FieldCicularArc.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .Vector2f center = 2;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->center_, deterministic, target);
  }

  // float radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // float a1 = 4;
  if (this->a1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a1(), target);
  }

  // float a2 = 5;
  if (this->a2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->a2(), target);
  }

  // float thickness = 6;
  if (this->thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->thickness(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldCicularArc)
  return target;
}

size_t SSL_FieldCicularArc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldCicularArc)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .Vector2f center = 2;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // float radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // float a1 = 4;
  if (this->a1() != 0) {
    total_size += 1 + 4;
  }

  // float a2 = 5;
  if (this->a2() != 0) {
    total_size += 1 + 4;
  }

  // float thickness = 6;
  if (this->thickness() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_FieldCicularArc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_FieldCicularArc)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_FieldCicularArc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_FieldCicularArc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_FieldCicularArc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_FieldCicularArc)
    MergeFrom(*source);
  }
}

void SSL_FieldCicularArc::MergeFrom(const SSL_FieldCicularArc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldCicularArc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_center()) {
    mutable_center()->::Vector2f::MergeFrom(from.center());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.a1() != 0) {
    set_a1(from.a1());
  }
  if (from.a2() != 0) {
    set_a2(from.a2());
  }
  if (from.thickness() != 0) {
    set_thickness(from.thickness());
  }
}

void SSL_FieldCicularArc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_FieldCicularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_FieldCicularArc::CopyFrom(const SSL_FieldCicularArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldCicularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldCicularArc::IsInitialized() const {
  return true;
}

void SSL_FieldCicularArc::Swap(SSL_FieldCicularArc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_FieldCicularArc::InternalSwap(SSL_FieldCicularArc* other) {
  name_.Swap(&other->name_);
  std::swap(center_, other->center_);
  std::swap(radius_, other->radius_);
  std::swap(a1_, other->a1_);
  std::swap(a2_, other->a2_);
  std::swap(thickness_, other->thickness_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_FieldCicularArc::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_FieldCicularArc

// string name = 1;
void SSL_FieldCicularArc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SSL_FieldCicularArc::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.name)
  return name_.GetNoArena();
}
void SSL_FieldCicularArc::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.name)
}
#if LANG_CXX11
void SSL_FieldCicularArc::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSL_FieldCicularArc.name)
}
#endif
void SSL_FieldCicularArc::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_FieldCicularArc.name)
}
void SSL_FieldCicularArc::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_FieldCicularArc.name)
}
::std::string* SSL_FieldCicularArc::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SSL_FieldCicularArc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SSL_FieldCicularArc::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldCicularArc.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SSL_FieldCicularArc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCicularArc.name)
}

// .Vector2f center = 2;
bool SSL_FieldCicularArc::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void SSL_FieldCicularArc::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::Vector2f& SSL_FieldCicularArc::center() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.center)
  return center_ != NULL ? *center_
                         : *::Vector2f::internal_default_instance();
}
::Vector2f* SSL_FieldCicularArc::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldCicularArc.center)
  return center_;
}
::Vector2f* SSL_FieldCicularArc::release_center() {
  // @@protoc_insertion_point(field_release:SSL_FieldCicularArc.center)
  
  ::Vector2f* temp = center_;
  center_ = NULL;
  return temp;
}
void SSL_FieldCicularArc::set_allocated_center(::Vector2f* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCicularArc.center)
}

// float radius = 3;
void SSL_FieldCicularArc::clear_radius() {
  radius_ = 0;
}
float SSL_FieldCicularArc::radius() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.radius)
  return radius_;
}
void SSL_FieldCicularArc::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.radius)
}

// float a1 = 4;
void SSL_FieldCicularArc::clear_a1() {
  a1_ = 0;
}
float SSL_FieldCicularArc::a1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.a1)
  return a1_;
}
void SSL_FieldCicularArc::set_a1(float value) {
  
  a1_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.a1)
}

// float a2 = 5;
void SSL_FieldCicularArc::clear_a2() {
  a2_ = 0;
}
float SSL_FieldCicularArc::a2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.a2)
  return a2_;
}
void SSL_FieldCicularArc::set_a2(float value) {
  
  a2_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.a2)
}

// float thickness = 6;
void SSL_FieldCicularArc::clear_thickness() {
  thickness_ = 0;
}
float SSL_FieldCicularArc::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.thickness)
  return thickness_;
}
void SSL_FieldCicularArc::set_thickness(float value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.thickness)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryFieldSize::kFieldLengthFieldNumber;
const int SSL_GeometryFieldSize::kFieldWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalDepthFieldNumber;
const int SSL_GeometryFieldSize::kBoundaryWidthFieldNumber;
const int SSL_GeometryFieldSize::kFieldLinesFieldNumber;
const int SSL_GeometryFieldSize::kFieldArcsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryFieldSize::SSL_GeometryFieldSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_lines_(from.field_lines_),
      field_arcs_(from.field_arcs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_length_, &from.field_length_,
    reinterpret_cast<char*>(&boundary_width_) -
    reinterpret_cast<char*>(&field_length_) + sizeof(boundary_width_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryFieldSize)
}

void SSL_GeometryFieldSize::SharedCtor() {
  ::memset(&field_length_, 0, reinterpret_cast<char*>(&boundary_width_) -
    reinterpret_cast<char*>(&field_length_) + sizeof(boundary_width_));
  _cached_size_ = 0;
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:SSL_GeometryFieldSize)
  SharedDtor();
}

void SSL_GeometryFieldSize::SharedDtor() {
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryFieldSize::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryFieldSize& SSL_GeometryFieldSize::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSL_GeometryFieldSize* SSL_GeometryFieldSize::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryFieldSize* n = new SSL_GeometryFieldSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryFieldSize)
  field_lines_.Clear();
  field_arcs_.Clear();
  ::memset(&field_length_, 0, reinterpret_cast<char*>(&boundary_width_) -
    reinterpret_cast<char*>(&field_length_) + sizeof(boundary_width_));
}

bool SSL_GeometryFieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryFieldSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 field_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 field_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 goal_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 goal_depth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 boundary_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boundary_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_FieldLineSegment field_lines = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_FieldCicularArc field_arcs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_arcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryFieldSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryFieldSize)
  return false;
#undef DO_
}

void SSL_GeometryFieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field_length = 1;
  if (this->field_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->field_length(), output);
  }

  // int32 field_width = 2;
  if (this->field_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_width(), output);
  }

  // int32 goal_width = 3;
  if (this->goal_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_width(), output);
  }

  // int32 goal_depth = 4;
  if (this->goal_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goal_depth(), output);
  }

  // int32 boundary_width = 5;
  if (this->boundary_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->boundary_width(), output);
  }

  // repeated .SSL_FieldLineSegment field_lines = 6;
  for (unsigned int i = 0, n = this->field_lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->field_lines(i), output);
  }

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  for (unsigned int i = 0, n = this->field_arcs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->field_arcs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SSL_GeometryFieldSize)
}

::google::protobuf::uint8* SSL_GeometryFieldSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field_length = 1;
  if (this->field_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->field_length(), target);
  }

  // int32 field_width = 2;
  if (this->field_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_width(), target);
  }

  // int32 goal_width = 3;
  if (this->goal_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_width(), target);
  }

  // int32 goal_depth = 4;
  if (this->goal_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goal_depth(), target);
  }

  // int32 boundary_width = 5;
  if (this->boundary_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->boundary_width(), target);
  }

  // repeated .SSL_FieldLineSegment field_lines = 6;
  for (unsigned int i = 0, n = this->field_lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->field_lines(i), deterministic, target);
  }

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  for (unsigned int i = 0, n = this->field_arcs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->field_arcs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  // repeated .SSL_FieldLineSegment field_lines = 6;
  {
    unsigned int count = this->field_lines_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_lines(i));
    }
  }

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  {
    unsigned int count = this->field_arcs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_arcs(i));
    }
  }

  // int32 field_length = 1;
  if (this->field_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());
  }

  // int32 field_width = 2;
  if (this->field_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());
  }

  // int32 goal_width = 3;
  if (this->goal_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());
  }

  // int32 goal_depth = 4;
  if (this->goal_depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());
  }

  // int32 boundary_width = 5;
  if (this->boundary_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryFieldSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryFieldSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryFieldSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryFieldSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryFieldSize)
    MergeFrom(*source);
  }
}

void SSL_GeometryFieldSize::MergeFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_lines_.MergeFrom(from.field_lines_);
  field_arcs_.MergeFrom(from.field_arcs_);
  if (from.field_length() != 0) {
    set_field_length(from.field_length());
  }
  if (from.field_width() != 0) {
    set_field_width(from.field_width());
  }
  if (from.goal_width() != 0) {
    set_goal_width(from.goal_width());
  }
  if (from.goal_depth() != 0) {
    set_goal_depth(from.goal_depth());
  }
  if (from.boundary_width() != 0) {
    set_boundary_width(from.boundary_width());
  }
}

void SSL_GeometryFieldSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  return true;
}

void SSL_GeometryFieldSize::Swap(SSL_GeometryFieldSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  field_lines_.InternalSwap(&other->field_lines_);
  field_arcs_.InternalSwap(&other->field_arcs_);
  std::swap(field_length_, other->field_length_);
  std::swap(field_width_, other->field_width_);
  std::swap(goal_width_, other->goal_width_);
  std::swap(goal_depth_, other->goal_depth_);
  std::swap(boundary_width_, other->boundary_width_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryFieldSize

// int32 field_length = 1;
void SSL_GeometryFieldSize::clear_field_length() {
  field_length_ = 0;
}
::google::protobuf::int32 SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_length)
  return field_length_;
}
void SSL_GeometryFieldSize::set_field_length(::google::protobuf::int32 value) {
  
  field_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_length)
}

// int32 field_width = 2;
void SSL_GeometryFieldSize::clear_field_width() {
  field_width_ = 0;
}
::google::protobuf::int32 SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_width)
  return field_width_;
}
void SSL_GeometryFieldSize::set_field_width(::google::protobuf::int32 value) {
  
  field_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_width)
}

// int32 goal_width = 3;
void SSL_GeometryFieldSize::clear_goal_width() {
  goal_width_ = 0;
}
::google::protobuf::int32 SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_width)
  return goal_width_;
}
void SSL_GeometryFieldSize::set_goal_width(::google::protobuf::int32 value) {
  
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_width)
}

// int32 goal_depth = 4;
void SSL_GeometryFieldSize::clear_goal_depth() {
  goal_depth_ = 0;
}
::google::protobuf::int32 SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_depth)
  return goal_depth_;
}
void SSL_GeometryFieldSize::set_goal_depth(::google::protobuf::int32 value) {
  
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_depth)
}

// int32 boundary_width = 5;
void SSL_GeometryFieldSize::clear_boundary_width() {
  boundary_width_ = 0;
}
::google::protobuf::int32 SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.boundary_width)
  return boundary_width_;
}
void SSL_GeometryFieldSize::set_boundary_width(::google::protobuf::int32 value) {
  
  boundary_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.boundary_width)
}

// repeated .SSL_FieldLineSegment field_lines = 6;
int SSL_GeometryFieldSize::field_lines_size() const {
  return field_lines_.size();
}
void SSL_GeometryFieldSize::clear_field_lines() {
  field_lines_.Clear();
}
const ::SSL_FieldLineSegment& SSL_GeometryFieldSize::field_lines(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Get(index);
}
::SSL_FieldLineSegment* SSL_GeometryFieldSize::mutable_field_lines(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Mutable(index);
}
::SSL_FieldLineSegment* SSL_GeometryFieldSize::add_field_lines() {
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment >*
SSL_GeometryFieldSize::mutable_field_lines() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_lines)
  return &field_lines_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment >&
SSL_GeometryFieldSize::field_lines() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_lines)
  return field_lines_;
}

// repeated .SSL_FieldCicularArc field_arcs = 7;
int SSL_GeometryFieldSize::field_arcs_size() const {
  return field_arcs_.size();
}
void SSL_GeometryFieldSize::clear_field_arcs() {
  field_arcs_.Clear();
}
const ::SSL_FieldCicularArc& SSL_GeometryFieldSize::field_arcs(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Get(index);
}
::SSL_FieldCicularArc* SSL_GeometryFieldSize::mutable_field_arcs(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Mutable(index);
}
::SSL_FieldCicularArc* SSL_GeometryFieldSize::add_field_arcs() {
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc >*
SSL_GeometryFieldSize::mutable_field_arcs() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_arcs)
  return &field_arcs_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc >&
SSL_GeometryFieldSize::field_arcs() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryCameraCalibration::kCameraIdFieldNumber;
const int SSL_GeometryCameraCalibration::kFocalLengthFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointXFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointYFieldNumber;
const int SSL_GeometryCameraCalibration::kDistortionFieldNumber;
const int SSL_GeometryCameraCalibration::kQ0FieldNumber;
const int SSL_GeometryCameraCalibration::kQ1FieldNumber;
const int SSL_GeometryCameraCalibration::kQ2FieldNumber;
const int SSL_GeometryCameraCalibration::kQ3FieldNumber;
const int SSL_GeometryCameraCalibration::kTxFieldNumber;
const int SSL_GeometryCameraCalibration::kTyFieldNumber;
const int SSL_GeometryCameraCalibration::kTzFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTxFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTyFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryCameraCalibration)
}
SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    reinterpret_cast<char*>(&derived_camera_world_tz_) -
    reinterpret_cast<char*>(&camera_id_) + sizeof(derived_camera_world_tz_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryCameraCalibration)
}

void SSL_GeometryCameraCalibration::SharedCtor() {
  ::memset(&camera_id_, 0, reinterpret_cast<char*>(&derived_camera_world_tz_) -
    reinterpret_cast<char*>(&camera_id_) + sizeof(derived_camera_world_tz_));
  _cached_size_ = 0;
}

SSL_GeometryCameraCalibration::~SSL_GeometryCameraCalibration() {
  // @@protoc_insertion_point(destructor:SSL_GeometryCameraCalibration)
  SharedDtor();
}

void SSL_GeometryCameraCalibration::SharedDtor() {
}

void SSL_GeometryCameraCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryCameraCalibration::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryCameraCalibration& SSL_GeometryCameraCalibration::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSL_GeometryCameraCalibration* SSL_GeometryCameraCalibration::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryCameraCalibration* n = new SSL_GeometryCameraCalibration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryCameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryCameraCalibration)
  ::memset(&camera_id_, 0, reinterpret_cast<char*>(&derived_camera_world_tz_) -
    reinterpret_cast<char*>(&camera_id_) + sizeof(derived_camera_world_tz_));
}

bool SSL_GeometryCameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryCameraCalibration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 camera_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float focal_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float principal_point_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float principal_point_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distortion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distortion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float q0 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float q1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float q2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float q3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tx = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ty = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tz = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float derived_camera_world_tx = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float derived_camera_world_ty = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float derived_camera_world_tz = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryCameraCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryCameraCalibration)
  return false;
#undef DO_
}

void SSL_GeometryCameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryCameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camera_id = 1;
  if (this->camera_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_id(), output);
  }

  // float focal_length = 2;
  if (this->focal_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->focal_length(), output);
  }

  // float principal_point_x = 3;
  if (this->principal_point_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->principal_point_x(), output);
  }

  // float principal_point_y = 4;
  if (this->principal_point_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->principal_point_y(), output);
  }

  // float distortion = 5;
  if (this->distortion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distortion(), output);
  }

  // float q0 = 6;
  if (this->q0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->q0(), output);
  }

  // float q1 = 7;
  if (this->q1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->q1(), output);
  }

  // float q2 = 8;
  if (this->q2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->q2(), output);
  }

  // float q3 = 9;
  if (this->q3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->q3(), output);
  }

  // float tx = 10;
  if (this->tx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tx(), output);
  }

  // float ty = 11;
  if (this->ty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ty(), output);
  }

  // float tz = 12;
  if (this->tz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tz(), output);
  }

  // float derived_camera_world_tx = 13;
  if (this->derived_camera_world_tx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->derived_camera_world_tx(), output);
  }

  // float derived_camera_world_ty = 14;
  if (this->derived_camera_world_ty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->derived_camera_world_ty(), output);
  }

  // float derived_camera_world_tz = 15;
  if (this->derived_camera_world_tz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->derived_camera_world_tz(), output);
  }

  // @@protoc_insertion_point(serialize_end:SSL_GeometryCameraCalibration)
}

::google::protobuf::uint8* SSL_GeometryCameraCalibration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryCameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_id(), target);
  }

  // float focal_length = 2;
  if (this->focal_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->focal_length(), target);
  }

  // float principal_point_x = 3;
  if (this->principal_point_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->principal_point_x(), target);
  }

  // float principal_point_y = 4;
  if (this->principal_point_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->principal_point_y(), target);
  }

  // float distortion = 5;
  if (this->distortion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->distortion(), target);
  }

  // float q0 = 6;
  if (this->q0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->q0(), target);
  }

  // float q1 = 7;
  if (this->q1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->q1(), target);
  }

  // float q2 = 8;
  if (this->q2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->q2(), target);
  }

  // float q3 = 9;
  if (this->q3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->q3(), target);
  }

  // float tx = 10;
  if (this->tx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tx(), target);
  }

  // float ty = 11;
  if (this->ty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ty(), target);
  }

  // float tz = 12;
  if (this->tz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tz(), target);
  }

  // float derived_camera_world_tx = 13;
  if (this->derived_camera_world_tx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->derived_camera_world_tx(), target);
  }

  // float derived_camera_world_ty = 14;
  if (this->derived_camera_world_ty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->derived_camera_world_ty(), target);
  }

  // float derived_camera_world_tz = 15;
  if (this->derived_camera_world_tz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->derived_camera_world_tz(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryCameraCalibration)
  return target;
}

size_t SSL_GeometryCameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  // uint32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());
  }

  // float focal_length = 2;
  if (this->focal_length() != 0) {
    total_size += 1 + 4;
  }

  // float principal_point_x = 3;
  if (this->principal_point_x() != 0) {
    total_size += 1 + 4;
  }

  // float principal_point_y = 4;
  if (this->principal_point_y() != 0) {
    total_size += 1 + 4;
  }

  // float distortion = 5;
  if (this->distortion() != 0) {
    total_size += 1 + 4;
  }

  // float q0 = 6;
  if (this->q0() != 0) {
    total_size += 1 + 4;
  }

  // float q1 = 7;
  if (this->q1() != 0) {
    total_size += 1 + 4;
  }

  // float q2 = 8;
  if (this->q2() != 0) {
    total_size += 1 + 4;
  }

  // float q3 = 9;
  if (this->q3() != 0) {
    total_size += 1 + 4;
  }

  // float tx = 10;
  if (this->tx() != 0) {
    total_size += 1 + 4;
  }

  // float ty = 11;
  if (this->ty() != 0) {
    total_size += 1 + 4;
  }

  // float tz = 12;
  if (this->tz() != 0) {
    total_size += 1 + 4;
  }

  // float derived_camera_world_tx = 13;
  if (this->derived_camera_world_tx() != 0) {
    total_size += 1 + 4;
  }

  // float derived_camera_world_ty = 14;
  if (this->derived_camera_world_ty() != 0) {
    total_size += 1 + 4;
  }

  // float derived_camera_world_tz = 15;
  if (this->derived_camera_world_tz() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryCameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryCameraCalibration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryCameraCalibration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryCameraCalibration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryCameraCalibration)
    MergeFrom(*source);
  }
}

void SSL_GeometryCameraCalibration::MergeFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_id() != 0) {
    set_camera_id(from.camera_id());
  }
  if (from.focal_length() != 0) {
    set_focal_length(from.focal_length());
  }
  if (from.principal_point_x() != 0) {
    set_principal_point_x(from.principal_point_x());
  }
  if (from.principal_point_y() != 0) {
    set_principal_point_y(from.principal_point_y());
  }
  if (from.distortion() != 0) {
    set_distortion(from.distortion());
  }
  if (from.q0() != 0) {
    set_q0(from.q0());
  }
  if (from.q1() != 0) {
    set_q1(from.q1());
  }
  if (from.q2() != 0) {
    set_q2(from.q2());
  }
  if (from.q3() != 0) {
    set_q3(from.q3());
  }
  if (from.tx() != 0) {
    set_tx(from.tx());
  }
  if (from.ty() != 0) {
    set_ty(from.ty());
  }
  if (from.tz() != 0) {
    set_tz(from.tz());
  }
  if (from.derived_camera_world_tx() != 0) {
    set_derived_camera_world_tx(from.derived_camera_world_tx());
  }
  if (from.derived_camera_world_ty() != 0) {
    set_derived_camera_world_ty(from.derived_camera_world_ty());
  }
  if (from.derived_camera_world_tz() != 0) {
    set_derived_camera_world_tz(from.derived_camera_world_tz());
  }
}

void SSL_GeometryCameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryCameraCalibration::CopyFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryCameraCalibration::IsInitialized() const {
  return true;
}

void SSL_GeometryCameraCalibration::Swap(SSL_GeometryCameraCalibration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryCameraCalibration::InternalSwap(SSL_GeometryCameraCalibration* other) {
  std::swap(camera_id_, other->camera_id_);
  std::swap(focal_length_, other->focal_length_);
  std::swap(principal_point_x_, other->principal_point_x_);
  std::swap(principal_point_y_, other->principal_point_y_);
  std::swap(distortion_, other->distortion_);
  std::swap(q0_, other->q0_);
  std::swap(q1_, other->q1_);
  std::swap(q2_, other->q2_);
  std::swap(q3_, other->q3_);
  std::swap(tx_, other->tx_);
  std::swap(ty_, other->ty_);
  std::swap(tz_, other->tz_);
  std::swap(derived_camera_world_tx_, other->derived_camera_world_tx_);
  std::swap(derived_camera_world_ty_, other->derived_camera_world_ty_);
  std::swap(derived_camera_world_tz_, other->derived_camera_world_tz_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryCameraCalibration::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryCameraCalibration

// uint32 camera_id = 1;
void SSL_GeometryCameraCalibration::clear_camera_id() {
  camera_id_ = 0u;
}
::google::protobuf::uint32 SSL_GeometryCameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.camera_id)
  return camera_id_;
}
void SSL_GeometryCameraCalibration::set_camera_id(::google::protobuf::uint32 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.camera_id)
}

// float focal_length = 2;
void SSL_GeometryCameraCalibration::clear_focal_length() {
  focal_length_ = 0;
}
float SSL_GeometryCameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.focal_length)
  return focal_length_;
}
void SSL_GeometryCameraCalibration::set_focal_length(float value) {
  
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.focal_length)
}

// float principal_point_x = 3;
void SSL_GeometryCameraCalibration::clear_principal_point_x() {
  principal_point_x_ = 0;
}
float SSL_GeometryCameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_x)
  return principal_point_x_;
}
void SSL_GeometryCameraCalibration::set_principal_point_x(float value) {
  
  principal_point_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_x)
}

// float principal_point_y = 4;
void SSL_GeometryCameraCalibration::clear_principal_point_y() {
  principal_point_y_ = 0;
}
float SSL_GeometryCameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_y)
  return principal_point_y_;
}
void SSL_GeometryCameraCalibration::set_principal_point_y(float value) {
  
  principal_point_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_y)
}

// float distortion = 5;
void SSL_GeometryCameraCalibration::clear_distortion() {
  distortion_ = 0;
}
float SSL_GeometryCameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.distortion)
  return distortion_;
}
void SSL_GeometryCameraCalibration::set_distortion(float value) {
  
  distortion_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.distortion)
}

// float q0 = 6;
void SSL_GeometryCameraCalibration::clear_q0() {
  q0_ = 0;
}
float SSL_GeometryCameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q0)
  return q0_;
}
void SSL_GeometryCameraCalibration::set_q0(float value) {
  
  q0_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q0)
}

// float q1 = 7;
void SSL_GeometryCameraCalibration::clear_q1() {
  q1_ = 0;
}
float SSL_GeometryCameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q1)
  return q1_;
}
void SSL_GeometryCameraCalibration::set_q1(float value) {
  
  q1_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q1)
}

// float q2 = 8;
void SSL_GeometryCameraCalibration::clear_q2() {
  q2_ = 0;
}
float SSL_GeometryCameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q2)
  return q2_;
}
void SSL_GeometryCameraCalibration::set_q2(float value) {
  
  q2_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q2)
}

// float q3 = 9;
void SSL_GeometryCameraCalibration::clear_q3() {
  q3_ = 0;
}
float SSL_GeometryCameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q3)
  return q3_;
}
void SSL_GeometryCameraCalibration::set_q3(float value) {
  
  q3_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q3)
}

// float tx = 10;
void SSL_GeometryCameraCalibration::clear_tx() {
  tx_ = 0;
}
float SSL_GeometryCameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tx)
  return tx_;
}
void SSL_GeometryCameraCalibration::set_tx(float value) {
  
  tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tx)
}

// float ty = 11;
void SSL_GeometryCameraCalibration::clear_ty() {
  ty_ = 0;
}
float SSL_GeometryCameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.ty)
  return ty_;
}
void SSL_GeometryCameraCalibration::set_ty(float value) {
  
  ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.ty)
}

// float tz = 12;
void SSL_GeometryCameraCalibration::clear_tz() {
  tz_ = 0;
}
float SSL_GeometryCameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tz)
  return tz_;
}
void SSL_GeometryCameraCalibration::set_tz(float value) {
  
  tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tz)
}

// float derived_camera_world_tx = 13;
void SSL_GeometryCameraCalibration::clear_derived_camera_world_tx() {
  derived_camera_world_tx_ = 0;
}
float SSL_GeometryCameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tx)
  return derived_camera_world_tx_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_tx(float value) {
  
  derived_camera_world_tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tx)
}

// float derived_camera_world_ty = 14;
void SSL_GeometryCameraCalibration::clear_derived_camera_world_ty() {
  derived_camera_world_ty_ = 0;
}
float SSL_GeometryCameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_ty)
  return derived_camera_world_ty_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_ty(float value) {
  
  derived_camera_world_ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_ty)
}

// float derived_camera_world_tz = 15;
void SSL_GeometryCameraCalibration::clear_derived_camera_world_tz() {
  derived_camera_world_tz_ = 0;
}
float SSL_GeometryCameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tz)
  return derived_camera_world_tz_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_tz(float value) {
  
  derived_camera_world_tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryData::kFieldFieldNumber;
const int SSL_GeometryData::kCalibFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryData::SSL_GeometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      calib_(from.calib_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::SSL_GeometryFieldSize(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryData)
}

void SSL_GeometryData::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:SSL_GeometryData)
  SharedDtor();
}

void SSL_GeometryData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete field_;
  }
}

void SSL_GeometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryData::descriptor() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryData& SSL_GeometryData::default_instance() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSL_GeometryData* SSL_GeometryData::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryData* n = new SSL_GeometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryData)
  calib_.Clear();
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
}

bool SSL_GeometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SSL_GeometryFieldSize field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calib()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryData)
  return false;
#undef DO_
}

void SSL_GeometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SSL_GeometryFieldSize field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0, n = this->calib_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->calib(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SSL_GeometryData)
}

::google::protobuf::uint8* SSL_GeometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SSL_GeometryFieldSize field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0, n = this->calib_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->calib(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryData)
  size_t total_size = 0;

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  {
    unsigned int count = this->calib_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calib(i));
    }
  }

  // .SSL_GeometryFieldSize field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryData)
    MergeFrom(*source);
  }
}

void SSL_GeometryData::MergeFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calib_.MergeFrom(from.calib_);
  if (from.has_field()) {
    mutable_field()->::SSL_GeometryFieldSize::MergeFrom(from.field());
  }
}

void SSL_GeometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  return true;
}

void SSL_GeometryData::Swap(SSL_GeometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  calib_.InternalSwap(&other->calib_);
  std::swap(field_, other->field_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryData::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryData

// .SSL_GeometryFieldSize field = 1;
bool SSL_GeometryData::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void SSL_GeometryData::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.field)
  return field_ != NULL ? *field_
                         : *::SSL_GeometryFieldSize::internal_default_instance();
}
::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::SSL_GeometryFieldSize;
  }
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.field)
  return field_;
}
::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  // @@protoc_insertion_point(field_release:SSL_GeometryData.field)
  
  ::SSL_GeometryFieldSize* temp = field_;
  field_ = NULL;
  return temp;
}
void SSL_GeometryData::set_allocated_field(::SSL_GeometryFieldSize* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
int SSL_GeometryData::calib_size() const {
  return calib_.size();
}
void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.calib)
  return calib_.Get(index);
}
::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.calib)
  return calib_.Mutable(index);
}
::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  // @@protoc_insertion_point(field_add:SSL_GeometryData.calib)
  return calib_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryData.calib)
  return &calib_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryData.calib)
  return calib_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
