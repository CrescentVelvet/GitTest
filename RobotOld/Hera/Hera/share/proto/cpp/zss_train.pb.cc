// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_train.proto

#include "zss_train.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ZSS {
namespace Protocol {
class TrainControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControl> _instance;
} _TrainControl_default_instance_;
class MessiInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessiInput> _instance;
} _MessiInput_default_instance_;
class MessiOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessiOutput> _instance;
} _MessiOutput_default_instance_;
}  // namespace Protocol
}  // namespace ZSS
static void InitDefaultsscc_info_MessiInput_zss_5ftrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_MessiInput_default_instance_;
    new (ptr) ::ZSS::Protocol::MessiInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::MessiInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessiInput_zss_5ftrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessiInput_zss_5ftrain_2eproto}, {}};

static void InitDefaultsscc_info_MessiOutput_zss_5ftrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_MessiOutput_default_instance_;
    new (ptr) ::ZSS::Protocol::MessiOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::MessiOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessiOutput_zss_5ftrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessiOutput_zss_5ftrain_2eproto}, {}};

static void InitDefaultsscc_info_TrainControl_zss_5ftrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_TrainControl_default_instance_;
    new (ptr) ::ZSS::Protocol::TrainControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::TrainControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControl_zss_5ftrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControl_zss_5ftrain_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zss_5ftrain_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zss_5ftrain_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zss_5ftrain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zss_5ftrain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::TrainControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::TrainControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::TrainControl, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiInput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiInput, enemy_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiInput, dist_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiInput, angel_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiOutput, vel_x_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiOutput, vel_y_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MessiOutput, vel_w_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::ZSS::Protocol::TrainControl)},
  { 7, 15, sizeof(::ZSS::Protocol::MessiInput)},
  { 18, 26, sizeof(::ZSS::Protocol::MessiOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_TrainControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_MessiInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_MessiOutput_default_instance_),
};

const char descriptor_table_protodef_zss_5ftrain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017zss_train.proto\022\014ZSS.Protocol\"x\n\014Train"
  "Control\022/\n\005state\030\001 \001(\0162 .ZSS.Protocol.Tr"
  "ainControl.State\"7\n\005State\022\t\n\005READY\020\000\022\007\n\003"
  "RUN\020\001\022\017\n\013CALC_REWARD\020\002\022\t\n\005RESET\020\003\"8\n\nMes"
  "siInput\022\r\n\005enemy\030\001 \001(\005\022\014\n\004dist\030\002 \001(\002\022\r\n\005"
  "angel\030\003 \001(\002\":\n\013MessiOutput\022\r\n\005vel_x\030\001 \001("
  "\002\022\r\n\005vel_y\030\002 \001(\002\022\r\n\005vel_w\030\003 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zss_5ftrain_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zss_5ftrain_2eproto_sccs[3] = {
  &scc_info_MessiInput_zss_5ftrain_2eproto.base,
  &scc_info_MessiOutput_zss_5ftrain_2eproto.base,
  &scc_info_TrainControl_zss_5ftrain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zss_5ftrain_2eproto_once;
static bool descriptor_table_zss_5ftrain_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5ftrain_2eproto = {
  &descriptor_table_zss_5ftrain_2eproto_initialized, descriptor_table_protodef_zss_5ftrain_2eproto, "zss_train.proto", 271,
  &descriptor_table_zss_5ftrain_2eproto_once, descriptor_table_zss_5ftrain_2eproto_sccs, descriptor_table_zss_5ftrain_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_zss_5ftrain_2eproto::offsets,
  file_level_metadata_zss_5ftrain_2eproto, 3, file_level_enum_descriptors_zss_5ftrain_2eproto, file_level_service_descriptors_zss_5ftrain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zss_5ftrain_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zss_5ftrain_2eproto), true);
namespace ZSS {
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrainControl_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zss_5ftrain_2eproto);
  return file_level_enum_descriptors_zss_5ftrain_2eproto[0];
}
bool TrainControl_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrainControl_State TrainControl::READY;
constexpr TrainControl_State TrainControl::RUN;
constexpr TrainControl_State TrainControl::CALC_REWARD;
constexpr TrainControl_State TrainControl::RESET;
constexpr TrainControl_State TrainControl::State_MIN;
constexpr TrainControl_State TrainControl::State_MAX;
constexpr int TrainControl::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TrainControl::InitAsDefaultInstance() {
}
class TrainControl::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControl>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainControl::TrainControl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.TrainControl)
}
TrainControl::TrainControl(const TrainControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.TrainControl)
}

void TrainControl::SharedCtor() {
  state_ = 0;
}

TrainControl::~TrainControl() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.TrainControl)
  SharedDtor();
}

void TrainControl::SharedDtor() {
}

void TrainControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControl& TrainControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControl_zss_5ftrain_2eproto.base);
  return *internal_default_instance();
}


void TrainControl::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.TrainControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrainControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ZSS.Protocol.TrainControl.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ZSS::Protocol::TrainControl_State_IsValid(val))) {
            _internal_set_state(static_cast<::ZSS::Protocol::TrainControl_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.TrainControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ZSS.Protocol.TrainControl.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.TrainControl)
  return target;
}

size_t TrainControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.TrainControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ZSS.Protocol.TrainControl.State state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.TrainControl)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.TrainControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.TrainControl)
    MergeFrom(*source);
  }
}

void TrainControl::MergeFrom(const TrainControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.TrainControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_set_state(from._internal_state());
  }
}

void TrainControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.TrainControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControl::CopyFrom(const TrainControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.TrainControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControl::IsInitialized() const {
  return true;
}

void TrainControl::InternalSwap(TrainControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessiInput::InitAsDefaultInstance() {
}
class MessiInput::_Internal {
 public:
  using HasBits = decltype(std::declval<MessiInput>()._has_bits_);
  static void set_has_enemy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MessiInput::MessiInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.MessiInput)
}
MessiInput::MessiInput(const MessiInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enemy_, &from.enemy_,
    static_cast<size_t>(reinterpret_cast<char*>(&angel_) -
    reinterpret_cast<char*>(&enemy_)) + sizeof(angel_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.MessiInput)
}

void MessiInput::SharedCtor() {
  ::memset(&enemy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angel_) -
      reinterpret_cast<char*>(&enemy_)) + sizeof(angel_));
}

MessiInput::~MessiInput() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.MessiInput)
  SharedDtor();
}

void MessiInput::SharedDtor() {
}

void MessiInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessiInput& MessiInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessiInput_zss_5ftrain_2eproto.base);
  return *internal_default_instance();
}


void MessiInput::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.MessiInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&enemy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angel_) -
        reinterpret_cast<char*>(&enemy_)) + sizeof(angel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessiInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 enemy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enemy(&has_bits);
          enemy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dist(&has_bits);
          dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_angel(&has_bits);
          angel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessiInput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.MessiInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 enemy = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_enemy(), target);
  }

  // optional float dist = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dist(), target);
  }

  // optional float angel = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.MessiInput)
  return target;
}

size_t MessiInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.MessiInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 enemy = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_enemy());
    }

    // optional float dist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float angel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessiInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.MessiInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MessiInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessiInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.MessiInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.MessiInput)
    MergeFrom(*source);
  }
}

void MessiInput::MergeFrom(const MessiInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.MessiInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      enemy_ = from.enemy_;
    }
    if (cached_has_bits & 0x00000002u) {
      dist_ = from.dist_;
    }
    if (cached_has_bits & 0x00000004u) {
      angel_ = from.angel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessiInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.MessiInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessiInput::CopyFrom(const MessiInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.MessiInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessiInput::IsInitialized() const {
  return true;
}

void MessiInput::InternalSwap(MessiInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enemy_, other->enemy_);
  swap(dist_, other->dist_);
  swap(angel_, other->angel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessiInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessiOutput::InitAsDefaultInstance() {
}
class MessiOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<MessiOutput>()._has_bits_);
  static void set_has_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vel_w(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MessiOutput::MessiOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.MessiOutput)
}
MessiOutput::MessiOutput(const MessiOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vel_x_, &from.vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&vel_w_) -
    reinterpret_cast<char*>(&vel_x_)) + sizeof(vel_w_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.MessiOutput)
}

void MessiOutput::SharedCtor() {
  ::memset(&vel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_w_) -
      reinterpret_cast<char*>(&vel_x_)) + sizeof(vel_w_));
}

MessiOutput::~MessiOutput() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.MessiOutput)
  SharedDtor();
}

void MessiOutput::SharedDtor() {
}

void MessiOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessiOutput& MessiOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessiOutput_zss_5ftrain_2eproto.base);
  return *internal_default_instance();
}


void MessiOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.MessiOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&vel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vel_w_) -
        reinterpret_cast<char*>(&vel_x_)) + sizeof(vel_w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessiOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float vel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_vel_x(&has_bits);
          vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_vel_y(&has_bits);
          vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_vel_w(&has_bits);
          vel_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessiOutput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.MessiOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vel_x(), target);
  }

  // optional float vel_y = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_vel_y(), target);
  }

  // optional float vel_w = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_vel_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.MessiOutput)
  return target;
}

size_t MessiOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.MessiOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float vel_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float vel_w = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessiOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.MessiOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const MessiOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessiOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.MessiOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.MessiOutput)
    MergeFrom(*source);
  }
}

void MessiOutput::MergeFrom(const MessiOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.MessiOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      vel_x_ = from.vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      vel_y_ = from.vel_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      vel_w_ = from.vel_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessiOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.MessiOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessiOutput::CopyFrom(const MessiOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.MessiOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessiOutput::IsInitialized() const {
  return true;
}

void MessiOutput::InternalSwap(MessiOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vel_x_, other->vel_x_);
  swap(vel_y_, other->vel_y_);
  swap(vel_w_, other->vel_w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessiOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::TrainControl* Arena::CreateMaybeMessage< ::ZSS::Protocol::TrainControl >(Arena* arena) {
  return Arena::CreateInternal< ::ZSS::Protocol::TrainControl >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::MessiInput* Arena::CreateMaybeMessage< ::ZSS::Protocol::MessiInput >(Arena* arena) {
  return Arena::CreateInternal< ::ZSS::Protocol::MessiInput >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::MessiOutput* Arena::CreateMaybeMessage< ::ZSS::Protocol::MessiOutput >(Arena* arena) {
  return Arena::CreateInternal< ::ZSS::Protocol::MessiOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
