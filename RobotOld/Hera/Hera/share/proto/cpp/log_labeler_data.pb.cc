// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_labeler_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_labeler_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class LabelerMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelerMetadata> {
} _LabelerMetadata_default_instance_;
class LabelerFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelerFrame> {
  public:
  const ::SSL_WrapperPacket* vision_frame_;
  const ::Referee* referee_frame_;
} _LabelerFrame_default_instance_;
class LabelerFrameGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelerFrameGroup> {
} _LabelerFrameGroup_default_instance_;

namespace protobuf_log_5flabeler_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerMetadata, num_cameras_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerMetadata, message_offsets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerFrame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerFrame, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LabelerFrame_default_instance_), vision_frame_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LabelerFrame_default_instance_), referee_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerFrame, frame_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerFrameGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelerFrameGroup, frames_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LabelerMetadata)},
  { 7, -1, sizeof(LabelerFrame)},
  { 16, -1, sizeof(LabelerFrameGroup)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelerMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelerFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelerFrameGroup_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "log_labeler_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _LabelerMetadata_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LabelerFrame_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LabelerFrameGroup_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_messages_5frobocup_5fssl_5fwrapper_2eproto::InitDefaults();
  ::protobuf_ssl_5freferee_2eproto::InitDefaults();
  _LabelerMetadata_default_instance_.DefaultConstruct();
  _LabelerFrame_default_instance_.DefaultConstruct();
  _LabelerFrameGroup_default_instance_.DefaultConstruct();
  _LabelerFrame_default_instance_.vision_frame_ = const_cast< ::SSL_WrapperPacket*>(
      ::SSL_WrapperPacket::internal_default_instance());
  _LabelerFrame_default_instance_.referee_frame_ = const_cast< ::Referee*>(
      ::Referee::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026log_labeler_data.proto\032\"messages_roboc"
      "up_ssl_wrapper.proto\032\021ssl_referee.proto\""
      "\?\n\017LabelerMetadata\022\023\n\013num_cameras\030\001 \001(\r\022"
      "\027\n\017message_offsets\030\002 \003(\004\"y\n\014LabelerFrame"
      "\022\021\n\ttimestamp\030\001 \001(\004\022*\n\014vision_frame\030\002 \001("
      "\0132\022.SSL_WrapperPacketH\000\022!\n\rreferee_frame"
      "\030\003 \001(\0132\010.RefereeH\000B\007\n\005frame\"2\n\021LabelerFr"
      "ameGroup\022\035\n\006frames\030\001 \003(\0132\r.LabelerFrameb"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_labeler_data.proto", &protobuf_RegisterTypes);
  ::protobuf_messages_5frobocup_5fssl_5fwrapper_2eproto::AddDescriptors();
  ::protobuf_ssl_5freferee_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_log_5flabeler_5fdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelerMetadata::kNumCamerasFieldNumber;
const int LabelerMetadata::kMessageOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelerMetadata::LabelerMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5flabeler_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabelerMetadata)
}
LabelerMetadata::LabelerMetadata(const LabelerMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      message_offsets_(from.message_offsets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_cameras_ = from.num_cameras_;
  // @@protoc_insertion_point(copy_constructor:LabelerMetadata)
}

void LabelerMetadata::SharedCtor() {
  num_cameras_ = 0u;
  _cached_size_ = 0;
}

LabelerMetadata::~LabelerMetadata() {
  // @@protoc_insertion_point(destructor:LabelerMetadata)
  SharedDtor();
}

void LabelerMetadata::SharedDtor() {
}

void LabelerMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelerMetadata::descriptor() {
  protobuf_log_5flabeler_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabeler_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelerMetadata& LabelerMetadata::default_instance() {
  protobuf_log_5flabeler_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelerMetadata* LabelerMetadata::New(::google::protobuf::Arena* arena) const {
  LabelerMetadata* n = new LabelerMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelerMetadata)
  message_offsets_.Clear();
  num_cameras_ = 0u;
}

bool LabelerMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabelerMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_cameras = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cameras_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 message_offsets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_message_offsets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_message_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabelerMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabelerMetadata)
  return false;
#undef DO_
}

void LabelerMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabelerMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_cameras = 1;
  if (this->num_cameras() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_cameras(), output);
  }

  // repeated uint64 message_offsets = 2;
  if (this->message_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_message_offsets_cached_byte_size_);
  }
  for (int i = 0, n = this->message_offsets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->message_offsets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:LabelerMetadata)
}

::google::protobuf::uint8* LabelerMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelerMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_cameras = 1;
  if (this->num_cameras() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_cameras(), target);
  }

  // repeated uint64 message_offsets = 2;
  if (this->message_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _message_offsets_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->message_offsets_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LabelerMetadata)
  return target;
}

size_t LabelerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelerMetadata)
  size_t total_size = 0;

  // repeated uint64 message_offsets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->message_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _message_offsets_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 num_cameras = 1;
  if (this->num_cameras() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_cameras());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelerMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelerMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelerMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelerMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelerMetadata)
    MergeFrom(*source);
  }
}

void LabelerMetadata::MergeFrom(const LabelerMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_offsets_.MergeFrom(from.message_offsets_);
  if (from.num_cameras() != 0) {
    set_num_cameras(from.num_cameras());
  }
}

void LabelerMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelerMetadata::CopyFrom(const LabelerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelerMetadata::IsInitialized() const {
  return true;
}

void LabelerMetadata::Swap(LabelerMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelerMetadata::InternalSwap(LabelerMetadata* other) {
  message_offsets_.InternalSwap(&other->message_offsets_);
  std::swap(num_cameras_, other->num_cameras_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelerMetadata::GetMetadata() const {
  protobuf_log_5flabeler_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabeler_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelerMetadata

// uint32 num_cameras = 1;
void LabelerMetadata::clear_num_cameras() {
  num_cameras_ = 0u;
}
::google::protobuf::uint32 LabelerMetadata::num_cameras() const {
  // @@protoc_insertion_point(field_get:LabelerMetadata.num_cameras)
  return num_cameras_;
}
void LabelerMetadata::set_num_cameras(::google::protobuf::uint32 value) {
  
  num_cameras_ = value;
  // @@protoc_insertion_point(field_set:LabelerMetadata.num_cameras)
}

// repeated uint64 message_offsets = 2;
int LabelerMetadata::message_offsets_size() const {
  return message_offsets_.size();
}
void LabelerMetadata::clear_message_offsets() {
  message_offsets_.Clear();
}
::google::protobuf::uint64 LabelerMetadata::message_offsets(int index) const {
  // @@protoc_insertion_point(field_get:LabelerMetadata.message_offsets)
  return message_offsets_.Get(index);
}
void LabelerMetadata::set_message_offsets(int index, ::google::protobuf::uint64 value) {
  message_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:LabelerMetadata.message_offsets)
}
void LabelerMetadata::add_message_offsets(::google::protobuf::uint64 value) {
  message_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:LabelerMetadata.message_offsets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LabelerMetadata::message_offsets() const {
  // @@protoc_insertion_point(field_list:LabelerMetadata.message_offsets)
  return message_offsets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LabelerMetadata::mutable_message_offsets() {
  // @@protoc_insertion_point(field_mutable_list:LabelerMetadata.message_offsets)
  return &message_offsets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelerFrame::kTimestampFieldNumber;
const int LabelerFrame::kVisionFrameFieldNumber;
const int LabelerFrame::kRefereeFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelerFrame::LabelerFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5flabeler_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabelerFrame)
}
LabelerFrame::LabelerFrame(const LabelerFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  clear_has_frame();
  switch (from.frame_case()) {
    case kVisionFrame: {
      mutable_vision_frame()->::SSL_WrapperPacket::MergeFrom(from.vision_frame());
      break;
    }
    case kRefereeFrame: {
      mutable_referee_frame()->::Referee::MergeFrom(from.referee_frame());
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LabelerFrame)
}

void LabelerFrame::SharedCtor() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_frame();
  _cached_size_ = 0;
}

LabelerFrame::~LabelerFrame() {
  // @@protoc_insertion_point(destructor:LabelerFrame)
  SharedDtor();
}

void LabelerFrame::SharedDtor() {
  if (has_frame()) {
    clear_frame();
  }
}

void LabelerFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelerFrame::descriptor() {
  protobuf_log_5flabeler_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabeler_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelerFrame& LabelerFrame::default_instance() {
  protobuf_log_5flabeler_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelerFrame* LabelerFrame::New(::google::protobuf::Arena* arena) const {
  LabelerFrame* n = new LabelerFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelerFrame::clear_frame() {
// @@protoc_insertion_point(one_of_clear_start:LabelerFrame)
  switch (frame_case()) {
    case kVisionFrame: {
      delete frame_.vision_frame_;
      break;
    }
    case kRefereeFrame: {
      delete frame_.referee_frame_;
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FRAME_NOT_SET;
}


void LabelerFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelerFrame)
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_frame();
}

bool LabelerFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabelerFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SSL_WrapperPacket vision_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vision_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Referee referee_frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referee_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabelerFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabelerFrame)
  return false;
#undef DO_
}

void LabelerFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabelerFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // .SSL_WrapperPacket vision_frame = 2;
  if (has_vision_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *frame_.vision_frame_, output);
  }

  // .Referee referee_frame = 3;
  if (has_referee_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *frame_.referee_frame_, output);
  }

  // @@protoc_insertion_point(serialize_end:LabelerFrame)
}

::google::protobuf::uint8* LabelerFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelerFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // .SSL_WrapperPacket vision_frame = 2;
  if (has_vision_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *frame_.vision_frame_, deterministic, target);
  }

  // .Referee referee_frame = 3;
  if (has_referee_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *frame_.referee_frame_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LabelerFrame)
  return target;
}

size_t LabelerFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelerFrame)
  size_t total_size = 0;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  switch (frame_case()) {
    // .SSL_WrapperPacket vision_frame = 2;
    case kVisionFrame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *frame_.vision_frame_);
      break;
    }
    // .Referee referee_frame = 3;
    case kRefereeFrame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *frame_.referee_frame_);
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelerFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelerFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelerFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelerFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelerFrame)
    MergeFrom(*source);
  }
}

void LabelerFrame::MergeFrom(const LabelerFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.frame_case()) {
    case kVisionFrame: {
      mutable_vision_frame()->::SSL_WrapperPacket::MergeFrom(from.vision_frame());
      break;
    }
    case kRefereeFrame: {
      mutable_referee_frame()->::Referee::MergeFrom(from.referee_frame());
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
}

void LabelerFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelerFrame::CopyFrom(const LabelerFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelerFrame::IsInitialized() const {
  switch (frame_case()) {
    case kVisionFrame: {
      if (has_vision_frame()) {
        if (!this->vision_frame().IsInitialized()) return false;
      }
      break;
    }
    case kRefereeFrame: {
      if (has_referee_frame()) {
        if (!this->referee_frame().IsInitialized()) return false;
      }
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
  return true;
}

void LabelerFrame::Swap(LabelerFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelerFrame::InternalSwap(LabelerFrame* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(frame_, other->frame_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelerFrame::GetMetadata() const {
  protobuf_log_5flabeler_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabeler_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelerFrame

// uint64 timestamp = 1;
void LabelerFrame::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LabelerFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:LabelerFrame.timestamp)
  return timestamp_;
}
void LabelerFrame::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LabelerFrame.timestamp)
}

// .SSL_WrapperPacket vision_frame = 2;
bool LabelerFrame::has_vision_frame() const {
  return frame_case() == kVisionFrame;
}
void LabelerFrame::set_has_vision_frame() {
  _oneof_case_[0] = kVisionFrame;
}
void LabelerFrame::clear_vision_frame() {
  if (has_vision_frame()) {
    delete frame_.vision_frame_;
    clear_has_frame();
  }
}
 const ::SSL_WrapperPacket& LabelerFrame::vision_frame() const {
  // @@protoc_insertion_point(field_get:LabelerFrame.vision_frame)
  return has_vision_frame()
      ? *frame_.vision_frame_
      : ::SSL_WrapperPacket::default_instance();
}
::SSL_WrapperPacket* LabelerFrame::mutable_vision_frame() {
  if (!has_vision_frame()) {
    clear_frame();
    set_has_vision_frame();
    frame_.vision_frame_ = new ::SSL_WrapperPacket;
  }
  // @@protoc_insertion_point(field_mutable:LabelerFrame.vision_frame)
  return frame_.vision_frame_;
}
::SSL_WrapperPacket* LabelerFrame::release_vision_frame() {
  // @@protoc_insertion_point(field_release:LabelerFrame.vision_frame)
  if (has_vision_frame()) {
    clear_has_frame();
    ::SSL_WrapperPacket* temp = frame_.vision_frame_;
    frame_.vision_frame_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LabelerFrame::set_allocated_vision_frame(::SSL_WrapperPacket* vision_frame) {
  clear_frame();
  if (vision_frame) {
    set_has_vision_frame();
    frame_.vision_frame_ = vision_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:LabelerFrame.vision_frame)
}

// .Referee referee_frame = 3;
bool LabelerFrame::has_referee_frame() const {
  return frame_case() == kRefereeFrame;
}
void LabelerFrame::set_has_referee_frame() {
  _oneof_case_[0] = kRefereeFrame;
}
void LabelerFrame::clear_referee_frame() {
  if (has_referee_frame()) {
    delete frame_.referee_frame_;
    clear_has_frame();
  }
}
 const ::Referee& LabelerFrame::referee_frame() const {
  // @@protoc_insertion_point(field_get:LabelerFrame.referee_frame)
  return has_referee_frame()
      ? *frame_.referee_frame_
      : ::Referee::default_instance();
}
::Referee* LabelerFrame::mutable_referee_frame() {
  if (!has_referee_frame()) {
    clear_frame();
    set_has_referee_frame();
    frame_.referee_frame_ = new ::Referee;
  }
  // @@protoc_insertion_point(field_mutable:LabelerFrame.referee_frame)
  return frame_.referee_frame_;
}
::Referee* LabelerFrame::release_referee_frame() {
  // @@protoc_insertion_point(field_release:LabelerFrame.referee_frame)
  if (has_referee_frame()) {
    clear_has_frame();
    ::Referee* temp = frame_.referee_frame_;
    frame_.referee_frame_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LabelerFrame::set_allocated_referee_frame(::Referee* referee_frame) {
  clear_frame();
  if (referee_frame) {
    set_has_referee_frame();
    frame_.referee_frame_ = referee_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:LabelerFrame.referee_frame)
}

bool LabelerFrame::has_frame() const {
  return frame_case() != FRAME_NOT_SET;
}
void LabelerFrame::clear_has_frame() {
  _oneof_case_[0] = FRAME_NOT_SET;
}
LabelerFrame::FrameCase LabelerFrame::frame_case() const {
  return LabelerFrame::FrameCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelerFrameGroup::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelerFrameGroup::LabelerFrameGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5flabeler_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabelerFrameGroup)
}
LabelerFrameGroup::LabelerFrameGroup(const LabelerFrameGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      frames_(from.frames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabelerFrameGroup)
}

void LabelerFrameGroup::SharedCtor() {
  _cached_size_ = 0;
}

LabelerFrameGroup::~LabelerFrameGroup() {
  // @@protoc_insertion_point(destructor:LabelerFrameGroup)
  SharedDtor();
}

void LabelerFrameGroup::SharedDtor() {
}

void LabelerFrameGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelerFrameGroup::descriptor() {
  protobuf_log_5flabeler_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabeler_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelerFrameGroup& LabelerFrameGroup::default_instance() {
  protobuf_log_5flabeler_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelerFrameGroup* LabelerFrameGroup::New(::google::protobuf::Arena* arena) const {
  LabelerFrameGroup* n = new LabelerFrameGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelerFrameGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelerFrameGroup)
  frames_.Clear();
}

bool LabelerFrameGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabelerFrameGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LabelerFrame frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabelerFrameGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabelerFrameGroup)
  return false;
#undef DO_
}

void LabelerFrameGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabelerFrameGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LabelerFrame frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }

  // @@protoc_insertion_point(serialize_end:LabelerFrameGroup)
}

::google::protobuf::uint8* LabelerFrameGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelerFrameGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LabelerFrame frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->frames(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LabelerFrameGroup)
  return target;
}

size_t LabelerFrameGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelerFrameGroup)
  size_t total_size = 0;

  // repeated .LabelerFrame frames = 1;
  {
    unsigned int count = this->frames_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frames(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelerFrameGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelerFrameGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelerFrameGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelerFrameGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelerFrameGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelerFrameGroup)
    MergeFrom(*source);
  }
}

void LabelerFrameGroup::MergeFrom(const LabelerFrameGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelerFrameGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void LabelerFrameGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelerFrameGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelerFrameGroup::CopyFrom(const LabelerFrameGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelerFrameGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelerFrameGroup::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->frames())) return false;
  return true;
}

void LabelerFrameGroup::Swap(LabelerFrameGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelerFrameGroup::InternalSwap(LabelerFrameGroup* other) {
  frames_.InternalSwap(&other->frames_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelerFrameGroup::GetMetadata() const {
  protobuf_log_5flabeler_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabeler_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelerFrameGroup

// repeated .LabelerFrame frames = 1;
int LabelerFrameGroup::frames_size() const {
  return frames_.size();
}
void LabelerFrameGroup::clear_frames() {
  frames_.Clear();
}
const ::LabelerFrame& LabelerFrameGroup::frames(int index) const {
  // @@protoc_insertion_point(field_get:LabelerFrameGroup.frames)
  return frames_.Get(index);
}
::LabelerFrame* LabelerFrameGroup::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:LabelerFrameGroup.frames)
  return frames_.Mutable(index);
}
::LabelerFrame* LabelerFrameGroup::add_frames() {
  // @@protoc_insertion_point(field_add:LabelerFrameGroup.frames)
  return frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::LabelerFrame >*
LabelerFrameGroup::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:LabelerFrameGroup.frames)
  return &frames_;
}
const ::google::protobuf::RepeatedPtrField< ::LabelerFrame >&
LabelerFrameGroup::frames() const {
  // @@protoc_insertion_point(field_list:LabelerFrameGroup.frames)
  return frames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
