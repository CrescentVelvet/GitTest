// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_labels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_labels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class DribblingLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DribblingLabel> {
} _DribblingLabel_default_instance_;
class BallPossessionLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BallPossessionLabel> {
} _BallPossessionLabel_default_instance_;
class PassingLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PassingLabel> {
} _PassingLabel_default_instance_;
class GoalShotLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GoalShotLabel> {
} _GoalShotLabel_default_instance_;
class LabelsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Labels> {
} _Labels_default_instance_;

namespace protobuf_log_5flabels_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DribblingLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DribblingLabel, is_dribbling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DribblingLabel, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DribblingLabel, team_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPossessionLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPossessionLabel, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPossessionLabel, robot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassingLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassingLabel, start_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassingLabel, end_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassingLabel, successful_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassingLabel, passer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassingLabel, passer_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassingLabel, receiver_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalShotLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalShotLabel, start_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalShotLabel, end_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalShotLabel, successful_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalShotLabel, shooter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalShotLabel, shooter_team_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, dribbling_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, ball_possession_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, passing_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, goal_shot_labels_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DribblingLabel)},
  { 8, -1, sizeof(BallPossessionLabel)},
  { 15, -1, sizeof(PassingLabel)},
  { 26, -1, sizeof(GoalShotLabel)},
  { 36, -1, sizeof(Labels)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DribblingLabel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BallPossessionLabel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PassingLabel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GoalShotLabel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Labels_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "log_labels.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _DribblingLabel_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BallPossessionLabel_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PassingLabel_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GoalShotLabel_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Labels_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DribblingLabel_default_instance_.DefaultConstruct();
  _BallPossessionLabel_default_instance_.DefaultConstruct();
  _PassingLabel_default_instance_.DefaultConstruct();
  _GoalShotLabel_default_instance_.DefaultConstruct();
  _Labels_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020log_labels.proto\"R\n\016DribblingLabel\022\024\n\014"
      "is_dribbling\030\001 \001(\010\022\020\n\010robot_id\030\002 \001(\r\022\030\n\004"
      "team\030\003 \001(\0162\n.TeamColor\"\211\001\n\023BallPossessio"
      "nLabel\022)\n\005state\030\001 \001(\0162\032.BallPossessionLa"
      "bel.State\022\020\n\010robot_id\030\002 \001(\r\"5\n\005State\022\010\n\004"
      "NONE\020\000\022\021\n\rYELLOW_POSSES\020\001\022\017\n\013BLUE_POSSES"
      "\020\002\"\223\001\n\014PassingLabel\022\023\n\013start_frame\030\001 \001(\004"
      "\022\021\n\tend_frame\030\002 \001(\004\022\022\n\nsuccessful\030\003 \001(\010\022"
      "\021\n\tpasser_id\030\004 \001(\r\022\037\n\013passer_team\030\005 \001(\0162"
      "\n.TeamColor\022\023\n\013receiver_id\030\006 \001(\r\"\201\001\n\rGoa"
      "lShotLabel\022\023\n\013start_frame\030\001 \001(\004\022\021\n\tend_f"
      "rame\030\002 \001(\004\022\022\n\nsuccessful\030\003 \001(\010\022\022\n\nshoote"
      "r_id\030\004 \001(\r\022 \n\014shooter_team\030\005 \001(\0162\n.TeamC"
      "olor\"\272\001\n\006Labels\022)\n\020dribbling_labels\030\001 \003("
      "\0132\017.DribblingLabel\0224\n\026ball_possession_la"
      "bels\030\002 \003(\0132\024.BallPossessionLabel\022%\n\016pass"
      "ing_labels\030\003 \003(\0132\r.PassingLabel\022(\n\020goal_"
      "shot_labels\030\004 \003(\0132\016.GoalShotLabel*)\n\tTea"
      "mColor\022\016\n\nTeamYELLOW\020\000\022\014\n\010TeamBLUE\020\001b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 764);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_labels.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_log_5flabels_2eproto

const ::google::protobuf::EnumDescriptor* BallPossessionLabel_State_descriptor() {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_enum_descriptors[0];
}
bool BallPossessionLabel_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BallPossessionLabel_State BallPossessionLabel::NONE;
const BallPossessionLabel_State BallPossessionLabel::YELLOW_POSSES;
const BallPossessionLabel_State BallPossessionLabel::BLUE_POSSES;
const BallPossessionLabel_State BallPossessionLabel::State_MIN;
const BallPossessionLabel_State BallPossessionLabel::State_MAX;
const int BallPossessionLabel::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TeamColor_descriptor() {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_enum_descriptors[1];
}
bool TeamColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DribblingLabel::kIsDribblingFieldNumber;
const int DribblingLabel::kRobotIdFieldNumber;
const int DribblingLabel::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DribblingLabel::DribblingLabel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5flabels_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DribblingLabel)
}
DribblingLabel::DribblingLabel(const DribblingLabel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_dribbling_, &from.is_dribbling_,
    reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&is_dribbling_) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:DribblingLabel)
}

void DribblingLabel::SharedCtor() {
  ::memset(&is_dribbling_, 0, reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&is_dribbling_) + sizeof(team_));
  _cached_size_ = 0;
}

DribblingLabel::~DribblingLabel() {
  // @@protoc_insertion_point(destructor:DribblingLabel)
  SharedDtor();
}

void DribblingLabel::SharedDtor() {
}

void DribblingLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DribblingLabel::descriptor() {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DribblingLabel& DribblingLabel::default_instance() {
  protobuf_log_5flabels_2eproto::InitDefaults();
  return *internal_default_instance();
}

DribblingLabel* DribblingLabel::New(::google::protobuf::Arena* arena) const {
  DribblingLabel* n = new DribblingLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DribblingLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:DribblingLabel)
  ::memset(&is_dribbling_, 0, reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&is_dribbling_) + sizeof(team_));
}

bool DribblingLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DribblingLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_dribbling = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dribbling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TeamColor team = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_team(static_cast< ::TeamColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DribblingLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DribblingLabel)
  return false;
#undef DO_
}

void DribblingLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DribblingLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dribbling = 1;
  if (this->is_dribbling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_dribbling(), output);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  // .TeamColor team = 3;
  if (this->team() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }

  // @@protoc_insertion_point(serialize_end:DribblingLabel)
}

::google::protobuf::uint8* DribblingLabel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DribblingLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dribbling = 1;
  if (this->is_dribbling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_dribbling(), target);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  // .TeamColor team = 3;
  if (this->team() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DribblingLabel)
  return target;
}

size_t DribblingLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DribblingLabel)
  size_t total_size = 0;

  // bool is_dribbling = 1;
  if (this->is_dribbling() != 0) {
    total_size += 1 + 1;
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // .TeamColor team = 3;
  if (this->team() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DribblingLabel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DribblingLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const DribblingLabel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DribblingLabel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DribblingLabel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DribblingLabel)
    MergeFrom(*source);
  }
}

void DribblingLabel::MergeFrom(const DribblingLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DribblingLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_dribbling() != 0) {
    set_is_dribbling(from.is_dribbling());
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.team() != 0) {
    set_team(from.team());
  }
}

void DribblingLabel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DribblingLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DribblingLabel::CopyFrom(const DribblingLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DribblingLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DribblingLabel::IsInitialized() const {
  return true;
}

void DribblingLabel::Swap(DribblingLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DribblingLabel::InternalSwap(DribblingLabel* other) {
  std::swap(is_dribbling_, other->is_dribbling_);
  std::swap(robot_id_, other->robot_id_);
  std::swap(team_, other->team_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DribblingLabel::GetMetadata() const {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DribblingLabel

// bool is_dribbling = 1;
void DribblingLabel::clear_is_dribbling() {
  is_dribbling_ = false;
}
bool DribblingLabel::is_dribbling() const {
  // @@protoc_insertion_point(field_get:DribblingLabel.is_dribbling)
  return is_dribbling_;
}
void DribblingLabel::set_is_dribbling(bool value) {
  
  is_dribbling_ = value;
  // @@protoc_insertion_point(field_set:DribblingLabel.is_dribbling)
}

// uint32 robot_id = 2;
void DribblingLabel::clear_robot_id() {
  robot_id_ = 0u;
}
::google::protobuf::uint32 DribblingLabel::robot_id() const {
  // @@protoc_insertion_point(field_get:DribblingLabel.robot_id)
  return robot_id_;
}
void DribblingLabel::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:DribblingLabel.robot_id)
}

// .TeamColor team = 3;
void DribblingLabel::clear_team() {
  team_ = 0;
}
::TeamColor DribblingLabel::team() const {
  // @@protoc_insertion_point(field_get:DribblingLabel.team)
  return static_cast< ::TeamColor >(team_);
}
void DribblingLabel::set_team(::TeamColor value) {
  
  team_ = value;
  // @@protoc_insertion_point(field_set:DribblingLabel.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallPossessionLabel::kStateFieldNumber;
const int BallPossessionLabel::kRobotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallPossessionLabel::BallPossessionLabel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5flabels_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BallPossessionLabel)
}
BallPossessionLabel::BallPossessionLabel(const BallPossessionLabel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    reinterpret_cast<char*>(&robot_id_) -
    reinterpret_cast<char*>(&state_) + sizeof(robot_id_));
  // @@protoc_insertion_point(copy_constructor:BallPossessionLabel)
}

void BallPossessionLabel::SharedCtor() {
  ::memset(&state_, 0, reinterpret_cast<char*>(&robot_id_) -
    reinterpret_cast<char*>(&state_) + sizeof(robot_id_));
  _cached_size_ = 0;
}

BallPossessionLabel::~BallPossessionLabel() {
  // @@protoc_insertion_point(destructor:BallPossessionLabel)
  SharedDtor();
}

void BallPossessionLabel::SharedDtor() {
}

void BallPossessionLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallPossessionLabel::descriptor() {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallPossessionLabel& BallPossessionLabel::default_instance() {
  protobuf_log_5flabels_2eproto::InitDefaults();
  return *internal_default_instance();
}

BallPossessionLabel* BallPossessionLabel::New(::google::protobuf::Arena* arena) const {
  BallPossessionLabel* n = new BallPossessionLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallPossessionLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:BallPossessionLabel)
  ::memset(&state_, 0, reinterpret_cast<char*>(&robot_id_) -
    reinterpret_cast<char*>(&state_) + sizeof(robot_id_));
}

bool BallPossessionLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BallPossessionLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BallPossessionLabel.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::BallPossessionLabel_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BallPossessionLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BallPossessionLabel)
  return false;
#undef DO_
}

void BallPossessionLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BallPossessionLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BallPossessionLabel.State state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:BallPossessionLabel)
}

::google::protobuf::uint8* BallPossessionLabel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BallPossessionLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BallPossessionLabel.State state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BallPossessionLabel)
  return target;
}

size_t BallPossessionLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BallPossessionLabel)
  size_t total_size = 0;

  // .BallPossessionLabel.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallPossessionLabel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BallPossessionLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const BallPossessionLabel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallPossessionLabel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BallPossessionLabel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BallPossessionLabel)
    MergeFrom(*source);
  }
}

void BallPossessionLabel::MergeFrom(const BallPossessionLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BallPossessionLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
}

void BallPossessionLabel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BallPossessionLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallPossessionLabel::CopyFrom(const BallPossessionLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BallPossessionLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallPossessionLabel::IsInitialized() const {
  return true;
}

void BallPossessionLabel::Swap(BallPossessionLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallPossessionLabel::InternalSwap(BallPossessionLabel* other) {
  std::swap(state_, other->state_);
  std::swap(robot_id_, other->robot_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallPossessionLabel::GetMetadata() const {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallPossessionLabel

// .BallPossessionLabel.State state = 1;
void BallPossessionLabel::clear_state() {
  state_ = 0;
}
::BallPossessionLabel_State BallPossessionLabel::state() const {
  // @@protoc_insertion_point(field_get:BallPossessionLabel.state)
  return static_cast< ::BallPossessionLabel_State >(state_);
}
void BallPossessionLabel::set_state(::BallPossessionLabel_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:BallPossessionLabel.state)
}

// uint32 robot_id = 2;
void BallPossessionLabel::clear_robot_id() {
  robot_id_ = 0u;
}
::google::protobuf::uint32 BallPossessionLabel::robot_id() const {
  // @@protoc_insertion_point(field_get:BallPossessionLabel.robot_id)
  return robot_id_;
}
void BallPossessionLabel::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:BallPossessionLabel.robot_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassingLabel::kStartFrameFieldNumber;
const int PassingLabel::kEndFrameFieldNumber;
const int PassingLabel::kSuccessfulFieldNumber;
const int PassingLabel::kPasserIdFieldNumber;
const int PassingLabel::kPasserTeamFieldNumber;
const int PassingLabel::kReceiverIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassingLabel::PassingLabel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5flabels_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PassingLabel)
}
PassingLabel::PassingLabel(const PassingLabel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_frame_, &from.start_frame_,
    reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&start_frame_) + sizeof(receiver_id_));
  // @@protoc_insertion_point(copy_constructor:PassingLabel)
}

void PassingLabel::SharedCtor() {
  ::memset(&start_frame_, 0, reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&start_frame_) + sizeof(receiver_id_));
  _cached_size_ = 0;
}

PassingLabel::~PassingLabel() {
  // @@protoc_insertion_point(destructor:PassingLabel)
  SharedDtor();
}

void PassingLabel::SharedDtor() {
}

void PassingLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassingLabel::descriptor() {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PassingLabel& PassingLabel::default_instance() {
  protobuf_log_5flabels_2eproto::InitDefaults();
  return *internal_default_instance();
}

PassingLabel* PassingLabel::New(::google::protobuf::Arena* arena) const {
  PassingLabel* n = new PassingLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PassingLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:PassingLabel)
  ::memset(&start_frame_, 0, reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&start_frame_) + sizeof(receiver_id_));
}

bool PassingLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PassingLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool successful = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 passer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TeamColor passer_team = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_passer_team(static_cast< ::TeamColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 receiver_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PassingLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PassingLabel)
  return false;
#undef DO_
}

void PassingLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PassingLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_frame(), output);
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_frame(), output);
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->successful(), output);
  }

  // uint32 passer_id = 4;
  if (this->passer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->passer_id(), output);
  }

  // .TeamColor passer_team = 5;
  if (this->passer_team() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->passer_team(), output);
  }

  // uint32 receiver_id = 6;
  if (this->receiver_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->receiver_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:PassingLabel)
}

::google::protobuf::uint8* PassingLabel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassingLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_frame(), target);
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_frame(), target);
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->successful(), target);
  }

  // uint32 passer_id = 4;
  if (this->passer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->passer_id(), target);
  }

  // .TeamColor passer_team = 5;
  if (this->passer_team() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->passer_team(), target);
  }

  // uint32 receiver_id = 6;
  if (this->receiver_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->receiver_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PassingLabel)
  return target;
}

size_t PassingLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PassingLabel)
  size_t total_size = 0;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_frame());
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_frame());
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    total_size += 1 + 1;
  }

  // uint32 passer_id = 4;
  if (this->passer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->passer_id());
  }

  // .TeamColor passer_team = 5;
  if (this->passer_team() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->passer_team());
  }

  // uint32 receiver_id = 6;
  if (this->receiver_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receiver_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassingLabel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PassingLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const PassingLabel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PassingLabel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PassingLabel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PassingLabel)
    MergeFrom(*source);
  }
}

void PassingLabel::MergeFrom(const PassingLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PassingLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_frame() != 0) {
    set_start_frame(from.start_frame());
  }
  if (from.end_frame() != 0) {
    set_end_frame(from.end_frame());
  }
  if (from.successful() != 0) {
    set_successful(from.successful());
  }
  if (from.passer_id() != 0) {
    set_passer_id(from.passer_id());
  }
  if (from.passer_team() != 0) {
    set_passer_team(from.passer_team());
  }
  if (from.receiver_id() != 0) {
    set_receiver_id(from.receiver_id());
  }
}

void PassingLabel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PassingLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassingLabel::CopyFrom(const PassingLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PassingLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassingLabel::IsInitialized() const {
  return true;
}

void PassingLabel::Swap(PassingLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassingLabel::InternalSwap(PassingLabel* other) {
  std::swap(start_frame_, other->start_frame_);
  std::swap(end_frame_, other->end_frame_);
  std::swap(successful_, other->successful_);
  std::swap(passer_id_, other->passer_id_);
  std::swap(passer_team_, other->passer_team_);
  std::swap(receiver_id_, other->receiver_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PassingLabel::GetMetadata() const {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PassingLabel

// uint64 start_frame = 1;
void PassingLabel::clear_start_frame() {
  start_frame_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PassingLabel::start_frame() const {
  // @@protoc_insertion_point(field_get:PassingLabel.start_frame)
  return start_frame_;
}
void PassingLabel::set_start_frame(::google::protobuf::uint64 value) {
  
  start_frame_ = value;
  // @@protoc_insertion_point(field_set:PassingLabel.start_frame)
}

// uint64 end_frame = 2;
void PassingLabel::clear_end_frame() {
  end_frame_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PassingLabel::end_frame() const {
  // @@protoc_insertion_point(field_get:PassingLabel.end_frame)
  return end_frame_;
}
void PassingLabel::set_end_frame(::google::protobuf::uint64 value) {
  
  end_frame_ = value;
  // @@protoc_insertion_point(field_set:PassingLabel.end_frame)
}

// bool successful = 3;
void PassingLabel::clear_successful() {
  successful_ = false;
}
bool PassingLabel::successful() const {
  // @@protoc_insertion_point(field_get:PassingLabel.successful)
  return successful_;
}
void PassingLabel::set_successful(bool value) {
  
  successful_ = value;
  // @@protoc_insertion_point(field_set:PassingLabel.successful)
}

// uint32 passer_id = 4;
void PassingLabel::clear_passer_id() {
  passer_id_ = 0u;
}
::google::protobuf::uint32 PassingLabel::passer_id() const {
  // @@protoc_insertion_point(field_get:PassingLabel.passer_id)
  return passer_id_;
}
void PassingLabel::set_passer_id(::google::protobuf::uint32 value) {
  
  passer_id_ = value;
  // @@protoc_insertion_point(field_set:PassingLabel.passer_id)
}

// .TeamColor passer_team = 5;
void PassingLabel::clear_passer_team() {
  passer_team_ = 0;
}
::TeamColor PassingLabel::passer_team() const {
  // @@protoc_insertion_point(field_get:PassingLabel.passer_team)
  return static_cast< ::TeamColor >(passer_team_);
}
void PassingLabel::set_passer_team(::TeamColor value) {
  
  passer_team_ = value;
  // @@protoc_insertion_point(field_set:PassingLabel.passer_team)
}

// uint32 receiver_id = 6;
void PassingLabel::clear_receiver_id() {
  receiver_id_ = 0u;
}
::google::protobuf::uint32 PassingLabel::receiver_id() const {
  // @@protoc_insertion_point(field_get:PassingLabel.receiver_id)
  return receiver_id_;
}
void PassingLabel::set_receiver_id(::google::protobuf::uint32 value) {
  
  receiver_id_ = value;
  // @@protoc_insertion_point(field_set:PassingLabel.receiver_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalShotLabel::kStartFrameFieldNumber;
const int GoalShotLabel::kEndFrameFieldNumber;
const int GoalShotLabel::kSuccessfulFieldNumber;
const int GoalShotLabel::kShooterIdFieldNumber;
const int GoalShotLabel::kShooterTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalShotLabel::GoalShotLabel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5flabels_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoalShotLabel)
}
GoalShotLabel::GoalShotLabel(const GoalShotLabel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_frame_, &from.start_frame_,
    reinterpret_cast<char*>(&shooter_team_) -
    reinterpret_cast<char*>(&start_frame_) + sizeof(shooter_team_));
  // @@protoc_insertion_point(copy_constructor:GoalShotLabel)
}

void GoalShotLabel::SharedCtor() {
  ::memset(&start_frame_, 0, reinterpret_cast<char*>(&shooter_team_) -
    reinterpret_cast<char*>(&start_frame_) + sizeof(shooter_team_));
  _cached_size_ = 0;
}

GoalShotLabel::~GoalShotLabel() {
  // @@protoc_insertion_point(destructor:GoalShotLabel)
  SharedDtor();
}

void GoalShotLabel::SharedDtor() {
}

void GoalShotLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalShotLabel::descriptor() {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoalShotLabel& GoalShotLabel::default_instance() {
  protobuf_log_5flabels_2eproto::InitDefaults();
  return *internal_default_instance();
}

GoalShotLabel* GoalShotLabel::New(::google::protobuf::Arena* arena) const {
  GoalShotLabel* n = new GoalShotLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoalShotLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:GoalShotLabel)
  ::memset(&start_frame_, 0, reinterpret_cast<char*>(&shooter_team_) -
    reinterpret_cast<char*>(&start_frame_) + sizeof(shooter_team_));
}

bool GoalShotLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoalShotLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool successful = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shooter_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shooter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TeamColor shooter_team = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shooter_team(static_cast< ::TeamColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoalShotLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoalShotLabel)
  return false;
#undef DO_
}

void GoalShotLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoalShotLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_frame(), output);
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_frame(), output);
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->successful(), output);
  }

  // uint32 shooter_id = 4;
  if (this->shooter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->shooter_id(), output);
  }

  // .TeamColor shooter_team = 5;
  if (this->shooter_team() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->shooter_team(), output);
  }

  // @@protoc_insertion_point(serialize_end:GoalShotLabel)
}

::google::protobuf::uint8* GoalShotLabel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoalShotLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_frame(), target);
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_frame(), target);
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->successful(), target);
  }

  // uint32 shooter_id = 4;
  if (this->shooter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->shooter_id(), target);
  }

  // .TeamColor shooter_team = 5;
  if (this->shooter_team() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->shooter_team(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GoalShotLabel)
  return target;
}

size_t GoalShotLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoalShotLabel)
  size_t total_size = 0;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_frame());
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_frame());
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    total_size += 1 + 1;
  }

  // uint32 shooter_id = 4;
  if (this->shooter_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shooter_id());
  }

  // .TeamColor shooter_team = 5;
  if (this->shooter_team() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shooter_team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalShotLabel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoalShotLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalShotLabel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalShotLabel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoalShotLabel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoalShotLabel)
    MergeFrom(*source);
  }
}

void GoalShotLabel::MergeFrom(const GoalShotLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoalShotLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_frame() != 0) {
    set_start_frame(from.start_frame());
  }
  if (from.end_frame() != 0) {
    set_end_frame(from.end_frame());
  }
  if (from.successful() != 0) {
    set_successful(from.successful());
  }
  if (from.shooter_id() != 0) {
    set_shooter_id(from.shooter_id());
  }
  if (from.shooter_team() != 0) {
    set_shooter_team(from.shooter_team());
  }
}

void GoalShotLabel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoalShotLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalShotLabel::CopyFrom(const GoalShotLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoalShotLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalShotLabel::IsInitialized() const {
  return true;
}

void GoalShotLabel::Swap(GoalShotLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalShotLabel::InternalSwap(GoalShotLabel* other) {
  std::swap(start_frame_, other->start_frame_);
  std::swap(end_frame_, other->end_frame_);
  std::swap(successful_, other->successful_);
  std::swap(shooter_id_, other->shooter_id_);
  std::swap(shooter_team_, other->shooter_team_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoalShotLabel::GetMetadata() const {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoalShotLabel

// uint64 start_frame = 1;
void GoalShotLabel::clear_start_frame() {
  start_frame_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GoalShotLabel::start_frame() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.start_frame)
  return start_frame_;
}
void GoalShotLabel::set_start_frame(::google::protobuf::uint64 value) {
  
  start_frame_ = value;
  // @@protoc_insertion_point(field_set:GoalShotLabel.start_frame)
}

// uint64 end_frame = 2;
void GoalShotLabel::clear_end_frame() {
  end_frame_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GoalShotLabel::end_frame() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.end_frame)
  return end_frame_;
}
void GoalShotLabel::set_end_frame(::google::protobuf::uint64 value) {
  
  end_frame_ = value;
  // @@protoc_insertion_point(field_set:GoalShotLabel.end_frame)
}

// bool successful = 3;
void GoalShotLabel::clear_successful() {
  successful_ = false;
}
bool GoalShotLabel::successful() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.successful)
  return successful_;
}
void GoalShotLabel::set_successful(bool value) {
  
  successful_ = value;
  // @@protoc_insertion_point(field_set:GoalShotLabel.successful)
}

// uint32 shooter_id = 4;
void GoalShotLabel::clear_shooter_id() {
  shooter_id_ = 0u;
}
::google::protobuf::uint32 GoalShotLabel::shooter_id() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.shooter_id)
  return shooter_id_;
}
void GoalShotLabel::set_shooter_id(::google::protobuf::uint32 value) {
  
  shooter_id_ = value;
  // @@protoc_insertion_point(field_set:GoalShotLabel.shooter_id)
}

// .TeamColor shooter_team = 5;
void GoalShotLabel::clear_shooter_team() {
  shooter_team_ = 0;
}
::TeamColor GoalShotLabel::shooter_team() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.shooter_team)
  return static_cast< ::TeamColor >(shooter_team_);
}
void GoalShotLabel::set_shooter_team(::TeamColor value) {
  
  shooter_team_ = value;
  // @@protoc_insertion_point(field_set:GoalShotLabel.shooter_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Labels::kDribblingLabelsFieldNumber;
const int Labels::kBallPossessionLabelsFieldNumber;
const int Labels::kPassingLabelsFieldNumber;
const int Labels::kGoalShotLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Labels::Labels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5flabels_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Labels)
}
Labels::Labels(const Labels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dribbling_labels_(from.dribbling_labels_),
      ball_possession_labels_(from.ball_possession_labels_),
      passing_labels_(from.passing_labels_),
      goal_shot_labels_(from.goal_shot_labels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Labels)
}

void Labels::SharedCtor() {
  _cached_size_ = 0;
}

Labels::~Labels() {
  // @@protoc_insertion_point(destructor:Labels)
  SharedDtor();
}

void Labels::SharedDtor() {
}

void Labels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Labels::descriptor() {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Labels& Labels::default_instance() {
  protobuf_log_5flabels_2eproto::InitDefaults();
  return *internal_default_instance();
}

Labels* Labels::New(::google::protobuf::Arena* arena) const {
  Labels* n = new Labels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Labels::Clear() {
// @@protoc_insertion_point(message_clear_start:Labels)
  dribbling_labels_.Clear();
  ball_possession_labels_.Clear();
  passing_labels_.Clear();
  goal_shot_labels_.Clear();
}

bool Labels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Labels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DribblingLabel dribbling_labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dribbling_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BallPossessionLabel ball_possession_labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ball_possession_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PassingLabel passing_labels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passing_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GoalShotLabel goal_shot_labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goal_shot_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Labels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Labels)
  return false;
#undef DO_
}

void Labels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Labels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DribblingLabel dribbling_labels = 1;
  for (unsigned int i = 0, n = this->dribbling_labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dribbling_labels(i), output);
  }

  // repeated .BallPossessionLabel ball_possession_labels = 2;
  for (unsigned int i = 0, n = this->ball_possession_labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ball_possession_labels(i), output);
  }

  // repeated .PassingLabel passing_labels = 3;
  for (unsigned int i = 0, n = this->passing_labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->passing_labels(i), output);
  }

  // repeated .GoalShotLabel goal_shot_labels = 4;
  for (unsigned int i = 0, n = this->goal_shot_labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->goal_shot_labels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Labels)
}

::google::protobuf::uint8* Labels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Labels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DribblingLabel dribbling_labels = 1;
  for (unsigned int i = 0, n = this->dribbling_labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->dribbling_labels(i), deterministic, target);
  }

  // repeated .BallPossessionLabel ball_possession_labels = 2;
  for (unsigned int i = 0, n = this->ball_possession_labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ball_possession_labels(i), deterministic, target);
  }

  // repeated .PassingLabel passing_labels = 3;
  for (unsigned int i = 0, n = this->passing_labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->passing_labels(i), deterministic, target);
  }

  // repeated .GoalShotLabel goal_shot_labels = 4;
  for (unsigned int i = 0, n = this->goal_shot_labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->goal_shot_labels(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Labels)
  return target;
}

size_t Labels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Labels)
  size_t total_size = 0;

  // repeated .DribblingLabel dribbling_labels = 1;
  {
    unsigned int count = this->dribbling_labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dribbling_labels(i));
    }
  }

  // repeated .BallPossessionLabel ball_possession_labels = 2;
  {
    unsigned int count = this->ball_possession_labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball_possession_labels(i));
    }
  }

  // repeated .PassingLabel passing_labels = 3;
  {
    unsigned int count = this->passing_labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passing_labels(i));
    }
  }

  // repeated .GoalShotLabel goal_shot_labels = 4;
  {
    unsigned int count = this->goal_shot_labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goal_shot_labels(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Labels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Labels)
  GOOGLE_DCHECK_NE(&from, this);
  const Labels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Labels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Labels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Labels)
    MergeFrom(*source);
  }
}

void Labels::MergeFrom(const Labels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Labels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dribbling_labels_.MergeFrom(from.dribbling_labels_);
  ball_possession_labels_.MergeFrom(from.ball_possession_labels_);
  passing_labels_.MergeFrom(from.passing_labels_);
  goal_shot_labels_.MergeFrom(from.goal_shot_labels_);
}

void Labels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Labels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Labels::CopyFrom(const Labels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Labels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Labels::IsInitialized() const {
  return true;
}

void Labels::Swap(Labels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Labels::InternalSwap(Labels* other) {
  dribbling_labels_.InternalSwap(&other->dribbling_labels_);
  ball_possession_labels_.InternalSwap(&other->ball_possession_labels_);
  passing_labels_.InternalSwap(&other->passing_labels_);
  goal_shot_labels_.InternalSwap(&other->goal_shot_labels_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Labels::GetMetadata() const {
  protobuf_log_5flabels_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5flabels_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Labels

// repeated .DribblingLabel dribbling_labels = 1;
int Labels::dribbling_labels_size() const {
  return dribbling_labels_.size();
}
void Labels::clear_dribbling_labels() {
  dribbling_labels_.Clear();
}
const ::DribblingLabel& Labels::dribbling_labels(int index) const {
  // @@protoc_insertion_point(field_get:Labels.dribbling_labels)
  return dribbling_labels_.Get(index);
}
::DribblingLabel* Labels::mutable_dribbling_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Labels.dribbling_labels)
  return dribbling_labels_.Mutable(index);
}
::DribblingLabel* Labels::add_dribbling_labels() {
  // @@protoc_insertion_point(field_add:Labels.dribbling_labels)
  return dribbling_labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::DribblingLabel >*
Labels::mutable_dribbling_labels() {
  // @@protoc_insertion_point(field_mutable_list:Labels.dribbling_labels)
  return &dribbling_labels_;
}
const ::google::protobuf::RepeatedPtrField< ::DribblingLabel >&
Labels::dribbling_labels() const {
  // @@protoc_insertion_point(field_list:Labels.dribbling_labels)
  return dribbling_labels_;
}

// repeated .BallPossessionLabel ball_possession_labels = 2;
int Labels::ball_possession_labels_size() const {
  return ball_possession_labels_.size();
}
void Labels::clear_ball_possession_labels() {
  ball_possession_labels_.Clear();
}
const ::BallPossessionLabel& Labels::ball_possession_labels(int index) const {
  // @@protoc_insertion_point(field_get:Labels.ball_possession_labels)
  return ball_possession_labels_.Get(index);
}
::BallPossessionLabel* Labels::mutable_ball_possession_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Labels.ball_possession_labels)
  return ball_possession_labels_.Mutable(index);
}
::BallPossessionLabel* Labels::add_ball_possession_labels() {
  // @@protoc_insertion_point(field_add:Labels.ball_possession_labels)
  return ball_possession_labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::BallPossessionLabel >*
Labels::mutable_ball_possession_labels() {
  // @@protoc_insertion_point(field_mutable_list:Labels.ball_possession_labels)
  return &ball_possession_labels_;
}
const ::google::protobuf::RepeatedPtrField< ::BallPossessionLabel >&
Labels::ball_possession_labels() const {
  // @@protoc_insertion_point(field_list:Labels.ball_possession_labels)
  return ball_possession_labels_;
}

// repeated .PassingLabel passing_labels = 3;
int Labels::passing_labels_size() const {
  return passing_labels_.size();
}
void Labels::clear_passing_labels() {
  passing_labels_.Clear();
}
const ::PassingLabel& Labels::passing_labels(int index) const {
  // @@protoc_insertion_point(field_get:Labels.passing_labels)
  return passing_labels_.Get(index);
}
::PassingLabel* Labels::mutable_passing_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Labels.passing_labels)
  return passing_labels_.Mutable(index);
}
::PassingLabel* Labels::add_passing_labels() {
  // @@protoc_insertion_point(field_add:Labels.passing_labels)
  return passing_labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::PassingLabel >*
Labels::mutable_passing_labels() {
  // @@protoc_insertion_point(field_mutable_list:Labels.passing_labels)
  return &passing_labels_;
}
const ::google::protobuf::RepeatedPtrField< ::PassingLabel >&
Labels::passing_labels() const {
  // @@protoc_insertion_point(field_list:Labels.passing_labels)
  return passing_labels_;
}

// repeated .GoalShotLabel goal_shot_labels = 4;
int Labels::goal_shot_labels_size() const {
  return goal_shot_labels_.size();
}
void Labels::clear_goal_shot_labels() {
  goal_shot_labels_.Clear();
}
const ::GoalShotLabel& Labels::goal_shot_labels(int index) const {
  // @@protoc_insertion_point(field_get:Labels.goal_shot_labels)
  return goal_shot_labels_.Get(index);
}
::GoalShotLabel* Labels::mutable_goal_shot_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Labels.goal_shot_labels)
  return goal_shot_labels_.Mutable(index);
}
::GoalShotLabel* Labels::add_goal_shot_labels() {
  // @@protoc_insertion_point(field_add:Labels.goal_shot_labels)
  return goal_shot_labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::GoalShotLabel >*
Labels::mutable_goal_shot_labels() {
  // @@protoc_insertion_point(field_mutable_list:Labels.goal_shot_labels)
  return &goal_shot_labels_;
}
const ::google::protobuf::RepeatedPtrField< ::GoalShotLabel >&
Labels::goal_shot_labels() const {
  // @@protoc_insertion_point(field_list:Labels.goal_shot_labels)
  return goal_shot_labels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
