// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_auto_ref.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_game_controller_auto_ref.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class AutoRefRegistrationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoRefRegistration> {
} _AutoRefRegistration_default_instance_;
class AutoRefToControllerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoRefToController> {
} _AutoRefToController_default_instance_;
class ControllerToAutoRefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ControllerToAutoRef> {
  public:
  const ::ControllerReply* controller_reply_;
} _ControllerToAutoRef_default_instance_;
class AutoRefMessage_WaitForBots_ViolatorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoRefMessage_WaitForBots_Violator> {
} _AutoRefMessage_WaitForBots_Violator_default_instance_;
class AutoRefMessage_WaitForBotsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoRefMessage_WaitForBots> {
} _AutoRefMessage_WaitForBots_default_instance_;
class AutoRefMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoRefMessage> {
  public:
  ::google::protobuf::internal::ArenaStringPtr custom_;
  const ::AutoRefMessage_WaitForBots* wait_for_bots_;
} _AutoRefMessage_default_instance_;

namespace protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefRegistration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefRegistration, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefRegistration, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefToController, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefToController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefToController, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefToController, game_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefToController, auto_ref_message_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerToAutoRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerToAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerToAutoRef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ControllerToAutoRef_default_instance_), controller_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerToAutoRef, msg_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage_WaitForBots_Violator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage_WaitForBots_Violator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage_WaitForBots_Violator, bot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage_WaitForBots_Violator, distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage_WaitForBots, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage_WaitForBots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage_WaitForBots, violators_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AutoRefMessage_default_instance_), custom_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AutoRefMessage_default_instance_), wait_for_bots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefMessage, message_),
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(AutoRefRegistration)},
  { 9, 17, sizeof(AutoRefToController)},
  { 20, 27, sizeof(ControllerToAutoRef)},
  { 28, 35, sizeof(AutoRefMessage_WaitForBots_Violator)},
  { 37, 43, sizeof(AutoRefMessage_WaitForBots)},
  { 44, 52, sizeof(AutoRefMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoRefRegistration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoRefToController_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ControllerToAutoRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoRefMessage_WaitForBots_Violator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoRefMessage_WaitForBots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoRefMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ssl_game_controller_auto_ref.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _AutoRefRegistration_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AutoRefToController_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ControllerToAutoRef_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _AutoRefMessage_WaitForBots_Violator_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _AutoRefMessage_WaitForBots_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AutoRefMessage_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::InitDefaults();
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  _AutoRefRegistration_default_instance_.DefaultConstruct();
  _AutoRefToController_default_instance_.DefaultConstruct();
  _ControllerToAutoRef_default_instance_.DefaultConstruct();
  _AutoRefMessage_WaitForBots_Violator_default_instance_.DefaultConstruct();
  _AutoRefMessage_WaitForBots_default_instance_.DefaultConstruct();
  _AutoRefMessage_default_instance_.DefaultConstruct();
  _AutoRefRegistration_default_instance_.get_mutable()->signature_ = const_cast< ::Signature*>(
      ::Signature::internal_default_instance());
  _AutoRefToController_default_instance_.get_mutable()->signature_ = const_cast< ::Signature*>(
      ::Signature::internal_default_instance());
  _AutoRefToController_default_instance_.get_mutable()->game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
  _AutoRefToController_default_instance_.get_mutable()->auto_ref_message_ = const_cast< ::AutoRefMessage*>(
      ::AutoRefMessage::internal_default_instance());
  _ControllerToAutoRef_default_instance_.controller_reply_ = const_cast< ::ControllerReply*>(
      ::ControllerReply::internal_default_instance());
  _AutoRefMessage_WaitForBots_Violator_default_instance_.get_mutable()->bot_id_ = const_cast< ::BotId*>(
      ::BotId::internal_default_instance());
  _AutoRefMessage_default_instance_.custom_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _AutoRefMessage_default_instance_.wait_for_bots_ = const_cast< ::AutoRefMessage_WaitForBots*>(
      ::AutoRefMessage_WaitForBots::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\"ssl_game_controller_auto_ref.proto\032 ss"
      "l_game_controller_common.proto\032\031ssl_game"
      "_event_2019.proto\"H\n\023AutoRefRegistration"
      "\022\022\n\nidentifier\030\001 \002(\t\022\035\n\tsignature\030\002 \001(\0132"
      "\n.Signature\"\203\001\n\023AutoRefToController\022\035\n\ts"
      "ignature\030\001 \001(\0132\n.Signature\022\036\n\ngame_event"
      "\030\002 \001(\0132\n.GameEvent\022-\n\020auto_ref_message\030\003"
      " \001(\0132\017.AutoRefMessageB\002\030\001\"J\n\023ControllerT"
      "oAutoRef\022,\n\020controller_reply\030\001 \001(\0132\020.Con"
      "trollerReplyH\000B\005\n\003msg\"\341\001\n\016AutoRefMessage"
      "\022\020\n\006custom\030\001 \001(\tH\000\0224\n\rwait_for_bots\030\002 \001("
      "\0132\033.AutoRefMessage.WaitForBotsH\000\032|\n\013Wait"
      "ForBots\0227\n\tviolators\030\001 \003(\0132$.AutoRefMess"
      "age.WaitForBots.Violator\0324\n\010Violator\022\026\n\006"
      "bot_id\030\001 \002(\0132\006.BotId\022\020\n\010distance\030\002 \002(\002B\t"
      "\n\007message"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_game_controller_auto_ref.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoRefRegistration::kIdentifierFieldNumber;
const int AutoRefRegistration::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoRefRegistration::AutoRefRegistration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AutoRefRegistration)
}
AutoRefRegistration::AutoRefRegistration(const AutoRefRegistration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_identifier()) {
    identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  if (from.has_signature()) {
    signature_ = new ::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefRegistration)
}

void AutoRefRegistration::SharedCtor() {
  _cached_size_ = 0;
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = NULL;
}

AutoRefRegistration::~AutoRefRegistration() {
  // @@protoc_insertion_point(destructor:AutoRefRegistration)
  SharedDtor();
}

void AutoRefRegistration::SharedDtor() {
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete signature_;
  }
}

void AutoRefRegistration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoRefRegistration::descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoRefRegistration& AutoRefRegistration::default_instance() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoRefRegistration* AutoRefRegistration::New(::google::protobuf::Arena* arena) const {
  AutoRefRegistration* n = new AutoRefRegistration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoRefRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefRegistration)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_identifier()) {
      GOOGLE_DCHECK(!identifier_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*identifier_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->::Signature::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoRefRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AutoRefRegistration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AutoRefRegistration.identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AutoRefRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AutoRefRegistration)
  return false;
#undef DO_
}

void AutoRefRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AutoRefRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AutoRefRegistration.identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->signature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AutoRefRegistration)
}

::google::protobuf::uint8* AutoRefRegistration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AutoRefRegistration.identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->signature_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefRegistration)
  return target;
}

size_t AutoRefRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefRegistration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string identifier = 1;
  if (has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }
  // optional .Signature signature = 2;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRefRegistration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefRegistration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoRefRegistration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefRegistration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefRegistration)
    MergeFrom(*source);
  }
}

void AutoRefRegistration::MergeFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::Signature::MergeFrom(from.signature());
    }
  }
}

void AutoRefRegistration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefRegistration::CopyFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefRegistration::Swap(AutoRefRegistration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoRefRegistration::InternalSwap(AutoRefRegistration* other) {
  identifier_.Swap(&other->identifier_);
  std::swap(signature_, other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoRefRegistration::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoRefRegistration

// required string identifier = 1;
bool AutoRefRegistration::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoRefRegistration::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoRefRegistration::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoRefRegistration::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
const ::std::string& AutoRefRegistration::identifier() const {
  // @@protoc_insertion_point(field_get:AutoRefRegistration.identifier)
  return identifier_.GetNoArena();
}
void AutoRefRegistration::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AutoRefRegistration.identifier)
}
#if LANG_CXX11
void AutoRefRegistration::set_identifier(::std::string&& value) {
  set_has_identifier();
  identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AutoRefRegistration.identifier)
}
#endif
void AutoRefRegistration::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AutoRefRegistration.identifier)
}
void AutoRefRegistration::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AutoRefRegistration.identifier)
}
::std::string* AutoRefRegistration::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:AutoRefRegistration.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoRefRegistration::release_identifier() {
  // @@protoc_insertion_point(field_release:AutoRefRegistration.identifier)
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoRefRegistration::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:AutoRefRegistration.identifier)
}

// optional .Signature signature = 2;
bool AutoRefRegistration::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoRefRegistration::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoRefRegistration::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoRefRegistration::clear_signature() {
  if (signature_ != NULL) signature_->::Signature::Clear();
  clear_has_signature();
}
const ::Signature& AutoRefRegistration::signature() const {
  // @@protoc_insertion_point(field_get:AutoRefRegistration.signature)
  return signature_ != NULL ? *signature_
                         : *::Signature::internal_default_instance();
}
::Signature* AutoRefRegistration::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::Signature;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefRegistration.signature)
  return signature_;
}
::Signature* AutoRefRegistration::release_signature() {
  // @@protoc_insertion_point(field_release:AutoRefRegistration.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void AutoRefRegistration::set_allocated_signature(::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefRegistration.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoRefToController::kSignatureFieldNumber;
const int AutoRefToController::kGameEventFieldNumber;
const int AutoRefToController::kAutoRefMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoRefToController::AutoRefToController()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AutoRefToController)
}
AutoRefToController::AutoRefToController(const AutoRefToController& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signature()) {
    signature_ = new ::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  if (from.has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  if (from.has_auto_ref_message()) {
    auto_ref_message_ = new ::AutoRefMessage(*from.auto_ref_message_);
  } else {
    auto_ref_message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefToController)
}

void AutoRefToController::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&signature_, 0, reinterpret_cast<char*>(&auto_ref_message_) -
    reinterpret_cast<char*>(&signature_) + sizeof(auto_ref_message_));
}

AutoRefToController::~AutoRefToController() {
  // @@protoc_insertion_point(destructor:AutoRefToController)
  SharedDtor();
}

void AutoRefToController::SharedDtor() {
  if (this != internal_default_instance()) {
    delete signature_;
  }
  if (this != internal_default_instance()) {
    delete game_event_;
  }
  if (this != internal_default_instance()) {
    delete auto_ref_message_;
  }
}

void AutoRefToController::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoRefToController::descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoRefToController& AutoRefToController::default_instance() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoRefToController* AutoRefToController::New(::google::protobuf::Arena* arena) const {
  AutoRefToController* n = new AutoRefToController;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoRefToController::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefToController)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_signature()) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->::Signature::Clear();
    }
    if (has_game_event()) {
      GOOGLE_DCHECK(game_event_ != NULL);
      game_event_->::GameEvent::Clear();
    }
    if (has_auto_ref_message()) {
      GOOGLE_DCHECK(auto_ref_message_ != NULL);
      auto_ref_message_->::AutoRefMessage::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoRefToController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AutoRefToController)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Signature signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_ref_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AutoRefToController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AutoRefToController)
  return false;
#undef DO_
}

void AutoRefToController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AutoRefToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->signature_, output);
  }

  // optional .GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->game_event_, output);
  }

  // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->auto_ref_message_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AutoRefToController)
}

::google::protobuf::uint8* AutoRefToController::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->signature_, deterministic, target);
  }

  // optional .GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->game_event_, deterministic, target);
  }

  // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->auto_ref_message_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefToController)
  return target;
}

size_t AutoRefToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefToController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .Signature signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signature_);
    }

    // optional .GameEvent game_event = 2;
    if (has_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->game_event_);
    }

    // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
    if (has_auto_ref_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->auto_ref_message_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRefToController::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefToController)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefToController* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoRefToController>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefToController)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefToController)
    MergeFrom(*source);
  }
}

void AutoRefToController::MergeFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_signature()->::Signature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_game_event()->::GameEvent::MergeFrom(from.game_event());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_auto_ref_message()->::AutoRefMessage::MergeFrom(from.auto_ref_message());
    }
  }
}

void AutoRefToController::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefToController::CopyFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefToController::IsInitialized() const {
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  if (has_auto_ref_message()) {
    if (!this->auto_ref_message_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefToController::Swap(AutoRefToController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoRefToController::InternalSwap(AutoRefToController* other) {
  std::swap(signature_, other->signature_);
  std::swap(game_event_, other->game_event_);
  std::swap(auto_ref_message_, other->auto_ref_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoRefToController::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoRefToController

// optional .Signature signature = 1;
bool AutoRefToController::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoRefToController::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoRefToController::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoRefToController::clear_signature() {
  if (signature_ != NULL) signature_->::Signature::Clear();
  clear_has_signature();
}
const ::Signature& AutoRefToController::signature() const {
  // @@protoc_insertion_point(field_get:AutoRefToController.signature)
  return signature_ != NULL ? *signature_
                         : *::Signature::internal_default_instance();
}
::Signature* AutoRefToController::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::Signature;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.signature)
  return signature_;
}
::Signature* AutoRefToController::release_signature() {
  // @@protoc_insertion_point(field_release:AutoRefToController.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void AutoRefToController::set_allocated_signature(::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.signature)
}

// optional .GameEvent game_event = 2;
bool AutoRefToController::has_game_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoRefToController::set_has_game_event() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoRefToController::clear_has_game_event() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoRefToController::clear_game_event() {
  if (game_event_ != NULL) game_event_->::GameEvent::Clear();
  clear_has_game_event();
}
const ::GameEvent& AutoRefToController::game_event() const {
  // @@protoc_insertion_point(field_get:AutoRefToController.game_event)
  return game_event_ != NULL ? *game_event_
                         : *::GameEvent::internal_default_instance();
}
::GameEvent* AutoRefToController::mutable_game_event() {
  set_has_game_event();
  if (game_event_ == NULL) {
    game_event_ = new ::GameEvent;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.game_event)
  return game_event_;
}
::GameEvent* AutoRefToController::release_game_event() {
  // @@protoc_insertion_point(field_release:AutoRefToController.game_event)
  clear_has_game_event();
  ::GameEvent* temp = game_event_;
  game_event_ = NULL;
  return temp;
}
void AutoRefToController::set_allocated_game_event(::GameEvent* game_event) {
  delete game_event_;
  game_event_ = game_event;
  if (game_event) {
    set_has_game_event();
  } else {
    clear_has_game_event();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.game_event)
}

// optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
bool AutoRefToController::has_auto_ref_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutoRefToController::set_has_auto_ref_message() {
  _has_bits_[0] |= 0x00000004u;
}
void AutoRefToController::clear_has_auto_ref_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void AutoRefToController::clear_auto_ref_message() {
  if (auto_ref_message_ != NULL) auto_ref_message_->::AutoRefMessage::Clear();
  clear_has_auto_ref_message();
}
const ::AutoRefMessage& AutoRefToController::auto_ref_message() const {
  // @@protoc_insertion_point(field_get:AutoRefToController.auto_ref_message)
  return auto_ref_message_ != NULL ? *auto_ref_message_
                         : *::AutoRefMessage::internal_default_instance();
}
::AutoRefMessage* AutoRefToController::mutable_auto_ref_message() {
  set_has_auto_ref_message();
  if (auto_ref_message_ == NULL) {
    auto_ref_message_ = new ::AutoRefMessage;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.auto_ref_message)
  return auto_ref_message_;
}
::AutoRefMessage* AutoRefToController::release_auto_ref_message() {
  // @@protoc_insertion_point(field_release:AutoRefToController.auto_ref_message)
  clear_has_auto_ref_message();
  ::AutoRefMessage* temp = auto_ref_message_;
  auto_ref_message_ = NULL;
  return temp;
}
void AutoRefToController::set_allocated_auto_ref_message(::AutoRefMessage* auto_ref_message) {
  delete auto_ref_message_;
  auto_ref_message_ = auto_ref_message;
  if (auto_ref_message) {
    set_has_auto_ref_message();
  } else {
    clear_has_auto_ref_message();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.auto_ref_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerToAutoRef::kControllerReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerToAutoRef::ControllerToAutoRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerToAutoRef)
}
ControllerToAutoRef::ControllerToAutoRef(const ControllerToAutoRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      mutable_controller_reply()->::ControllerReply::MergeFrom(from.controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ControllerToAutoRef)
}

void ControllerToAutoRef::SharedCtor() {
  _cached_size_ = 0;
  clear_has_msg();
}

ControllerToAutoRef::~ControllerToAutoRef() {
  // @@protoc_insertion_point(destructor:ControllerToAutoRef)
  SharedDtor();
}

void ControllerToAutoRef::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToAutoRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerToAutoRef::descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerToAutoRef& ControllerToAutoRef::default_instance() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  return *internal_default_instance();
}

ControllerToAutoRef* ControllerToAutoRef::New(::google::protobuf::Arena* arena) const {
  ControllerToAutoRef* n = new ControllerToAutoRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerToAutoRef::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ControllerToAutoRef)
  switch (msg_case()) {
    case kControllerReply: {
      delete msg_.controller_reply_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerToAutoRef)
  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerToAutoRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerToAutoRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ControllerReply controller_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerToAutoRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerToAutoRef)
  return false;
#undef DO_
}

void ControllerToAutoRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerToAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ControllerReply controller_reply = 1;
  if (has_controller_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.controller_reply_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerToAutoRef)
}

::google::protobuf::uint8* ControllerToAutoRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerToAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ControllerReply controller_reply = 1;
  if (has_controller_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.controller_reply_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerToAutoRef)
  return target;
}

size_t ControllerToAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerToAutoRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (msg_case()) {
    // optional .ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.controller_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerToAutoRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToAutoRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerToAutoRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerToAutoRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerToAutoRef)
    MergeFrom(*source);
  }
}

void ControllerToAutoRef::MergeFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      mutable_controller_reply()->::ControllerReply::MergeFrom(from.controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ControllerToAutoRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToAutoRef::CopyFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToAutoRef::IsInitialized() const {
  return true;
}

void ControllerToAutoRef::Swap(ControllerToAutoRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerToAutoRef::InternalSwap(ControllerToAutoRef* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerToAutoRef::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControllerToAutoRef

// optional .ControllerReply controller_reply = 1;
bool ControllerToAutoRef::has_controller_reply() const {
  return msg_case() == kControllerReply;
}
void ControllerToAutoRef::set_has_controller_reply() {
  _oneof_case_[0] = kControllerReply;
}
void ControllerToAutoRef::clear_controller_reply() {
  if (has_controller_reply()) {
    delete msg_.controller_reply_;
    clear_has_msg();
  }
}
 const ::ControllerReply& ControllerToAutoRef::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToAutoRef.controller_reply)
  return has_controller_reply()
      ? *msg_.controller_reply_
      : ::ControllerReply::default_instance();
}
::ControllerReply* ControllerToAutoRef::mutable_controller_reply() {
  if (!has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    msg_.controller_reply_ = new ::ControllerReply;
  }
  // @@protoc_insertion_point(field_mutable:ControllerToAutoRef.controller_reply)
  return msg_.controller_reply_;
}
::ControllerReply* ControllerToAutoRef::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToAutoRef.controller_reply)
  if (has_controller_reply()) {
    clear_has_msg();
    ::ControllerReply* temp = msg_.controller_reply_;
    msg_.controller_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ControllerToAutoRef::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  clear_msg();
  if (controller_reply) {
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToAutoRef.controller_reply)
}

bool ControllerToAutoRef::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void ControllerToAutoRef::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
ControllerToAutoRef::MsgCase ControllerToAutoRef::msg_case() const {
  return ControllerToAutoRef::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoRefMessage_WaitForBots_Violator::kBotIdFieldNumber;
const int AutoRefMessage_WaitForBots_Violator::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoRefMessage_WaitForBots_Violator::AutoRefMessage_WaitForBots_Violator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AutoRefMessage.WaitForBots.Violator)
}
AutoRefMessage_WaitForBots_Violator::AutoRefMessage_WaitForBots_Violator(const AutoRefMessage_WaitForBots_Violator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bot_id()) {
    bot_id_ = new ::BotId(*from.bot_id_);
  } else {
    bot_id_ = NULL;
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:AutoRefMessage.WaitForBots.Violator)
}

void AutoRefMessage_WaitForBots_Violator::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bot_id_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&bot_id_) + sizeof(distance_));
}

AutoRefMessage_WaitForBots_Violator::~AutoRefMessage_WaitForBots_Violator() {
  // @@protoc_insertion_point(destructor:AutoRefMessage.WaitForBots.Violator)
  SharedDtor();
}

void AutoRefMessage_WaitForBots_Violator::SharedDtor() {
  if (this != internal_default_instance()) {
    delete bot_id_;
  }
}

void AutoRefMessage_WaitForBots_Violator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoRefMessage_WaitForBots_Violator::descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoRefMessage_WaitForBots_Violator& AutoRefMessage_WaitForBots_Violator::default_instance() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoRefMessage_WaitForBots_Violator* AutoRefMessage_WaitForBots_Violator::New(::google::protobuf::Arena* arena) const {
  AutoRefMessage_WaitForBots_Violator* n = new AutoRefMessage_WaitForBots_Violator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoRefMessage_WaitForBots_Violator::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefMessage.WaitForBots.Violator)
  if (has_bot_id()) {
    GOOGLE_DCHECK(bot_id_ != NULL);
    bot_id_->::BotId::Clear();
  }
  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoRefMessage_WaitForBots_Violator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AutoRefMessage.WaitForBots.Violator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BotId bot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AutoRefMessage.WaitForBots.Violator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AutoRefMessage.WaitForBots.Violator)
  return false;
#undef DO_
}

void AutoRefMessage_WaitForBots_Violator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AutoRefMessage.WaitForBots.Violator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .BotId bot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->bot_id_, output);
  }

  // required float distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AutoRefMessage.WaitForBots.Violator)
}

::google::protobuf::uint8* AutoRefMessage_WaitForBots_Violator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefMessage.WaitForBots.Violator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .BotId bot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->bot_id_, deterministic, target);
  }

  // required float distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefMessage.WaitForBots.Violator)
  return target;
}

size_t AutoRefMessage_WaitForBots_Violator::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AutoRefMessage.WaitForBots.Violator)
  size_t total_size = 0;

  if (has_bot_id()) {
    // required .BotId bot_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bot_id_);
  }

  if (has_distance()) {
    // required float distance = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t AutoRefMessage_WaitForBots_Violator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefMessage.WaitForBots.Violator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .BotId bot_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bot_id_);

    // required float distance = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRefMessage_WaitForBots_Violator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefMessage.WaitForBots.Violator)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefMessage_WaitForBots_Violator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoRefMessage_WaitForBots_Violator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefMessage.WaitForBots.Violator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefMessage.WaitForBots.Violator)
    MergeFrom(*source);
  }
}

void AutoRefMessage_WaitForBots_Violator::MergeFrom(const AutoRefMessage_WaitForBots_Violator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefMessage.WaitForBots.Violator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bot_id()->::BotId::MergeFrom(from.bot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutoRefMessage_WaitForBots_Violator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefMessage.WaitForBots.Violator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefMessage_WaitForBots_Violator::CopyFrom(const AutoRefMessage_WaitForBots_Violator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefMessage.WaitForBots.Violator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefMessage_WaitForBots_Violator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AutoRefMessage_WaitForBots_Violator::Swap(AutoRefMessage_WaitForBots_Violator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoRefMessage_WaitForBots_Violator::InternalSwap(AutoRefMessage_WaitForBots_Violator* other) {
  std::swap(bot_id_, other->bot_id_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoRefMessage_WaitForBots_Violator::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoRefMessage_WaitForBots_Violator

// required .BotId bot_id = 1;
bool AutoRefMessage_WaitForBots_Violator::has_bot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoRefMessage_WaitForBots_Violator::set_has_bot_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoRefMessage_WaitForBots_Violator::clear_has_bot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoRefMessage_WaitForBots_Violator::clear_bot_id() {
  if (bot_id_ != NULL) bot_id_->::BotId::Clear();
  clear_has_bot_id();
}
const ::BotId& AutoRefMessage_WaitForBots_Violator::bot_id() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.Violator.bot_id)
  return bot_id_ != NULL ? *bot_id_
                         : *::BotId::internal_default_instance();
}
::BotId* AutoRefMessage_WaitForBots_Violator::mutable_bot_id() {
  set_has_bot_id();
  if (bot_id_ == NULL) {
    bot_id_ = new ::BotId;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.WaitForBots.Violator.bot_id)
  return bot_id_;
}
::BotId* AutoRefMessage_WaitForBots_Violator::release_bot_id() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.WaitForBots.Violator.bot_id)
  clear_has_bot_id();
  ::BotId* temp = bot_id_;
  bot_id_ = NULL;
  return temp;
}
void AutoRefMessage_WaitForBots_Violator::set_allocated_bot_id(::BotId* bot_id) {
  delete bot_id_;
  bot_id_ = bot_id;
  if (bot_id) {
    set_has_bot_id();
  } else {
    clear_has_bot_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.WaitForBots.Violator.bot_id)
}

// required float distance = 2;
bool AutoRefMessage_WaitForBots_Violator::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoRefMessage_WaitForBots_Violator::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoRefMessage_WaitForBots_Violator::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoRefMessage_WaitForBots_Violator::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float AutoRefMessage_WaitForBots_Violator::distance() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.Violator.distance)
  return distance_;
}
void AutoRefMessage_WaitForBots_Violator::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:AutoRefMessage.WaitForBots.Violator.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoRefMessage_WaitForBots::kViolatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoRefMessage_WaitForBots::AutoRefMessage_WaitForBots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AutoRefMessage.WaitForBots)
}
AutoRefMessage_WaitForBots::AutoRefMessage_WaitForBots(const AutoRefMessage_WaitForBots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      violators_(from.violators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AutoRefMessage.WaitForBots)
}

void AutoRefMessage_WaitForBots::SharedCtor() {
  _cached_size_ = 0;
}

AutoRefMessage_WaitForBots::~AutoRefMessage_WaitForBots() {
  // @@protoc_insertion_point(destructor:AutoRefMessage.WaitForBots)
  SharedDtor();
}

void AutoRefMessage_WaitForBots::SharedDtor() {
}

void AutoRefMessage_WaitForBots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoRefMessage_WaitForBots::descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoRefMessage_WaitForBots& AutoRefMessage_WaitForBots::default_instance() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoRefMessage_WaitForBots* AutoRefMessage_WaitForBots::New(::google::protobuf::Arena* arena) const {
  AutoRefMessage_WaitForBots* n = new AutoRefMessage_WaitForBots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoRefMessage_WaitForBots::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefMessage.WaitForBots)
  violators_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoRefMessage_WaitForBots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AutoRefMessage.WaitForBots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_violators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AutoRefMessage.WaitForBots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AutoRefMessage.WaitForBots)
  return false;
#undef DO_
}

void AutoRefMessage_WaitForBots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AutoRefMessage.WaitForBots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
  for (unsigned int i = 0, n = this->violators_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->violators(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AutoRefMessage.WaitForBots)
}

::google::protobuf::uint8* AutoRefMessage_WaitForBots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefMessage.WaitForBots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
  for (unsigned int i = 0, n = this->violators_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->violators(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefMessage.WaitForBots)
  return target;
}

size_t AutoRefMessage_WaitForBots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefMessage.WaitForBots)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
  {
    unsigned int count = this->violators_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->violators(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRefMessage_WaitForBots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefMessage.WaitForBots)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefMessage_WaitForBots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoRefMessage_WaitForBots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefMessage.WaitForBots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefMessage.WaitForBots)
    MergeFrom(*source);
  }
}

void AutoRefMessage_WaitForBots::MergeFrom(const AutoRefMessage_WaitForBots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefMessage.WaitForBots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  violators_.MergeFrom(from.violators_);
}

void AutoRefMessage_WaitForBots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefMessage.WaitForBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefMessage_WaitForBots::CopyFrom(const AutoRefMessage_WaitForBots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefMessage.WaitForBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefMessage_WaitForBots::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->violators())) return false;
  return true;
}

void AutoRefMessage_WaitForBots::Swap(AutoRefMessage_WaitForBots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoRefMessage_WaitForBots::InternalSwap(AutoRefMessage_WaitForBots* other) {
  violators_.InternalSwap(&other->violators_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoRefMessage_WaitForBots::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoRefMessage_WaitForBots

// repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
int AutoRefMessage_WaitForBots::violators_size() const {
  return violators_.size();
}
void AutoRefMessage_WaitForBots::clear_violators() {
  violators_.Clear();
}
const ::AutoRefMessage_WaitForBots_Violator& AutoRefMessage_WaitForBots::violators(int index) const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.violators)
  return violators_.Get(index);
}
::AutoRefMessage_WaitForBots_Violator* AutoRefMessage_WaitForBots::mutable_violators(int index) {
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.WaitForBots.violators)
  return violators_.Mutable(index);
}
::AutoRefMessage_WaitForBots_Violator* AutoRefMessage_WaitForBots::add_violators() {
  // @@protoc_insertion_point(field_add:AutoRefMessage.WaitForBots.violators)
  return violators_.Add();
}
::google::protobuf::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >*
AutoRefMessage_WaitForBots::mutable_violators() {
  // @@protoc_insertion_point(field_mutable_list:AutoRefMessage.WaitForBots.violators)
  return &violators_;
}
const ::google::protobuf::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >&
AutoRefMessage_WaitForBots::violators() const {
  // @@protoc_insertion_point(field_list:AutoRefMessage.WaitForBots.violators)
  return violators_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoRefMessage::kCustomFieldNumber;
const int AutoRefMessage::kWaitForBotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoRefMessage::AutoRefMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AutoRefMessage)
}
AutoRefMessage::AutoRefMessage(const AutoRefMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kCustom: {
      set_custom(from.custom());
      break;
    }
    case kWaitForBots: {
      mutable_wait_for_bots()->::AutoRefMessage_WaitForBots::MergeFrom(from.wait_for_bots());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefMessage)
}

void AutoRefMessage::SharedCtor() {
  _cached_size_ = 0;
  clear_has_message();
}

AutoRefMessage::~AutoRefMessage() {
  // @@protoc_insertion_point(destructor:AutoRefMessage)
  SharedDtor();
}

void AutoRefMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void AutoRefMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoRefMessage::descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoRefMessage& AutoRefMessage::default_instance() {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoRefMessage* AutoRefMessage::New(::google::protobuf::Arena* arena) const {
  AutoRefMessage* n = new AutoRefMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoRefMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:AutoRefMessage)
  switch (message_case()) {
    case kCustom: {
      message_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kWaitForBots: {
      delete message_.wait_for_bots_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void AutoRefMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefMessage)
  clear_message();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoRefMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AutoRefMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string custom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom().data(), this->custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AutoRefMessage.custom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AutoRefMessage.WaitForBots wait_for_bots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wait_for_bots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AutoRefMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AutoRefMessage)
  return false;
#undef DO_
}

void AutoRefMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AutoRefMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (message_case()) {
    case kCustom:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->custom().data(), this->custom().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "AutoRefMessage.custom");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->custom(), output);
      break;
    case kWaitForBots:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *message_.wait_for_bots_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AutoRefMessage)
}

::google::protobuf::uint8* AutoRefMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (message_case()) {
    case kCustom:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->custom().data(), this->custom().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "AutoRefMessage.custom");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          1, this->custom(), target);
      break;
    case kWaitForBots:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *message_.wait_for_bots_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefMessage)
  return target;
}

size_t AutoRefMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (message_case()) {
    // optional string custom = 1;
    case kCustom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom());
      break;
    }
    // optional .AutoRefMessage.WaitForBots wait_for_bots = 2;
    case kWaitForBots: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.wait_for_bots_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRefMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoRefMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefMessage)
    MergeFrom(*source);
  }
}

void AutoRefMessage::MergeFrom(const AutoRefMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kCustom: {
      set_custom(from.custom());
      break;
    }
    case kWaitForBots: {
      mutable_wait_for_bots()->::AutoRefMessage_WaitForBots::MergeFrom(from.wait_for_bots());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void AutoRefMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefMessage::CopyFrom(const AutoRefMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefMessage::IsInitialized() const {
  switch (message_case()) {
    case kCustom: {
      break;
    }
    case kWaitForBots: {
      if (has_wait_for_bots()) {
        if (!this->wait_for_bots().IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void AutoRefMessage::Swap(AutoRefMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoRefMessage::InternalSwap(AutoRefMessage* other) {
  std::swap(message_, other->message_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoRefMessage::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoRefMessage

// optional string custom = 1;
bool AutoRefMessage::has_custom() const {
  return message_case() == kCustom;
}
void AutoRefMessage::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
void AutoRefMessage::clear_custom() {
  if (has_custom()) {
    message_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
const ::std::string& AutoRefMessage::custom() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.custom)
  if (has_custom()) {
    return message_.custom_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AutoRefMessage::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AutoRefMessage.custom)
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AutoRefMessage.custom)
}
#if LANG_CXX11
void AutoRefMessage::set_custom(::std::string&& value) {
  // @@protoc_insertion_point(field_set:AutoRefMessage.custom)
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AutoRefMessage.custom)
}
#endif
void AutoRefMessage::set_custom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AutoRefMessage.custom)
}
void AutoRefMessage::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AutoRefMessage.custom)
}
::std::string* AutoRefMessage::mutable_custom() {
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.custom)
  return message_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoRefMessage::release_custom() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.custom)
  if (has_custom()) {
    clear_has_message();
    return message_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AutoRefMessage::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (custom != NULL) {
    set_has_custom();
    message_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.custom)
}

// optional .AutoRefMessage.WaitForBots wait_for_bots = 2;
bool AutoRefMessage::has_wait_for_bots() const {
  return message_case() == kWaitForBots;
}
void AutoRefMessage::set_has_wait_for_bots() {
  _oneof_case_[0] = kWaitForBots;
}
void AutoRefMessage::clear_wait_for_bots() {
  if (has_wait_for_bots()) {
    delete message_.wait_for_bots_;
    clear_has_message();
  }
}
 const ::AutoRefMessage_WaitForBots& AutoRefMessage::wait_for_bots() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.wait_for_bots)
  return has_wait_for_bots()
      ? *message_.wait_for_bots_
      : ::AutoRefMessage_WaitForBots::default_instance();
}
::AutoRefMessage_WaitForBots* AutoRefMessage::mutable_wait_for_bots() {
  if (!has_wait_for_bots()) {
    clear_message();
    set_has_wait_for_bots();
    message_.wait_for_bots_ = new ::AutoRefMessage_WaitForBots;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.wait_for_bots)
  return message_.wait_for_bots_;
}
::AutoRefMessage_WaitForBots* AutoRefMessage::release_wait_for_bots() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.wait_for_bots)
  if (has_wait_for_bots()) {
    clear_has_message();
    ::AutoRefMessage_WaitForBots* temp = message_.wait_for_bots_;
    message_.wait_for_bots_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AutoRefMessage::set_allocated_wait_for_bots(::AutoRefMessage_WaitForBots* wait_for_bots) {
  clear_message();
  if (wait_for_bots) {
    set_has_wait_for_bots();
    message_.wait_for_bots_ = wait_for_bots;
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.wait_for_bots)
}

bool AutoRefMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
void AutoRefMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
AutoRefMessage::MessageCase AutoRefMessage::message_case() const {
  return AutoRefMessage::MessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
