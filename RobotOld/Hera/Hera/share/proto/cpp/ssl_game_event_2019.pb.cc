// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_event_2019.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_game_event_2019.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class GameEvent_BallLeftFieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BallLeftField> {
} _GameEvent_BallLeftField_default_instance_;
class GameEvent_AimlessKickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AimlessKick> {
} _GameEvent_AimlessKick_default_instance_;
class GameEvent_GoalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_Goal> {
} _GameEvent_Goal_default_instance_;
class GameEvent_IndirectGoalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_IndirectGoal> {
} _GameEvent_IndirectGoal_default_instance_;
class GameEvent_ChippedGoalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_ChippedGoal> {
} _GameEvent_ChippedGoal_default_instance_;
class GameEvent_BotTooFastInStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotTooFastInStop> {
} _GameEvent_BotTooFastInStop_default_instance_;
class GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_DefenderTooCloseToKickPoint> {
} _GameEvent_DefenderTooCloseToKickPoint_default_instance_;
class GameEvent_BotCrashDrawnDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotCrashDrawn> {
} _GameEvent_BotCrashDrawn_default_instance_;
class GameEvent_BotCrashUniqueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotCrashUnique> {
} _GameEvent_BotCrashUnique_default_instance_;
class GameEvent_BotPushedBotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotPushedBot> {
} _GameEvent_BotPushedBot_default_instance_;
class GameEvent_BotTippedOverDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotTippedOver> {
} _GameEvent_BotTippedOver_default_instance_;
class GameEvent_DefenderInDefenseAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_DefenderInDefenseArea> {
} _GameEvent_DefenderInDefenseArea_default_instance_;
class GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_DefenderInDefenseAreaPartially> {
} _GameEvent_DefenderInDefenseAreaPartially_default_instance_;
class GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AttackerTouchedBallInDefenseArea> {
} _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;
class GameEvent_BotKickedBallTooFastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotKickedBallTooFast> {
} _GameEvent_BotKickedBallTooFast_default_instance_;
class GameEvent_BotDribbledBallTooFarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotDribbledBallTooFar> {
} _GameEvent_BotDribbledBallTooFar_default_instance_;
class GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AttackerTouchedOpponentInDefenseArea> {
} _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;
class GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AttackerDoubleTouchedBall> {
} _GameEvent_AttackerDoubleTouchedBall_default_instance_;
class GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AttackerTooCloseToDefenseArea> {
} _GameEvent_AttackerTooCloseToDefenseArea_default_instance_;
class GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotHeldBallDeliberately> {
} _GameEvent_BotHeldBallDeliberately_default_instance_;
class GameEvent_BotInterferedPlacementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotInterferedPlacement> {
} _GameEvent_BotInterferedPlacement_default_instance_;
class GameEvent_MultipleCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_MultipleCards> {
} _GameEvent_MultipleCards_default_instance_;
class GameEvent_MultipleFoulsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_MultipleFouls> {
} _GameEvent_MultipleFouls_default_instance_;
class GameEvent_MultiplePlacementFailuresDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_MultiplePlacementFailures> {
} _GameEvent_MultiplePlacementFailures_default_instance_;
class GameEvent_KickTimeoutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_KickTimeout> {
} _GameEvent_KickTimeout_default_instance_;
class GameEvent_NoProgressInGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_NoProgressInGame> {
} _GameEvent_NoProgressInGame_default_instance_;
class GameEvent_PlacementFailedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_PlacementFailed> {
} _GameEvent_PlacementFailed_default_instance_;
class GameEvent_UnsportingBehaviorMinorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_UnsportingBehaviorMinor> {
} _GameEvent_UnsportingBehaviorMinor_default_instance_;
class GameEvent_UnsportingBehaviorMajorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_UnsportingBehaviorMajor> {
} _GameEvent_UnsportingBehaviorMajor_default_instance_;
class GameEvent_KeeperHeldBallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_KeeperHeldBall> {
} _GameEvent_KeeperHeldBall_default_instance_;
class GameEvent_PlacementSucceededDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_PlacementSucceeded> {
} _GameEvent_PlacementSucceeded_default_instance_;
class GameEvent_PreparedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_Prepared> {
} _GameEvent_Prepared_default_instance_;
class GameEvent_BotSubstitutionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotSubstitution> {
} _GameEvent_BotSubstitution_default_instance_;
class GameEvent_TooManyRobotsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_TooManyRobots> {
} _GameEvent_TooManyRobots_default_instance_;
class GameEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEvent> {
  public:
  const ::GameEvent_Prepared* prepared_;
  const ::GameEvent_NoProgressInGame* no_progress_in_game_;
  const ::GameEvent_PlacementFailed* placement_failed_;
  const ::GameEvent_PlacementSucceeded* placement_succeeded_;
  const ::GameEvent_BotSubstitution* bot_substitution_;
  const ::GameEvent_TooManyRobots* too_many_robots_;
  const ::GameEvent_BallLeftField* ball_left_field_touch_line_;
  const ::GameEvent_BallLeftField* ball_left_field_goal_line_;
  const ::GameEvent_Goal* possible_goal_;
  const ::GameEvent_Goal* goal_;
  const ::GameEvent_IndirectGoal* indirect_goal_;
  const ::GameEvent_ChippedGoal* chipped_goal_;
  const ::GameEvent_AimlessKick* aimless_kick_;
  const ::GameEvent_KickTimeout* kick_timeout_;
  const ::GameEvent_KeeperHeldBall* keeper_held_ball_;
  const ::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball_;
  const ::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area_;
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_;
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped_;
  const ::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far_;
  const ::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast_;
  const ::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area_;
  const ::GameEvent_BotInterferedPlacement* bot_interfered_placement_;
  const ::GameEvent_BotCrashDrawn* bot_crash_drawn_;
  const ::GameEvent_BotCrashUnique* bot_crash_unique_;
  const ::GameEvent_BotCrashUnique* bot_crash_unique_skipped_;
  const ::GameEvent_BotPushedBot* bot_pushed_bot_;
  const ::GameEvent_BotPushedBot* bot_pushed_bot_skipped_;
  const ::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately_;
  const ::GameEvent_BotTippedOver* bot_tipped_over_;
  const ::GameEvent_BotTooFastInStop* bot_too_fast_in_stop_;
  const ::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point_;
  const ::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially_;
  const ::GameEvent_DefenderInDefenseArea* defender_in_defense_area_;
  const ::GameEvent_MultipleCards* multiple_cards_;
  const ::GameEvent_MultiplePlacementFailures* multiple_placement_failures_;
  const ::GameEvent_MultipleFouls* multiple_fouls_;
  const ::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor_;
  const ::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major_;
} _GameEvent_default_instance_;

namespace protobuf_ssl_5fgame_5fevent_5f2019_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[35];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BallLeftField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BallLeftField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BallLeftField, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BallLeftField, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BallLeftField, location_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AimlessKick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AimlessKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AimlessKick, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AimlessKick, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AimlessKick, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AimlessKick, kick_location_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Goal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Goal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Goal, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Goal, kicking_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Goal, kicking_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Goal, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Goal, kick_location_),
  2,
  4,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_IndirectGoal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_IndirectGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_IndirectGoal, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_IndirectGoal, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_IndirectGoal, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_IndirectGoal, kick_location_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_ChippedGoal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_ChippedGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_ChippedGoal, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_ChippedGoal, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_ChippedGoal, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_ChippedGoal, kick_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_ChippedGoal, max_ball_height_),
  2,
  3,
  0,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTooFastInStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTooFastInStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTooFastInStop, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTooFastInStop, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTooFastInStop, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTooFastInStop, speed_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashDrawn, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashDrawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashDrawn, bot_yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashDrawn, bot_blue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashDrawn, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashDrawn, crash_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashDrawn, speed_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashDrawn, crash_angle_),
  1,
  2,
  0,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, violator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, victim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, crash_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, speed_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotCrashUnique, crash_angle_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotPushedBot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotPushedBot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotPushedBot, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotPushedBot, violator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotPushedBot, victim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotPushedBot, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotPushedBot, pushed_distance_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTippedOver, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTippedOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTippedOver, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTippedOver, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotTippedOver, location_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, initial_ball_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, chipped_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, end_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, victim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, location_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, location_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, duration_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotInterferedPlacement, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotInterferedPlacement, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotInterferedPlacement, location_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultipleCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultipleCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultipleCards, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultipleFouls, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultipleFouls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultipleFouls, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultiplePlacementFailures, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultiplePlacementFailures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_MultiplePlacementFailures, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KickTimeout, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KickTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KickTimeout, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KickTimeout, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KickTimeout, time_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_NoProgressInGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_NoProgressInGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_NoProgressInGame, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_NoProgressInGame, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementFailed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementFailed, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementFailed, remaining_distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KeeperHeldBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KeeperHeldBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KeeperHeldBall, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KeeperHeldBall, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_KeeperHeldBall, duration_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementSucceeded, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementSucceeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementSucceeded, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementSucceeded, time_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementSucceeded, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_PlacementSucceeded, distance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Prepared, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Prepared, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_Prepared, time_taken_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotSubstitution, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotSubstitution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_BotSubstitution, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_TooManyRobots, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_TooManyRobots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_TooManyRobots, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, origin_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), prepared_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), no_progress_in_game_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), placement_failed_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), placement_succeeded_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_substitution_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), too_many_robots_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), ball_left_field_touch_line_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), ball_left_field_goal_line_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), possible_goal_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), goal_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), indirect_goal_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), chipped_goal_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), aimless_kick_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), kick_timeout_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), keeper_held_ball_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), attacker_double_touched_ball_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), attacker_touched_ball_in_defense_area_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), attacker_touched_opponent_in_defense_area_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), attacker_touched_opponent_in_defense_area_skipped_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_dribbled_ball_too_far_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_kicked_ball_too_fast_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), attacker_too_close_to_defense_area_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_interfered_placement_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_crash_drawn_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_crash_unique_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_crash_unique_skipped_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_pushed_bot_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_pushed_bot_skipped_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_held_ball_deliberately_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_tipped_over_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), bot_too_fast_in_stop_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), defender_too_close_to_kick_point_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), defender_in_defense_area_partially_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), defender_in_defense_area_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), multiple_cards_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), multiple_placement_failures_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), multiple_fouls_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), unsporting_behavior_minor_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GameEvent_default_instance_), unsporting_behavior_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, event_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(GameEvent_BallLeftField)},
  { 11, 20, sizeof(GameEvent_AimlessKick)},
  { 24, 34, sizeof(GameEvent_Goal)},
  { 39, 48, sizeof(GameEvent_IndirectGoal)},
  { 52, 62, sizeof(GameEvent_ChippedGoal)},
  { 67, 76, sizeof(GameEvent_BotTooFastInStop)},
  { 80, 89, sizeof(GameEvent_DefenderTooCloseToKickPoint)},
  { 93, 104, sizeof(GameEvent_BotCrashDrawn)},
  { 110, 122, sizeof(GameEvent_BotCrashUnique)},
  { 129, 139, sizeof(GameEvent_BotPushedBot)},
  { 144, 152, sizeof(GameEvent_BotTippedOver)},
  { 155, 164, sizeof(GameEvent_DefenderInDefenseArea)},
  { 168, 177, sizeof(GameEvent_DefenderInDefenseAreaPartially)},
  { 181, 190, sizeof(GameEvent_AttackerTouchedBallInDefenseArea)},
  { 194, 204, sizeof(GameEvent_BotKickedBallTooFast)},
  { 209, 218, sizeof(GameEvent_BotDribbledBallTooFar)},
  { 222, 231, sizeof(GameEvent_AttackerTouchedOpponentInDefenseArea)},
  { 235, 243, sizeof(GameEvent_AttackerDoubleTouchedBall)},
  { 246, 255, sizeof(GameEvent_AttackerTooCloseToDefenseArea)},
  { 259, 268, sizeof(GameEvent_BotHeldBallDeliberately)},
  { 272, 280, sizeof(GameEvent_BotInterferedPlacement)},
  { 283, 289, sizeof(GameEvent_MultipleCards)},
  { 290, 296, sizeof(GameEvent_MultipleFouls)},
  { 297, 303, sizeof(GameEvent_MultiplePlacementFailures)},
  { 304, 312, sizeof(GameEvent_KickTimeout)},
  { 315, 322, sizeof(GameEvent_NoProgressInGame)},
  { 324, 331, sizeof(GameEvent_PlacementFailed)},
  { 333, 340, sizeof(GameEvent_UnsportingBehaviorMinor)},
  { 342, 349, sizeof(GameEvent_UnsportingBehaviorMajor)},
  { 351, 359, sizeof(GameEvent_KeeperHeldBall)},
  { 362, 371, sizeof(GameEvent_PlacementSucceeded)},
  { 375, 381, sizeof(GameEvent_Prepared)},
  { 382, 388, sizeof(GameEvent_BotSubstitution)},
  { 389, 395, sizeof(GameEvent_TooManyRobots)},
  { 396, 443, sizeof(GameEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BallLeftField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_AimlessKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_Goal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_IndirectGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_ChippedGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotTooFastInStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_DefenderTooCloseToKickPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotCrashDrawn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotCrashUnique_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotPushedBot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotTippedOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_DefenderInDefenseArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_DefenderInDefenseAreaPartially_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotKickedBallTooFast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotDribbledBallTooFar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_AttackerDoubleTouchedBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_AttackerTooCloseToDefenseArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotHeldBallDeliberately_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotInterferedPlacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_MultipleCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_MultipleFouls_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_MultiplePlacementFailures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_KickTimeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_NoProgressInGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_PlacementFailed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_UnsportingBehaviorMinor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_UnsportingBehaviorMajor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_KeeperHeldBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_PlacementSucceeded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_Prepared_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_BotSubstitution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_TooManyRobots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEvent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ssl_game_event_2019.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 35);
}

}  // namespace

void TableStruct::Shutdown() {
  _GameEvent_BallLeftField_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GameEvent_AimlessKick_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GameEvent_Goal_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GameEvent_IndirectGoal_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GameEvent_ChippedGoal_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GameEvent_BotTooFastInStop_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _GameEvent_DefenderTooCloseToKickPoint_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GameEvent_BotCrashDrawn_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GameEvent_BotCrashUnique_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GameEvent_BotPushedBot_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GameEvent_BotTippedOver_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GameEvent_DefenderInDefenseArea_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _GameEvent_DefenderInDefenseAreaPartially_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _GameEvent_BotKickedBallTooFast_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _GameEvent_BotDribbledBallTooFar_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GameEvent_AttackerDoubleTouchedBall_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _GameEvent_AttackerTooCloseToDefenseArea_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GameEvent_BotHeldBallDeliberately_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _GameEvent_BotInterferedPlacement_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _GameEvent_MultipleCards_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _GameEvent_MultipleFouls_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _GameEvent_MultiplePlacementFailures_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _GameEvent_KickTimeout_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _GameEvent_NoProgressInGame_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _GameEvent_PlacementFailed_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _GameEvent_UnsportingBehaviorMinor_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _GameEvent_UnsportingBehaviorMajor_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _GameEvent_KeeperHeldBall_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _GameEvent_PlacementSucceeded_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _GameEvent_Prepared_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _GameEvent_BotSubstitution_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _GameEvent_TooManyRobots_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _GameEvent_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::InitDefaults();
  _GameEvent_BallLeftField_default_instance_.DefaultConstruct();
  _GameEvent_AimlessKick_default_instance_.DefaultConstruct();
  _GameEvent_Goal_default_instance_.DefaultConstruct();
  _GameEvent_IndirectGoal_default_instance_.DefaultConstruct();
  _GameEvent_ChippedGoal_default_instance_.DefaultConstruct();
  _GameEvent_BotTooFastInStop_default_instance_.DefaultConstruct();
  _GameEvent_DefenderTooCloseToKickPoint_default_instance_.DefaultConstruct();
  _GameEvent_BotCrashDrawn_default_instance_.DefaultConstruct();
  _GameEvent_BotCrashUnique_default_instance_.DefaultConstruct();
  _GameEvent_BotPushedBot_default_instance_.DefaultConstruct();
  _GameEvent_BotTippedOver_default_instance_.DefaultConstruct();
  _GameEvent_DefenderInDefenseArea_default_instance_.DefaultConstruct();
  _GameEvent_DefenderInDefenseAreaPartially_default_instance_.DefaultConstruct();
  _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_.DefaultConstruct();
  _GameEvent_BotKickedBallTooFast_default_instance_.DefaultConstruct();
  _GameEvent_BotDribbledBallTooFar_default_instance_.DefaultConstruct();
  _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_.DefaultConstruct();
  _GameEvent_AttackerDoubleTouchedBall_default_instance_.DefaultConstruct();
  _GameEvent_AttackerTooCloseToDefenseArea_default_instance_.DefaultConstruct();
  _GameEvent_BotHeldBallDeliberately_default_instance_.DefaultConstruct();
  _GameEvent_BotInterferedPlacement_default_instance_.DefaultConstruct();
  _GameEvent_MultipleCards_default_instance_.DefaultConstruct();
  _GameEvent_MultipleFouls_default_instance_.DefaultConstruct();
  _GameEvent_MultiplePlacementFailures_default_instance_.DefaultConstruct();
  _GameEvent_KickTimeout_default_instance_.DefaultConstruct();
  _GameEvent_NoProgressInGame_default_instance_.DefaultConstruct();
  _GameEvent_PlacementFailed_default_instance_.DefaultConstruct();
  _GameEvent_UnsportingBehaviorMinor_default_instance_.DefaultConstruct();
  _GameEvent_UnsportingBehaviorMajor_default_instance_.DefaultConstruct();
  _GameEvent_KeeperHeldBall_default_instance_.DefaultConstruct();
  _GameEvent_PlacementSucceeded_default_instance_.DefaultConstruct();
  _GameEvent_Prepared_default_instance_.DefaultConstruct();
  _GameEvent_BotSubstitution_default_instance_.DefaultConstruct();
  _GameEvent_TooManyRobots_default_instance_.DefaultConstruct();
  _GameEvent_default_instance_.DefaultConstruct();
  _GameEvent_BallLeftField_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_AimlessKick_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_AimlessKick_default_instance_.get_mutable()->kick_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_Goal_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_Goal_default_instance_.get_mutable()->kick_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_IndirectGoal_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_IndirectGoal_default_instance_.get_mutable()->kick_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_ChippedGoal_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_ChippedGoal_default_instance_.get_mutable()->kick_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotTooFastInStop_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_DefenderTooCloseToKickPoint_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotCrashDrawn_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotCrashUnique_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotPushedBot_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotTippedOver_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_DefenderInDefenseArea_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_DefenderInDefenseAreaPartially_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotKickedBallTooFast_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotDribbledBallTooFar_default_instance_.get_mutable()->start_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotDribbledBallTooFar_default_instance_.get_mutable()->end_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_AttackerDoubleTouchedBall_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_AttackerTooCloseToDefenseArea_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotHeldBallDeliberately_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_BotInterferedPlacement_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_KickTimeout_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_NoProgressInGame_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_KeeperHeldBall_default_instance_.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  _GameEvent_default_instance_.prepared_ = const_cast< ::GameEvent_Prepared*>(
      ::GameEvent_Prepared::internal_default_instance());
  _GameEvent_default_instance_.no_progress_in_game_ = const_cast< ::GameEvent_NoProgressInGame*>(
      ::GameEvent_NoProgressInGame::internal_default_instance());
  _GameEvent_default_instance_.placement_failed_ = const_cast< ::GameEvent_PlacementFailed*>(
      ::GameEvent_PlacementFailed::internal_default_instance());
  _GameEvent_default_instance_.placement_succeeded_ = const_cast< ::GameEvent_PlacementSucceeded*>(
      ::GameEvent_PlacementSucceeded::internal_default_instance());
  _GameEvent_default_instance_.bot_substitution_ = const_cast< ::GameEvent_BotSubstitution*>(
      ::GameEvent_BotSubstitution::internal_default_instance());
  _GameEvent_default_instance_.too_many_robots_ = const_cast< ::GameEvent_TooManyRobots*>(
      ::GameEvent_TooManyRobots::internal_default_instance());
  _GameEvent_default_instance_.ball_left_field_touch_line_ = const_cast< ::GameEvent_BallLeftField*>(
      ::GameEvent_BallLeftField::internal_default_instance());
  _GameEvent_default_instance_.ball_left_field_goal_line_ = const_cast< ::GameEvent_BallLeftField*>(
      ::GameEvent_BallLeftField::internal_default_instance());
  _GameEvent_default_instance_.possible_goal_ = const_cast< ::GameEvent_Goal*>(
      ::GameEvent_Goal::internal_default_instance());
  _GameEvent_default_instance_.goal_ = const_cast< ::GameEvent_Goal*>(
      ::GameEvent_Goal::internal_default_instance());
  _GameEvent_default_instance_.indirect_goal_ = const_cast< ::GameEvent_IndirectGoal*>(
      ::GameEvent_IndirectGoal::internal_default_instance());
  _GameEvent_default_instance_.chipped_goal_ = const_cast< ::GameEvent_ChippedGoal*>(
      ::GameEvent_ChippedGoal::internal_default_instance());
  _GameEvent_default_instance_.aimless_kick_ = const_cast< ::GameEvent_AimlessKick*>(
      ::GameEvent_AimlessKick::internal_default_instance());
  _GameEvent_default_instance_.kick_timeout_ = const_cast< ::GameEvent_KickTimeout*>(
      ::GameEvent_KickTimeout::internal_default_instance());
  _GameEvent_default_instance_.keeper_held_ball_ = const_cast< ::GameEvent_KeeperHeldBall*>(
      ::GameEvent_KeeperHeldBall::internal_default_instance());
  _GameEvent_default_instance_.attacker_double_touched_ball_ = const_cast< ::GameEvent_AttackerDoubleTouchedBall*>(
      ::GameEvent_AttackerDoubleTouchedBall::internal_default_instance());
  _GameEvent_default_instance_.attacker_touched_ball_in_defense_area_ = const_cast< ::GameEvent_AttackerTouchedBallInDefenseArea*>(
      ::GameEvent_AttackerTouchedBallInDefenseArea::internal_default_instance());
  _GameEvent_default_instance_.attacker_touched_opponent_in_defense_area_ = const_cast< ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(
      ::GameEvent_AttackerTouchedOpponentInDefenseArea::internal_default_instance());
  _GameEvent_default_instance_.attacker_touched_opponent_in_defense_area_skipped_ = const_cast< ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(
      ::GameEvent_AttackerTouchedOpponentInDefenseArea::internal_default_instance());
  _GameEvent_default_instance_.bot_dribbled_ball_too_far_ = const_cast< ::GameEvent_BotDribbledBallTooFar*>(
      ::GameEvent_BotDribbledBallTooFar::internal_default_instance());
  _GameEvent_default_instance_.bot_kicked_ball_too_fast_ = const_cast< ::GameEvent_BotKickedBallTooFast*>(
      ::GameEvent_BotKickedBallTooFast::internal_default_instance());
  _GameEvent_default_instance_.attacker_too_close_to_defense_area_ = const_cast< ::GameEvent_AttackerTooCloseToDefenseArea*>(
      ::GameEvent_AttackerTooCloseToDefenseArea::internal_default_instance());
  _GameEvent_default_instance_.bot_interfered_placement_ = const_cast< ::GameEvent_BotInterferedPlacement*>(
      ::GameEvent_BotInterferedPlacement::internal_default_instance());
  _GameEvent_default_instance_.bot_crash_drawn_ = const_cast< ::GameEvent_BotCrashDrawn*>(
      ::GameEvent_BotCrashDrawn::internal_default_instance());
  _GameEvent_default_instance_.bot_crash_unique_ = const_cast< ::GameEvent_BotCrashUnique*>(
      ::GameEvent_BotCrashUnique::internal_default_instance());
  _GameEvent_default_instance_.bot_crash_unique_skipped_ = const_cast< ::GameEvent_BotCrashUnique*>(
      ::GameEvent_BotCrashUnique::internal_default_instance());
  _GameEvent_default_instance_.bot_pushed_bot_ = const_cast< ::GameEvent_BotPushedBot*>(
      ::GameEvent_BotPushedBot::internal_default_instance());
  _GameEvent_default_instance_.bot_pushed_bot_skipped_ = const_cast< ::GameEvent_BotPushedBot*>(
      ::GameEvent_BotPushedBot::internal_default_instance());
  _GameEvent_default_instance_.bot_held_ball_deliberately_ = const_cast< ::GameEvent_BotHeldBallDeliberately*>(
      ::GameEvent_BotHeldBallDeliberately::internal_default_instance());
  _GameEvent_default_instance_.bot_tipped_over_ = const_cast< ::GameEvent_BotTippedOver*>(
      ::GameEvent_BotTippedOver::internal_default_instance());
  _GameEvent_default_instance_.bot_too_fast_in_stop_ = const_cast< ::GameEvent_BotTooFastInStop*>(
      ::GameEvent_BotTooFastInStop::internal_default_instance());
  _GameEvent_default_instance_.defender_too_close_to_kick_point_ = const_cast< ::GameEvent_DefenderTooCloseToKickPoint*>(
      ::GameEvent_DefenderTooCloseToKickPoint::internal_default_instance());
  _GameEvent_default_instance_.defender_in_defense_area_partially_ = const_cast< ::GameEvent_DefenderInDefenseAreaPartially*>(
      ::GameEvent_DefenderInDefenseAreaPartially::internal_default_instance());
  _GameEvent_default_instance_.defender_in_defense_area_ = const_cast< ::GameEvent_DefenderInDefenseArea*>(
      ::GameEvent_DefenderInDefenseArea::internal_default_instance());
  _GameEvent_default_instance_.multiple_cards_ = const_cast< ::GameEvent_MultipleCards*>(
      ::GameEvent_MultipleCards::internal_default_instance());
  _GameEvent_default_instance_.multiple_placement_failures_ = const_cast< ::GameEvent_MultiplePlacementFailures*>(
      ::GameEvent_MultiplePlacementFailures::internal_default_instance());
  _GameEvent_default_instance_.multiple_fouls_ = const_cast< ::GameEvent_MultipleFouls*>(
      ::GameEvent_MultipleFouls::internal_default_instance());
  _GameEvent_default_instance_.unsporting_behavior_minor_ = const_cast< ::GameEvent_UnsportingBehaviorMinor*>(
      ::GameEvent_UnsportingBehaviorMinor::internal_default_instance());
  _GameEvent_default_instance_.unsporting_behavior_major_ = const_cast< ::GameEvent_UnsportingBehaviorMajor*>(
      ::GameEvent_UnsportingBehaviorMajor::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031ssl_game_event_2019.proto\032 ssl_game_co"
      "ntroller_common.proto\"\376-\n\tGameEvent\022\034\n\004t"
      "ype\030( \002(\0162\016.GameEventType\022\016\n\006origin\030) \003("
      "\t\022\'\n\010prepared\030\001 \001(\0132\023.GameEvent.Prepared"
      "H\000\022:\n\023no_progress_in_game\030\002 \001(\0132\033.GameEv"
      "ent.NoProgressInGameH\000\0226\n\020placement_fail"
      "ed\030\003 \001(\0132\032.GameEvent.PlacementFailedH\000\022<"
      "\n\023placement_succeeded\030\005 \001(\0132\035.GameEvent."
      "PlacementSucceededH\000\0226\n\020bot_substitution"
      "\030% \001(\0132\032.GameEvent.BotSubstitutionH\000\0223\n\017"
      "too_many_robots\030& \001(\0132\030.GameEvent.TooMan"
      "yRobotsH\000\022>\n\032ball_left_field_touch_line\030"
      "\006 \001(\0132\030.GameEvent.BallLeftFieldH\000\022=\n\031bal"
      "l_left_field_goal_line\030\007 \001(\0132\030.GameEvent"
      ".BallLeftFieldH\000\022(\n\rpossible_goal\030\' \001(\0132"
      "\017.GameEvent.GoalH\000\022\037\n\004goal\030\010 \001(\0132\017.GameE"
      "vent.GoalH\000\0220\n\rindirect_goal\030\t \001(\0132\027.Gam"
      "eEvent.IndirectGoalH\000\022.\n\014chipped_goal\030\n "
      "\001(\0132\026.GameEvent.ChippedGoalH\000\022.\n\014aimless"
      "_kick\030\013 \001(\0132\026.GameEvent.AimlessKickH\000\022.\n"
      "\014kick_timeout\030\014 \001(\0132\026.GameEvent.KickTime"
      "outH\000\0225\n\020keeper_held_ball\030\r \001(\0132\031.GameEv"
      "ent.KeeperHeldBallH\000\022L\n\034attacker_double_"
      "touched_ball\030\016 \001(\0132$.GameEvent.AttackerD"
      "oubleTouchedBallH\000\022\\\n%attacker_touched_b"
      "all_in_defense_area\030\017 \001(\0132+.GameEvent.At"
      "tackerTouchedBallInDefenseAreaH\000\022d\n)atta"
      "cker_touched_opponent_in_defense_area\030\020 "
      "\001(\0132/.GameEvent.AttackerTouchedOpponentI"
      "nDefenseAreaH\000\022l\n1attacker_touched_oppon"
      "ent_in_defense_area_skipped\030* \001(\0132/.Game"
      "Event.AttackerTouchedOpponentInDefenseAr"
      "eaH\000\022E\n\031bot_dribbled_ball_too_far\030\021 \001(\0132"
      " .GameEvent.BotDribbledBallTooFarH\000\022C\n\030b"
      "ot_kicked_ball_too_fast\030\022 \001(\0132\037.GameEven"
      "t.BotKickedBallTooFastH\000\022V\n\"attacker_too"
      "_close_to_defense_area\030\023 \001(\0132(.GameEvent"
      ".AttackerTooCloseToDefenseAreaH\000\022E\n\030bot_"
      "interfered_placement\030\024 \001(\0132!.GameEvent.B"
      "otInterferedPlacementH\000\0223\n\017bot_crash_dra"
      "wn\030\025 \001(\0132\030.GameEvent.BotCrashDrawnH\000\0225\n\020"
      "bot_crash_unique\030\026 \001(\0132\031.GameEvent.BotCr"
      "ashUniqueH\000\022=\n\030bot_crash_unique_skipped\030"
      "\027 \001(\0132\031.GameEvent.BotCrashUniqueH\000\0221\n\016bo"
      "t_pushed_bot\030\030 \001(\0132\027.GameEvent.BotPushed"
      "BotH\000\0229\n\026bot_pushed_bot_skipped\030\031 \001(\0132\027."
      "GameEvent.BotPushedBotH\000\022H\n\032bot_held_bal"
      "l_deliberately\030\032 \001(\0132\".GameEvent.BotHeld"
      "BallDeliberatelyH\000\0223\n\017bot_tipped_over\030\033 "
      "\001(\0132\030.GameEvent.BotTippedOverH\000\022;\n\024bot_t"
      "oo_fast_in_stop\030\034 \001(\0132\033.GameEvent.BotToo"
      "FastInStopH\000\022R\n defender_too_close_to_ki"
      "ck_point\030\035 \001(\0132&.GameEvent.DefenderTooCl"
      "oseToKickPointH\000\022W\n\"defender_in_defense_"
      "area_partially\030\036 \001(\0132).GameEvent.Defende"
      "rInDefenseAreaPartiallyH\000\022D\n\030defender_in"
      "_defense_area\030\037 \001(\0132 .GameEvent.Defender"
      "InDefenseAreaH\000\0222\n\016multiple_cards\030  \001(\0132"
      "\030.GameEvent.MultipleCardsH\000\022K\n\033multiple_"
      "placement_failures\030! \001(\0132$.GameEvent.Mul"
      "tiplePlacementFailuresH\000\0222\n\016multiple_fou"
      "ls\030\" \001(\0132\030.GameEvent.MultipleFoulsH\000\022G\n\031"
      "unsporting_behavior_minor\030# \001(\0132\".GameEv"
      "ent.UnsportingBehaviorMinorH\000\022G\n\031unsport"
      "ing_behavior_major\030$ \001(\0132\".GameEvent.Uns"
      "portingBehaviorMajorH\000\032T\n\rBallLeftField\022"
      "\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022"
      "\033\n\010location\030\003 \001(\0132\t.Location\032t\n\013AimlessK"
      "ick\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 "
      "\001(\r\022\033\n\010location\030\003 \001(\0132\t.Location\022 \n\rkick"
      "_location\030\004 \001(\0132\t.Location\032\217\001\n\004Goal\022\026\n\007b"
      "y_team\030\001 \002(\0162\005.Team\022\033\n\014kicking_team\030\006 \001("
      "\0162\005.Team\022\023\n\013kicking_bot\030\002 \001(\r\022\033\n\010locatio"
      "n\030\003 \001(\0132\t.Location\022 \n\rkick_location\030\004 \001("
      "\0132\t.Location\032u\n\014IndirectGoal\022\026\n\007by_team\030"
      "\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\033\n\010location"
      "\030\003 \001(\0132\t.Location\022 \n\rkick_location\030\004 \001(\013"
      "2\t.Location\032\215\001\n\013ChippedGoal\022\026\n\007by_team\030\001"
      " \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\033\n\010location\030"
      "\003 \001(\0132\t.Location\022 \n\rkick_location\030\004 \001(\0132"
      "\t.Location\022\027\n\017max_ball_height\030\005 \001(\002\032f\n\020B"
      "otTooFastInStop\022\026\n\007by_team\030\001 \002(\0162\005.Team\022"
      "\016\n\006by_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Loca"
      "tion\022\r\n\005speed\030\004 \001(\002\032t\n\033DefenderTooCloseT"
      "oKickPoint\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by"
      "_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Location\022"
      "\020\n\010distance\030\004 \001(\002\032\220\001\n\rBotCrashDrawn\022\022\n\nb"
      "ot_yellow\030\001 \001(\r\022\020\n\010bot_blue\030\002 \001(\r\022\033\n\010loc"
      "ation\030\003 \001(\0132\t.Location\022\023\n\013crash_speed\030\004 "
      "\001(\002\022\022\n\nspeed_diff\030\005 \001(\002\022\023\n\013crash_angle\030\006"
      " \001(\002\032\245\001\n\016BotCrashUnique\022\026\n\007by_team\030\001 \002(\016"
      "2\005.Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim\030\003 \001("
      "\r\022\033\n\010location\030\004 \001(\0132\t.Location\022\023\n\013crash_"
      "speed\030\005 \001(\002\022\022\n\nspeed_diff\030\006 \001(\002\022\023\n\013crash"
      "_angle\030\007 \001(\002\032~\n\014BotPushedBot\022\026\n\007by_team\030"
      "\001 \002(\0162\005.Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim"
      "\030\003 \001(\r\022\033\n\010location\030\004 \001(\0132\t.Location\022\027\n\017p"
      "ushed_distance\030\005 \001(\002\032T\n\rBotTippedOver\022\026\n"
      "\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\033\n"
      "\010location\030\003 \001(\0132\t.Location\032n\n\025DefenderIn"
      "DefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006b"
      "y_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Location"
      "\022\020\n\010distance\030\004 \001(\002\032w\n\036DefenderInDefenseA"
      "reaPartially\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006"
      "by_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Locatio"
      "n\022\020\n\010distance\030\004 \001(\002\032y\n AttackerTouchedBa"
      "llInDefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022"
      "\016\n\006by_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Loca"
      "tion\022\020\n\010distance\030\004 \001(\002\032\210\001\n\024BotKickedBall"
      "TooFast\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bo"
      "t\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Location\022\032\n\022"
      "initial_ball_speed\030\004 \001(\002\022\017\n\007chipped\030\005 \001("
      "\010\032q\n\025BotDribbledBallTooFar\022\026\n\007by_team\030\001 "
      "\002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\030\n\005start\030\003 \001("
      "\0132\t.Location\022\026\n\003end\030\004 \001(\0132\t.Location\032{\n$"
      "AttackerTouchedOpponentInDefenseArea\022\026\n\007"
      "by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\016\n\006"
      "victim\030\004 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Locatio"
      "n\032`\n\031AttackerDoubleTouchedBall\022\026\n\007by_tea"
      "m\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\033\n\010locati"
      "on\030\003 \001(\0132\t.Location\032v\n\035AttackerTooCloseT"
      "oDefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006"
      "by_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Locatio"
      "n\022\020\n\010distance\030\004 \001(\002\032p\n\027BotHeldBallDelibe"
      "rately\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot"
      "\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Location\022\020\n\010d"
      "uration\030\004 \001(\002\032]\n\026BotInterferedPlacement\022"
      "\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022"
      "\033\n\010location\030\003 \001(\0132\t.Location\032\'\n\rMultiple"
      "Cards\022\026\n\007by_team\030\001 \002(\0162\005.Team\032\'\n\rMultipl"
      "eFouls\022\026\n\007by_team\030\001 \002(\0162\005.Team\0323\n\031Multip"
      "lePlacementFailures\022\026\n\007by_team\030\001 \002(\0162\005.T"
      "eam\032P\n\013KickTimeout\022\026\n\007by_team\030\001 \002(\0162\005.Te"
      "am\022\033\n\010location\030\002 \001(\0132\t.Location\022\014\n\004time\030"
      "\003 \001(\002\032=\n\020NoProgressInGame\022\033\n\010location\030\001 "
      "\001(\0132\t.Location\022\014\n\004time\030\002 \001(\002\032E\n\017Placemen"
      "tFailed\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\022remai"
      "ning_distance\030\002 \001(\002\032A\n\027UnsportingBehavio"
      "rMinor\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006reason"
      "\030\002 \002(\t\032A\n\027UnsportingBehaviorMajor\022\026\n\007by_"
      "team\030\001 \002(\0162\005.Team\022\016\n\006reason\030\002 \002(\t\032W\n\016Kee"
      "perHeldBall\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\033\n\010l"
      "ocation\030\002 \001(\0132\t.Location\022\020\n\010duration\030\003 \001"
      "(\002\032e\n\022PlacementSucceeded\022\026\n\007by_team\030\001 \002("
      "\0162\005.Team\022\022\n\ntime_taken\030\002 \001(\002\022\021\n\tprecisio"
      "n\030\003 \001(\002\022\020\n\010distance\030\004 \001(\002\032\036\n\010Prepared\022\022\n"
      "\ntime_taken\030\001 \001(\002\032)\n\017BotSubstitution\022\026\n\007"
      "by_team\030\001 \002(\0162\005.Team\032\'\n\rTooManyRobots\022\026\n"
      "\007by_team\030\001 \002(\0162\005.TeamB\007\n\005event*\331\010\n\rGameE"
      "ventType\022\033\n\027UNKNOWN_GAME_EVENT_TYPE\020\000\022\014\n"
      "\010PREPARED\020\001\022\027\n\023NO_PROGRESS_IN_GAME\020\002\022\024\n\020"
      "PLACEMENT_FAILED\020\003\022\027\n\023PLACEMENT_SUCCEEDE"
      "D\020\005\022\024\n\020BOT_SUBSTITUTION\020%\022\023\n\017TOO_MANY_RO"
      "BOTS\020&\022\036\n\032BALL_LEFT_FIELD_TOUCH_LINE\020\006\022\035"
      "\n\031BALL_LEFT_FIELD_GOAL_LINE\020\007\022\021\n\rPOSSIBL"
      "E_GOAL\020\'\022\010\n\004GOAL\020\010\022\021\n\rINDIRECT_GOAL\020\t\022\020\n"
      "\014CHIPPED_GOAL\020\n\022\020\n\014AIMLESS_KICK\020\013\022\020\n\014KIC"
      "K_TIMEOUT\020\014\022\024\n\020KEEPER_HELD_BALL\020\r\022 \n\034ATT"
      "ACKER_DOUBLE_TOUCHED_BALL\020\016\022)\n%ATTACKER_"
      "TOUCHED_BALL_IN_DEFENSE_AREA\020\017\022-\n)ATTACK"
      "ER_TOUCHED_OPPONENT_IN_DEFENSE_AREA\020\020\0225\n"
      "1ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AR"
      "EA_SKIPPED\020(\022\035\n\031BOT_DRIBBLED_BALL_TOO_FA"
      "R\020\021\022\034\n\030BOT_KICKED_BALL_TOO_FAST\020\022\022&\n\"ATT"
      "ACKER_TOO_CLOSE_TO_DEFENSE_AREA\020\023\022\034\n\030BOT"
      "_INTERFERED_PLACEMENT\020\024\022\023\n\017BOT_CRASH_DRA"
      "WN\020\025\022\024\n\020BOT_CRASH_UNIQUE\020\026\022\034\n\030BOT_CRASH_"
      "UNIQUE_SKIPPED\020\027\022\022\n\016BOT_PUSHED_BOT\020\030\022\032\n\026"
      "BOT_PUSHED_BOT_SKIPPED\020\031\022\036\n\032BOT_HELD_BAL"
      "L_DELIBERATELY\020\032\022\023\n\017BOT_TIPPED_OVER\020\033\022\030\n"
      "\024BOT_TOO_FAST_IN_STOP\020\034\022$\n DEFENDER_TOO_"
      "CLOSE_TO_KICK_POINT\020\035\022&\n\"DEFENDER_IN_DEF"
      "ENSE_AREA_PARTIALLY\020\036\022\034\n\030DEFENDER_IN_DEF"
      "ENSE_AREA\020\037\022\022\n\016MULTIPLE_CARDS\020 \022\037\n\033MULTI"
      "PLE_PLACEMENT_FAILURES\020!\022\022\n\016MULTIPLE_FOU"
      "LS\020\"\022\035\n\031UNSPORTING_BEHAVIOR_MINOR\020#\022\035\n\031U"
      "NSPORTING_BEHAVIOR_MAJOR\020$"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7066);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_game_event_2019.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ssl_5fgame_5fevent_5f2019_2eproto

const ::google::protobuf::EnumDescriptor* GameEventType_descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_enum_descriptors[0];
}
bool GameEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BallLeftField::kByTeamFieldNumber;
const int GameEvent_BallLeftField::kByBotFieldNumber;
const int GameEvent_BallLeftField::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BallLeftField::GameEvent_BallLeftField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BallLeftField)
}
GameEvent_BallLeftField::GameEvent_BallLeftField(const GameEvent_BallLeftField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BallLeftField)
}

void GameEvent_BallLeftField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&location_) + sizeof(by_bot_));
}

GameEvent_BallLeftField::~GameEvent_BallLeftField() {
  // @@protoc_insertion_point(destructor:GameEvent.BallLeftField)
  SharedDtor();
}

void GameEvent_BallLeftField::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BallLeftField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BallLeftField::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BallLeftField& GameEvent_BallLeftField::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BallLeftField* GameEvent_BallLeftField::New(::google::protobuf::Arena* arena) const {
  GameEvent_BallLeftField* n = new GameEvent_BallLeftField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BallLeftField::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BallLeftField)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BallLeftField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BallLeftField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BallLeftField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BallLeftField)
  return false;
#undef DO_
}

void GameEvent_BallLeftField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BallLeftField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BallLeftField)
}

::google::protobuf::uint8* GameEvent_BallLeftField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BallLeftField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BallLeftField)
  return target;
}

size_t GameEvent_BallLeftField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BallLeftField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BallLeftField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BallLeftField)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BallLeftField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BallLeftField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BallLeftField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BallLeftField)
    MergeFrom(*source);
  }
}

void GameEvent_BallLeftField::MergeFrom(const GameEvent_BallLeftField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BallLeftField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BallLeftField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BallLeftField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BallLeftField::CopyFrom(const GameEvent_BallLeftField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BallLeftField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BallLeftField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BallLeftField::Swap(GameEvent_BallLeftField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BallLeftField::InternalSwap(GameEvent_BallLeftField* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BallLeftField::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BallLeftField

// required .Team by_team = 1;
bool GameEvent_BallLeftField::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BallLeftField::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BallLeftField::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BallLeftField::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BallLeftField::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BallLeftField.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BallLeftField::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BallLeftField.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_BallLeftField::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BallLeftField::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BallLeftField::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BallLeftField::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_BallLeftField::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BallLeftField.by_bot)
  return by_bot_;
}
void GameEvent_BallLeftField::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BallLeftField.by_bot)
}

// optional .Location location = 3;
bool GameEvent_BallLeftField::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BallLeftField::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BallLeftField::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BallLeftField::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BallLeftField::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BallLeftField.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BallLeftField::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BallLeftField.location)
  return location_;
}
::Location* GameEvent_BallLeftField::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BallLeftField.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BallLeftField::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BallLeftField.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AimlessKick::kByTeamFieldNumber;
const int GameEvent_AimlessKick::kByBotFieldNumber;
const int GameEvent_AimlessKick::kLocationFieldNumber;
const int GameEvent_AimlessKick::kKickLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AimlessKick::GameEvent_AimlessKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AimlessKick)
}
GameEvent_AimlessKick::GameEvent_AimlessKick(const GameEvent_AimlessKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_kick_location()) {
    kick_location_ = new ::Location(*from.kick_location_);
  } else {
    kick_location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AimlessKick)
}

void GameEvent_AimlessKick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&location_) + sizeof(by_bot_));
}

GameEvent_AimlessKick::~GameEvent_AimlessKick() {
  // @@protoc_insertion_point(destructor:GameEvent.AimlessKick)
  SharedDtor();
}

void GameEvent_AimlessKick::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete kick_location_;
  }
}

void GameEvent_AimlessKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_AimlessKick::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AimlessKick& GameEvent_AimlessKick::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_AimlessKick* GameEvent_AimlessKick::New(::google::protobuf::Arena* arena) const {
  GameEvent_AimlessKick* n = new GameEvent_AimlessKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_AimlessKick::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AimlessKick)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::Location::Clear();
    }
    if (has_kick_location()) {
      GOOGLE_DCHECK(kick_location_ != NULL);
      kick_location_->::Location::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AimlessKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AimlessKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location kick_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kick_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AimlessKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AimlessKick)
  return false;
#undef DO_
}

void GameEvent_AimlessKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AimlessKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->kick_location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AimlessKick)
}

::google::protobuf::uint8* GameEvent_AimlessKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AimlessKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->kick_location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AimlessKick)
  return target;
}

size_t GameEvent_AimlessKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AimlessKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .Location kick_location = 4;
    if (has_kick_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kick_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_AimlessKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AimlessKick)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AimlessKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AimlessKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AimlessKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AimlessKick)
    MergeFrom(*source);
  }
}

void GameEvent_AimlessKick::MergeFrom(const GameEvent_AimlessKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AimlessKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kick_location()->::Location::MergeFrom(from.kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AimlessKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AimlessKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AimlessKick::CopyFrom(const GameEvent_AimlessKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AimlessKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AimlessKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_kick_location()) {
    if (!this->kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AimlessKick::Swap(GameEvent_AimlessKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AimlessKick::InternalSwap(GameEvent_AimlessKick* other) {
  std::swap(location_, other->location_);
  std::swap(kick_location_, other->kick_location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_AimlessKick::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_AimlessKick

// required .Team by_team = 1;
bool GameEvent_AimlessKick::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_AimlessKick::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_AimlessKick::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_AimlessKick::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_AimlessKick::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AimlessKick.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_AimlessKick::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AimlessKick.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_AimlessKick::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_AimlessKick::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_AimlessKick::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_AimlessKick::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_AimlessKick::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AimlessKick.by_bot)
  return by_bot_;
}
void GameEvent_AimlessKick::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AimlessKick.by_bot)
}

// optional .Location location = 3;
bool GameEvent_AimlessKick::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_AimlessKick::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_AimlessKick::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AimlessKick::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_AimlessKick::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.AimlessKick.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_AimlessKick::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.AimlessKick.location)
  return location_;
}
::Location* GameEvent_AimlessKick::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.AimlessKick.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_AimlessKick::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AimlessKick.location)
}

// optional .Location kick_location = 4;
bool GameEvent_AimlessKick::has_kick_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_AimlessKick::set_has_kick_location() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_AimlessKick::clear_has_kick_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_AimlessKick::clear_kick_location() {
  if (kick_location_ != NULL) kick_location_->::Location::Clear();
  clear_has_kick_location();
}
const ::Location& GameEvent_AimlessKick::kick_location() const {
  // @@protoc_insertion_point(field_get:GameEvent.AimlessKick.kick_location)
  return kick_location_ != NULL ? *kick_location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_AimlessKick::mutable_kick_location() {
  set_has_kick_location();
  if (kick_location_ == NULL) {
    kick_location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.AimlessKick.kick_location)
  return kick_location_;
}
::Location* GameEvent_AimlessKick::release_kick_location() {
  // @@protoc_insertion_point(field_release:GameEvent.AimlessKick.kick_location)
  clear_has_kick_location();
  ::Location* temp = kick_location_;
  kick_location_ = NULL;
  return temp;
}
void GameEvent_AimlessKick::set_allocated_kick_location(::Location* kick_location) {
  delete kick_location_;
  kick_location_ = kick_location;
  if (kick_location) {
    set_has_kick_location();
  } else {
    clear_has_kick_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AimlessKick.kick_location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_Goal::kByTeamFieldNumber;
const int GameEvent_Goal::kKickingTeamFieldNumber;
const int GameEvent_Goal::kKickingBotFieldNumber;
const int GameEvent_Goal::kLocationFieldNumber;
const int GameEvent_Goal::kKickLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_Goal::GameEvent_Goal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.Goal)
}
GameEvent_Goal::GameEvent_Goal(const GameEvent_Goal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_kick_location()) {
    kick_location_ = new ::Location(*from.kick_location_);
  } else {
    kick_location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&kicking_team_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(kicking_team_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.Goal)
}

void GameEvent_Goal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&kicking_team_) -
    reinterpret_cast<char*>(&location_) + sizeof(kicking_team_));
}

GameEvent_Goal::~GameEvent_Goal() {
  // @@protoc_insertion_point(destructor:GameEvent.Goal)
  SharedDtor();
}

void GameEvent_Goal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete kick_location_;
  }
}

void GameEvent_Goal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_Goal::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_Goal& GameEvent_Goal::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_Goal* GameEvent_Goal::New(::google::protobuf::Arena* arena) const {
  GameEvent_Goal* n = new GameEvent_Goal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_Goal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Goal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::Location::Clear();
    }
    if (has_kick_location()) {
      GOOGLE_DCHECK(kick_location_ != NULL);
      kick_location_->::Location::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&kicking_team_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(kicking_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_Goal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.Goal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kicking_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_kicking_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kicking_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location kick_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kick_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Team kicking_team = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_kicking_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.Goal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.Goal)
  return false;
#undef DO_
}

void GameEvent_Goal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.Goal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 kicking_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kicking_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->kick_location_, output);
  }

  // optional .Team kicking_team = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->kicking_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.Goal)
}

::google::protobuf::uint8* GameEvent_Goal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Goal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 kicking_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kicking_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->kick_location_, deterministic, target);
  }

  // optional .Team kicking_team = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->kicking_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Goal)
  return target;
}

size_t GameEvent_Goal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.Goal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .Location kick_location = 4;
    if (has_kick_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kick_location_);
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional uint32 kicking_bot = 2;
    if (has_kicking_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kicking_bot());
    }

    // optional .Team kicking_team = 6;
    if (has_kicking_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kicking_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_Goal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_Goal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_Goal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.Goal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.Goal)
    MergeFrom(*source);
  }
}

void GameEvent_Goal::MergeFrom(const GameEvent_Goal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kick_location()->::Location::MergeFrom(from.kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      kicking_bot_ = from.kicking_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      kicking_team_ = from.kicking_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_Goal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_Goal::CopyFrom(const GameEvent_Goal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_Goal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_kick_location()) {
    if (!this->kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_Goal::Swap(GameEvent_Goal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_Goal::InternalSwap(GameEvent_Goal* other) {
  std::swap(location_, other->location_);
  std::swap(kick_location_, other->kick_location_);
  std::swap(by_team_, other->by_team_);
  std::swap(kicking_bot_, other->kicking_bot_);
  std::swap(kicking_team_, other->kicking_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_Goal::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_Goal

// required .Team by_team = 1;
bool GameEvent_Goal::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_Goal::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_Goal::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_Goal::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_Goal::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_Goal::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.by_team)
}

// optional .Team kicking_team = 6;
bool GameEvent_Goal::has_kicking_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameEvent_Goal::set_has_kicking_team() {
  _has_bits_[0] |= 0x00000010u;
}
void GameEvent_Goal::clear_has_kicking_team() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameEvent_Goal::clear_kicking_team() {
  kicking_team_ = 0;
  clear_has_kicking_team();
}
::Team GameEvent_Goal::kicking_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.kicking_team)
  return static_cast< ::Team >(kicking_team_);
}
void GameEvent_Goal::set_kicking_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_kicking_team();
  kicking_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.kicking_team)
}

// optional uint32 kicking_bot = 2;
bool GameEvent_Goal::has_kicking_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_Goal::set_has_kicking_bot() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_Goal::clear_has_kicking_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_Goal::clear_kicking_bot() {
  kicking_bot_ = 0u;
  clear_has_kicking_bot();
}
::google::protobuf::uint32 GameEvent_Goal::kicking_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.kicking_bot)
  return kicking_bot_;
}
void GameEvent_Goal::set_kicking_bot(::google::protobuf::uint32 value) {
  set_has_kicking_bot();
  kicking_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.kicking_bot)
}

// optional .Location location = 3;
bool GameEvent_Goal::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_Goal::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_Goal::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_Goal::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_Goal::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_Goal::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.Goal.location)
  return location_;
}
::Location* GameEvent_Goal::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.Goal.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_Goal::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.Goal.location)
}

// optional .Location kick_location = 4;
bool GameEvent_Goal::has_kick_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_Goal::set_has_kick_location() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_Goal::clear_has_kick_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_Goal::clear_kick_location() {
  if (kick_location_ != NULL) kick_location_->::Location::Clear();
  clear_has_kick_location();
}
const ::Location& GameEvent_Goal::kick_location() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.kick_location)
  return kick_location_ != NULL ? *kick_location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_Goal::mutable_kick_location() {
  set_has_kick_location();
  if (kick_location_ == NULL) {
    kick_location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.Goal.kick_location)
  return kick_location_;
}
::Location* GameEvent_Goal::release_kick_location() {
  // @@protoc_insertion_point(field_release:GameEvent.Goal.kick_location)
  clear_has_kick_location();
  ::Location* temp = kick_location_;
  kick_location_ = NULL;
  return temp;
}
void GameEvent_Goal::set_allocated_kick_location(::Location* kick_location) {
  delete kick_location_;
  kick_location_ = kick_location;
  if (kick_location) {
    set_has_kick_location();
  } else {
    clear_has_kick_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.Goal.kick_location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_IndirectGoal::kByTeamFieldNumber;
const int GameEvent_IndirectGoal::kByBotFieldNumber;
const int GameEvent_IndirectGoal::kLocationFieldNumber;
const int GameEvent_IndirectGoal::kKickLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_IndirectGoal::GameEvent_IndirectGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.IndirectGoal)
}
GameEvent_IndirectGoal::GameEvent_IndirectGoal(const GameEvent_IndirectGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_kick_location()) {
    kick_location_ = new ::Location(*from.kick_location_);
  } else {
    kick_location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.IndirectGoal)
}

void GameEvent_IndirectGoal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&location_) + sizeof(by_bot_));
}

GameEvent_IndirectGoal::~GameEvent_IndirectGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.IndirectGoal)
  SharedDtor();
}

void GameEvent_IndirectGoal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete kick_location_;
  }
}

void GameEvent_IndirectGoal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_IndirectGoal::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_IndirectGoal& GameEvent_IndirectGoal::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_IndirectGoal* GameEvent_IndirectGoal::New(::google::protobuf::Arena* arena) const {
  GameEvent_IndirectGoal* n = new GameEvent_IndirectGoal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_IndirectGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.IndirectGoal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::Location::Clear();
    }
    if (has_kick_location()) {
      GOOGLE_DCHECK(kick_location_ != NULL);
      kick_location_->::Location::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_IndirectGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.IndirectGoal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location kick_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kick_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.IndirectGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.IndirectGoal)
  return false;
#undef DO_
}

void GameEvent_IndirectGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.IndirectGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->kick_location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.IndirectGoal)
}

::google::protobuf::uint8* GameEvent_IndirectGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.IndirectGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->kick_location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.IndirectGoal)
  return target;
}

size_t GameEvent_IndirectGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.IndirectGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .Location kick_location = 4;
    if (has_kick_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kick_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_IndirectGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.IndirectGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_IndirectGoal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_IndirectGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.IndirectGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.IndirectGoal)
    MergeFrom(*source);
  }
}

void GameEvent_IndirectGoal::MergeFrom(const GameEvent_IndirectGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.IndirectGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kick_location()->::Location::MergeFrom(from.kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_IndirectGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.IndirectGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_IndirectGoal::CopyFrom(const GameEvent_IndirectGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.IndirectGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_IndirectGoal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_kick_location()) {
    if (!this->kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_IndirectGoal::Swap(GameEvent_IndirectGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_IndirectGoal::InternalSwap(GameEvent_IndirectGoal* other) {
  std::swap(location_, other->location_);
  std::swap(kick_location_, other->kick_location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_IndirectGoal::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_IndirectGoal

// required .Team by_team = 1;
bool GameEvent_IndirectGoal::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_IndirectGoal::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_IndirectGoal::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_IndirectGoal::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_IndirectGoal::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.IndirectGoal.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_IndirectGoal::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.IndirectGoal.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_IndirectGoal::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_IndirectGoal::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_IndirectGoal::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_IndirectGoal::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_IndirectGoal::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.IndirectGoal.by_bot)
  return by_bot_;
}
void GameEvent_IndirectGoal::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.IndirectGoal.by_bot)
}

// optional .Location location = 3;
bool GameEvent_IndirectGoal::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_IndirectGoal::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_IndirectGoal::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_IndirectGoal::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_IndirectGoal::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.IndirectGoal.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_IndirectGoal::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.IndirectGoal.location)
  return location_;
}
::Location* GameEvent_IndirectGoal::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.IndirectGoal.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_IndirectGoal::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.IndirectGoal.location)
}

// optional .Location kick_location = 4;
bool GameEvent_IndirectGoal::has_kick_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_IndirectGoal::set_has_kick_location() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_IndirectGoal::clear_has_kick_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_IndirectGoal::clear_kick_location() {
  if (kick_location_ != NULL) kick_location_->::Location::Clear();
  clear_has_kick_location();
}
const ::Location& GameEvent_IndirectGoal::kick_location() const {
  // @@protoc_insertion_point(field_get:GameEvent.IndirectGoal.kick_location)
  return kick_location_ != NULL ? *kick_location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_IndirectGoal::mutable_kick_location() {
  set_has_kick_location();
  if (kick_location_ == NULL) {
    kick_location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.IndirectGoal.kick_location)
  return kick_location_;
}
::Location* GameEvent_IndirectGoal::release_kick_location() {
  // @@protoc_insertion_point(field_release:GameEvent.IndirectGoal.kick_location)
  clear_has_kick_location();
  ::Location* temp = kick_location_;
  kick_location_ = NULL;
  return temp;
}
void GameEvent_IndirectGoal::set_allocated_kick_location(::Location* kick_location) {
  delete kick_location_;
  kick_location_ = kick_location;
  if (kick_location) {
    set_has_kick_location();
  } else {
    clear_has_kick_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.IndirectGoal.kick_location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_ChippedGoal::kByTeamFieldNumber;
const int GameEvent_ChippedGoal::kByBotFieldNumber;
const int GameEvent_ChippedGoal::kLocationFieldNumber;
const int GameEvent_ChippedGoal::kKickLocationFieldNumber;
const int GameEvent_ChippedGoal::kMaxBallHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_ChippedGoal::GameEvent_ChippedGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.ChippedGoal)
}
GameEvent_ChippedGoal::GameEvent_ChippedGoal(const GameEvent_ChippedGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_kick_location()) {
    kick_location_ = new ::Location(*from.kick_location_);
  } else {
    kick_location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&max_ball_height_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(max_ball_height_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.ChippedGoal)
}

void GameEvent_ChippedGoal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&max_ball_height_) -
    reinterpret_cast<char*>(&location_) + sizeof(max_ball_height_));
}

GameEvent_ChippedGoal::~GameEvent_ChippedGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.ChippedGoal)
  SharedDtor();
}

void GameEvent_ChippedGoal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete kick_location_;
  }
}

void GameEvent_ChippedGoal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_ChippedGoal::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_ChippedGoal& GameEvent_ChippedGoal::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_ChippedGoal* GameEvent_ChippedGoal::New(::google::protobuf::Arena* arena) const {
  GameEvent_ChippedGoal* n = new GameEvent_ChippedGoal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_ChippedGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChippedGoal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::Location::Clear();
    }
    if (has_kick_location()) {
      GOOGLE_DCHECK(kick_location_ != NULL);
      kick_location_->::Location::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&max_ball_height_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(max_ball_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_ChippedGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.ChippedGoal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location kick_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kick_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_ball_height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_max_ball_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_ball_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.ChippedGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.ChippedGoal)
  return false;
#undef DO_
}

void GameEvent_ChippedGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.ChippedGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->kick_location_, output);
  }

  // optional float max_ball_height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_ball_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.ChippedGoal)
}

::google::protobuf::uint8* GameEvent_ChippedGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChippedGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->kick_location_, deterministic, target);
  }

  // optional float max_ball_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_ball_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChippedGoal)
  return target;
}

size_t GameEvent_ChippedGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.ChippedGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .Location kick_location = 4;
    if (has_kick_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kick_location_);
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float max_ball_height = 5;
    if (has_max_ball_height()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_ChippedGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.ChippedGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_ChippedGoal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_ChippedGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.ChippedGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.ChippedGoal)
    MergeFrom(*source);
  }
}

void GameEvent_ChippedGoal::MergeFrom(const GameEvent_ChippedGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChippedGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kick_location()->::Location::MergeFrom(from.kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_ball_height_ = from.max_ball_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_ChippedGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.ChippedGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_ChippedGoal::CopyFrom(const GameEvent_ChippedGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChippedGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_ChippedGoal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_kick_location()) {
    if (!this->kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_ChippedGoal::Swap(GameEvent_ChippedGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_ChippedGoal::InternalSwap(GameEvent_ChippedGoal* other) {
  std::swap(location_, other->location_);
  std::swap(kick_location_, other->kick_location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(max_ball_height_, other->max_ball_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_ChippedGoal::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_ChippedGoal

// required .Team by_team = 1;
bool GameEvent_ChippedGoal::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_ChippedGoal::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_ChippedGoal::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_ChippedGoal::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_ChippedGoal::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_ChippedGoal::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.ChippedGoal.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_ChippedGoal::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_ChippedGoal::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_ChippedGoal::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_ChippedGoal::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_ChippedGoal::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.by_bot)
  return by_bot_;
}
void GameEvent_ChippedGoal::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.ChippedGoal.by_bot)
}

// optional .Location location = 3;
bool GameEvent_ChippedGoal::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_ChippedGoal::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_ChippedGoal::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_ChippedGoal::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_ChippedGoal::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_ChippedGoal::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.ChippedGoal.location)
  return location_;
}
::Location* GameEvent_ChippedGoal::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.ChippedGoal.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_ChippedGoal::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ChippedGoal.location)
}

// optional .Location kick_location = 4;
bool GameEvent_ChippedGoal::has_kick_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_ChippedGoal::set_has_kick_location() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_ChippedGoal::clear_has_kick_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_ChippedGoal::clear_kick_location() {
  if (kick_location_ != NULL) kick_location_->::Location::Clear();
  clear_has_kick_location();
}
const ::Location& GameEvent_ChippedGoal::kick_location() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.kick_location)
  return kick_location_ != NULL ? *kick_location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_ChippedGoal::mutable_kick_location() {
  set_has_kick_location();
  if (kick_location_ == NULL) {
    kick_location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.ChippedGoal.kick_location)
  return kick_location_;
}
::Location* GameEvent_ChippedGoal::release_kick_location() {
  // @@protoc_insertion_point(field_release:GameEvent.ChippedGoal.kick_location)
  clear_has_kick_location();
  ::Location* temp = kick_location_;
  kick_location_ = NULL;
  return temp;
}
void GameEvent_ChippedGoal::set_allocated_kick_location(::Location* kick_location) {
  delete kick_location_;
  kick_location_ = kick_location;
  if (kick_location) {
    set_has_kick_location();
  } else {
    clear_has_kick_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ChippedGoal.kick_location)
}

// optional float max_ball_height = 5;
bool GameEvent_ChippedGoal::has_max_ball_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameEvent_ChippedGoal::set_has_max_ball_height() {
  _has_bits_[0] |= 0x00000010u;
}
void GameEvent_ChippedGoal::clear_has_max_ball_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameEvent_ChippedGoal::clear_max_ball_height() {
  max_ball_height_ = 0;
  clear_has_max_ball_height();
}
float GameEvent_ChippedGoal::max_ball_height() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.max_ball_height)
  return max_ball_height_;
}
void GameEvent_ChippedGoal::set_max_ball_height(float value) {
  set_has_max_ball_height();
  max_ball_height_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.ChippedGoal.max_ball_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotTooFastInStop::kByTeamFieldNumber;
const int GameEvent_BotTooFastInStop::kByBotFieldNumber;
const int GameEvent_BotTooFastInStop::kLocationFieldNumber;
const int GameEvent_BotTooFastInStop::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotTooFastInStop)
}
GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(const GameEvent_BotTooFastInStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTooFastInStop)
}

void GameEvent_BotTooFastInStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&location_) + sizeof(speed_));
}

GameEvent_BotTooFastInStop::~GameEvent_BotTooFastInStop() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTooFastInStop)
  SharedDtor();
}

void GameEvent_BotTooFastInStop::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BotTooFastInStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotTooFastInStop::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotTooFastInStop& GameEvent_BotTooFastInStop::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotTooFastInStop* GameEvent_BotTooFastInStop::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotTooFastInStop* n = new GameEvent_BotTooFastInStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotTooFastInStop::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTooFastInStop)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotTooFastInStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotTooFastInStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotTooFastInStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotTooFastInStop)
  return false;
#undef DO_
}

void GameEvent_BotTooFastInStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotTooFastInStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotTooFastInStop)
}

::google::protobuf::uint8* GameEvent_BotTooFastInStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTooFastInStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTooFastInStop)
  return target;
}

size_t GameEvent_BotTooFastInStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTooFastInStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotTooFastInStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotTooFastInStop)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotTooFastInStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotTooFastInStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotTooFastInStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotTooFastInStop)
    MergeFrom(*source);
  }
}

void GameEvent_BotTooFastInStop::MergeFrom(const GameEvent_BotTooFastInStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTooFastInStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotTooFastInStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotTooFastInStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotTooFastInStop::CopyFrom(const GameEvent_BotTooFastInStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTooFastInStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotTooFastInStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTooFastInStop::Swap(GameEvent_BotTooFastInStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotTooFastInStop::InternalSwap(GameEvent_BotTooFastInStop* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotTooFastInStop::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotTooFastInStop

// required .Team by_team = 1;
bool GameEvent_BotTooFastInStop::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotTooFastInStop::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotTooFastInStop::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotTooFastInStop::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotTooFastInStop::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTooFastInStop.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotTooFastInStop::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotTooFastInStop.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_BotTooFastInStop::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotTooFastInStop::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotTooFastInStop::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotTooFastInStop::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_BotTooFastInStop::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTooFastInStop.by_bot)
  return by_bot_;
}
void GameEvent_BotTooFastInStop::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotTooFastInStop.by_bot)
}

// optional .Location location = 3;
bool GameEvent_BotTooFastInStop::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotTooFastInStop::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotTooFastInStop::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotTooFastInStop::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BotTooFastInStop::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTooFastInStop.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotTooFastInStop::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotTooFastInStop.location)
  return location_;
}
::Location* GameEvent_BotTooFastInStop::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BotTooFastInStop.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BotTooFastInStop::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotTooFastInStop.location)
}

// optional float speed = 4;
bool GameEvent_BotTooFastInStop::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_BotTooFastInStop::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_BotTooFastInStop::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_BotTooFastInStop::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
float GameEvent_BotTooFastInStop::speed() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTooFastInStop.speed)
  return speed_;
}
void GameEvent_BotTooFastInStop::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotTooFastInStop.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_DefenderTooCloseToKickPoint::kByTeamFieldNumber;
const int GameEvent_DefenderTooCloseToKickPoint::kByBotFieldNumber;
const int GameEvent_DefenderTooCloseToKickPoint::kLocationFieldNumber;
const int GameEvent_DefenderTooCloseToKickPoint::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.DefenderTooCloseToKickPoint)
}
GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(const GameEvent_DefenderTooCloseToKickPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderTooCloseToKickPoint)
}

void GameEvent_DefenderTooCloseToKickPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&location_) + sizeof(distance_));
}

GameEvent_DefenderTooCloseToKickPoint::~GameEvent_DefenderTooCloseToKickPoint() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderTooCloseToKickPoint)
  SharedDtor();
}

void GameEvent_DefenderTooCloseToKickPoint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_DefenderTooCloseToKickPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_DefenderTooCloseToKickPoint::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_DefenderTooCloseToKickPoint& GameEvent_DefenderTooCloseToKickPoint::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_DefenderTooCloseToKickPoint* GameEvent_DefenderTooCloseToKickPoint::New(::google::protobuf::Arena* arena) const {
  GameEvent_DefenderTooCloseToKickPoint* n = new GameEvent_DefenderTooCloseToKickPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_DefenderTooCloseToKickPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderTooCloseToKickPoint)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_DefenderTooCloseToKickPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.DefenderTooCloseToKickPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.DefenderTooCloseToKickPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.DefenderTooCloseToKickPoint)
  return false;
#undef DO_
}

void GameEvent_DefenderTooCloseToKickPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.DefenderTooCloseToKickPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.DefenderTooCloseToKickPoint)
}

::google::protobuf::uint8* GameEvent_DefenderTooCloseToKickPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderTooCloseToKickPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderTooCloseToKickPoint)
  return target;
}

size_t GameEvent_DefenderTooCloseToKickPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderTooCloseToKickPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_DefenderTooCloseToKickPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderTooCloseToKickPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderTooCloseToKickPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_DefenderTooCloseToKickPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderTooCloseToKickPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderTooCloseToKickPoint)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderTooCloseToKickPoint::MergeFrom(const GameEvent_DefenderTooCloseToKickPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderTooCloseToKickPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderTooCloseToKickPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderTooCloseToKickPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderTooCloseToKickPoint::CopyFrom(const GameEvent_DefenderTooCloseToKickPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderTooCloseToKickPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderTooCloseToKickPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderTooCloseToKickPoint::Swap(GameEvent_DefenderTooCloseToKickPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_DefenderTooCloseToKickPoint::InternalSwap(GameEvent_DefenderTooCloseToKickPoint* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_DefenderTooCloseToKickPoint::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_DefenderTooCloseToKickPoint

// required .Team by_team = 1;
bool GameEvent_DefenderTooCloseToKickPoint::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_DefenderTooCloseToKickPoint::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_DefenderTooCloseToKickPoint::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderTooCloseToKickPoint.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_DefenderTooCloseToKickPoint::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderTooCloseToKickPoint.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_DefenderTooCloseToKickPoint::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_DefenderTooCloseToKickPoint::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_DefenderTooCloseToKickPoint::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderTooCloseToKickPoint.by_bot)
  return by_bot_;
}
void GameEvent_DefenderTooCloseToKickPoint::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderTooCloseToKickPoint.by_bot)
}

// optional .Location location = 3;
bool GameEvent_DefenderTooCloseToKickPoint::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_DefenderTooCloseToKickPoint::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_DefenderTooCloseToKickPoint::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderTooCloseToKickPoint.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_DefenderTooCloseToKickPoint::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.DefenderTooCloseToKickPoint.location)
  return location_;
}
::Location* GameEvent_DefenderTooCloseToKickPoint::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.DefenderTooCloseToKickPoint.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_DefenderTooCloseToKickPoint::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.DefenderTooCloseToKickPoint.location)
}

// optional float distance = 4;
bool GameEvent_DefenderTooCloseToKickPoint::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_DefenderTooCloseToKickPoint::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float GameEvent_DefenderTooCloseToKickPoint::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderTooCloseToKickPoint.distance)
  return distance_;
}
void GameEvent_DefenderTooCloseToKickPoint::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderTooCloseToKickPoint.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotCrashDrawn::kBotYellowFieldNumber;
const int GameEvent_BotCrashDrawn::kBotBlueFieldNumber;
const int GameEvent_BotCrashDrawn::kLocationFieldNumber;
const int GameEvent_BotCrashDrawn::kCrashSpeedFieldNumber;
const int GameEvent_BotCrashDrawn::kSpeedDiffFieldNumber;
const int GameEvent_BotCrashDrawn::kCrashAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotCrashDrawn)
}
GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(const GameEvent_BotCrashDrawn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&bot_yellow_, &from.bot_yellow_,
    reinterpret_cast<char*>(&crash_angle_) -
    reinterpret_cast<char*>(&bot_yellow_) + sizeof(crash_angle_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashDrawn)
}

void GameEvent_BotCrashDrawn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&crash_angle_) -
    reinterpret_cast<char*>(&location_) + sizeof(crash_angle_));
}

GameEvent_BotCrashDrawn::~GameEvent_BotCrashDrawn() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashDrawn)
  SharedDtor();
}

void GameEvent_BotCrashDrawn::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BotCrashDrawn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotCrashDrawn::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotCrashDrawn& GameEvent_BotCrashDrawn::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotCrashDrawn* GameEvent_BotCrashDrawn::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotCrashDrawn* n = new GameEvent_BotCrashDrawn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotCrashDrawn::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashDrawn)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&bot_yellow_, 0, reinterpret_cast<char*>(&crash_angle_) -
      reinterpret_cast<char*>(&bot_yellow_) + sizeof(crash_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotCrashDrawn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotCrashDrawn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bot_yellow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bot_yellow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_yellow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_blue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bot_blue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crash_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_crash_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crash_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_diff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_speed_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crash_angle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_crash_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crash_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotCrashDrawn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotCrashDrawn)
  return false;
#undef DO_
}

void GameEvent_BotCrashDrawn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotCrashDrawn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bot_yellow = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bot_yellow(), output);
  }

  // optional uint32 bot_blue = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bot_blue(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float crash_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->crash_speed(), output);
  }

  // optional float speed_diff = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_diff(), output);
  }

  // optional float crash_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->crash_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotCrashDrawn)
}

::google::protobuf::uint8* GameEvent_BotCrashDrawn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashDrawn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bot_yellow = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bot_yellow(), target);
  }

  // optional uint32 bot_blue = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bot_blue(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float crash_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->crash_speed(), target);
  }

  // optional float speed_diff = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_diff(), target);
  }

  // optional float crash_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->crash_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashDrawn)
  return target;
}

size_t GameEvent_BotCrashDrawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashDrawn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 bot_yellow = 1;
    if (has_bot_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_yellow());
    }

    // optional uint32 bot_blue = 2;
    if (has_bot_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_blue());
    }

    // optional float crash_speed = 4;
    if (has_crash_speed()) {
      total_size += 1 + 4;
    }

    // optional float speed_diff = 5;
    if (has_speed_diff()) {
      total_size += 1 + 4;
    }

    // optional float crash_angle = 6;
    if (has_crash_angle()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotCrashDrawn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotCrashDrawn)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotCrashDrawn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotCrashDrawn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotCrashDrawn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotCrashDrawn)
    MergeFrom(*source);
  }
}

void GameEvent_BotCrashDrawn::MergeFrom(const GameEvent_BotCrashDrawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashDrawn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      bot_yellow_ = from.bot_yellow_;
    }
    if (cached_has_bits & 0x00000004u) {
      bot_blue_ = from.bot_blue_;
    }
    if (cached_has_bits & 0x00000008u) {
      crash_speed_ = from.crash_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_diff_ = from.speed_diff_;
    }
    if (cached_has_bits & 0x00000020u) {
      crash_angle_ = from.crash_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotCrashDrawn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotCrashDrawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotCrashDrawn::CopyFrom(const GameEvent_BotCrashDrawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashDrawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotCrashDrawn::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashDrawn::Swap(GameEvent_BotCrashDrawn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotCrashDrawn::InternalSwap(GameEvent_BotCrashDrawn* other) {
  std::swap(location_, other->location_);
  std::swap(bot_yellow_, other->bot_yellow_);
  std::swap(bot_blue_, other->bot_blue_);
  std::swap(crash_speed_, other->crash_speed_);
  std::swap(speed_diff_, other->speed_diff_);
  std::swap(crash_angle_, other->crash_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotCrashDrawn::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotCrashDrawn

// optional uint32 bot_yellow = 1;
bool GameEvent_BotCrashDrawn::has_bot_yellow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotCrashDrawn::set_has_bot_yellow() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotCrashDrawn::clear_has_bot_yellow() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotCrashDrawn::clear_bot_yellow() {
  bot_yellow_ = 0u;
  clear_has_bot_yellow();
}
::google::protobuf::uint32 GameEvent_BotCrashDrawn::bot_yellow() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.bot_yellow)
  return bot_yellow_;
}
void GameEvent_BotCrashDrawn::set_bot_yellow(::google::protobuf::uint32 value) {
  set_has_bot_yellow();
  bot_yellow_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.bot_yellow)
}

// optional uint32 bot_blue = 2;
bool GameEvent_BotCrashDrawn::has_bot_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotCrashDrawn::set_has_bot_blue() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotCrashDrawn::clear_has_bot_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotCrashDrawn::clear_bot_blue() {
  bot_blue_ = 0u;
  clear_has_bot_blue();
}
::google::protobuf::uint32 GameEvent_BotCrashDrawn::bot_blue() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.bot_blue)
  return bot_blue_;
}
void GameEvent_BotCrashDrawn::set_bot_blue(::google::protobuf::uint32 value) {
  set_has_bot_blue();
  bot_blue_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.bot_blue)
}

// optional .Location location = 3;
bool GameEvent_BotCrashDrawn::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotCrashDrawn::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotCrashDrawn::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotCrashDrawn::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BotCrashDrawn::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotCrashDrawn::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotCrashDrawn.location)
  return location_;
}
::Location* GameEvent_BotCrashDrawn::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BotCrashDrawn.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BotCrashDrawn::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotCrashDrawn.location)
}

// optional float crash_speed = 4;
bool GameEvent_BotCrashDrawn::has_crash_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_BotCrashDrawn::set_has_crash_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_BotCrashDrawn::clear_has_crash_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_BotCrashDrawn::clear_crash_speed() {
  crash_speed_ = 0;
  clear_has_crash_speed();
}
float GameEvent_BotCrashDrawn::crash_speed() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.crash_speed)
  return crash_speed_;
}
void GameEvent_BotCrashDrawn::set_crash_speed(float value) {
  set_has_crash_speed();
  crash_speed_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.crash_speed)
}

// optional float speed_diff = 5;
bool GameEvent_BotCrashDrawn::has_speed_diff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameEvent_BotCrashDrawn::set_has_speed_diff() {
  _has_bits_[0] |= 0x00000010u;
}
void GameEvent_BotCrashDrawn::clear_has_speed_diff() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameEvent_BotCrashDrawn::clear_speed_diff() {
  speed_diff_ = 0;
  clear_has_speed_diff();
}
float GameEvent_BotCrashDrawn::speed_diff() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.speed_diff)
  return speed_diff_;
}
void GameEvent_BotCrashDrawn::set_speed_diff(float value) {
  set_has_speed_diff();
  speed_diff_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.speed_diff)
}

// optional float crash_angle = 6;
bool GameEvent_BotCrashDrawn::has_crash_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameEvent_BotCrashDrawn::set_has_crash_angle() {
  _has_bits_[0] |= 0x00000020u;
}
void GameEvent_BotCrashDrawn::clear_has_crash_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameEvent_BotCrashDrawn::clear_crash_angle() {
  crash_angle_ = 0;
  clear_has_crash_angle();
}
float GameEvent_BotCrashDrawn::crash_angle() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.crash_angle)
  return crash_angle_;
}
void GameEvent_BotCrashDrawn::set_crash_angle(float value) {
  set_has_crash_angle();
  crash_angle_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.crash_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotCrashUnique::kByTeamFieldNumber;
const int GameEvent_BotCrashUnique::kViolatorFieldNumber;
const int GameEvent_BotCrashUnique::kVictimFieldNumber;
const int GameEvent_BotCrashUnique::kLocationFieldNumber;
const int GameEvent_BotCrashUnique::kCrashSpeedFieldNumber;
const int GameEvent_BotCrashUnique::kSpeedDiffFieldNumber;
const int GameEvent_BotCrashUnique::kCrashAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotCrashUnique::GameEvent_BotCrashUnique()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotCrashUnique)
}
GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(const GameEvent_BotCrashUnique& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&crash_angle_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(crash_angle_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashUnique)
}

void GameEvent_BotCrashUnique::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&crash_angle_) -
    reinterpret_cast<char*>(&location_) + sizeof(crash_angle_));
}

GameEvent_BotCrashUnique::~GameEvent_BotCrashUnique() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashUnique)
  SharedDtor();
}

void GameEvent_BotCrashUnique::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BotCrashUnique::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotCrashUnique::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotCrashUnique& GameEvent_BotCrashUnique::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotCrashUnique* GameEvent_BotCrashUnique::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotCrashUnique* n = new GameEvent_BotCrashUnique;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotCrashUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashUnique)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&crash_angle_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(crash_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotCrashUnique::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotCrashUnique)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 violator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_violator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &violator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_victim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crash_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_crash_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crash_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_diff = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_speed_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crash_angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_crash_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crash_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotCrashUnique)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotCrashUnique)
  return false;
#undef DO_
}

void GameEvent_BotCrashUnique::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotCrashUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->violator(), output);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->victim(), output);
  }

  // optional .Location location = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // optional float crash_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->crash_speed(), output);
  }

  // optional float speed_diff = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed_diff(), output);
  }

  // optional float crash_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->crash_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotCrashUnique)
}

::google::protobuf::uint8* GameEvent_BotCrashUnique::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->violator(), target);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->victim(), target);
  }

  // optional .Location location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, deterministic, target);
  }

  // optional float crash_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->crash_speed(), target);
  }

  // optional float speed_diff = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed_diff(), target);
  }

  // optional float crash_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->crash_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashUnique)
  return target;
}

size_t GameEvent_BotCrashUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashUnique)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 4;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 124u) {
    // optional uint32 violator = 2;
    if (has_violator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->violator());
    }

    // optional uint32 victim = 3;
    if (has_victim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim());
    }

    // optional float crash_speed = 5;
    if (has_crash_speed()) {
      total_size += 1 + 4;
    }

    // optional float speed_diff = 6;
    if (has_speed_diff()) {
      total_size += 1 + 4;
    }

    // optional float crash_angle = 7;
    if (has_crash_angle()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotCrashUnique::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotCrashUnique)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotCrashUnique* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotCrashUnique>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotCrashUnique)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotCrashUnique)
    MergeFrom(*source);
  }
}

void GameEvent_BotCrashUnique::MergeFrom(const GameEvent_BotCrashUnique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashUnique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      violator_ = from.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      crash_speed_ = from.crash_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_diff_ = from.speed_diff_;
    }
    if (cached_has_bits & 0x00000040u) {
      crash_angle_ = from.crash_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotCrashUnique::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotCrashUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotCrashUnique::CopyFrom(const GameEvent_BotCrashUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotCrashUnique::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashUnique::Swap(GameEvent_BotCrashUnique* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotCrashUnique::InternalSwap(GameEvent_BotCrashUnique* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(violator_, other->violator_);
  std::swap(victim_, other->victim_);
  std::swap(crash_speed_, other->crash_speed_);
  std::swap(speed_diff_, other->speed_diff_);
  std::swap(crash_angle_, other->crash_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotCrashUnique::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotCrashUnique

// required .Team by_team = 1;
bool GameEvent_BotCrashUnique::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotCrashUnique::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotCrashUnique::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotCrashUnique::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotCrashUnique::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotCrashUnique::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.by_team)
}

// optional uint32 violator = 2;
bool GameEvent_BotCrashUnique::has_violator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotCrashUnique::set_has_violator() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotCrashUnique::clear_has_violator() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotCrashUnique::clear_violator() {
  violator_ = 0u;
  clear_has_violator();
}
::google::protobuf::uint32 GameEvent_BotCrashUnique::violator() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.violator)
  return violator_;
}
void GameEvent_BotCrashUnique::set_violator(::google::protobuf::uint32 value) {
  set_has_violator();
  violator_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.violator)
}

// optional uint32 victim = 3;
bool GameEvent_BotCrashUnique::has_victim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_BotCrashUnique::set_has_victim() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_BotCrashUnique::clear_has_victim() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_BotCrashUnique::clear_victim() {
  victim_ = 0u;
  clear_has_victim();
}
::google::protobuf::uint32 GameEvent_BotCrashUnique::victim() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.victim)
  return victim_;
}
void GameEvent_BotCrashUnique::set_victim(::google::protobuf::uint32 value) {
  set_has_victim();
  victim_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.victim)
}

// optional .Location location = 4;
bool GameEvent_BotCrashUnique::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotCrashUnique::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotCrashUnique::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotCrashUnique::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BotCrashUnique::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotCrashUnique::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotCrashUnique.location)
  return location_;
}
::Location* GameEvent_BotCrashUnique::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BotCrashUnique.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BotCrashUnique::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotCrashUnique.location)
}

// optional float crash_speed = 5;
bool GameEvent_BotCrashUnique::has_crash_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameEvent_BotCrashUnique::set_has_crash_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void GameEvent_BotCrashUnique::clear_has_crash_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameEvent_BotCrashUnique::clear_crash_speed() {
  crash_speed_ = 0;
  clear_has_crash_speed();
}
float GameEvent_BotCrashUnique::crash_speed() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.crash_speed)
  return crash_speed_;
}
void GameEvent_BotCrashUnique::set_crash_speed(float value) {
  set_has_crash_speed();
  crash_speed_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.crash_speed)
}

// optional float speed_diff = 6;
bool GameEvent_BotCrashUnique::has_speed_diff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameEvent_BotCrashUnique::set_has_speed_diff() {
  _has_bits_[0] |= 0x00000020u;
}
void GameEvent_BotCrashUnique::clear_has_speed_diff() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameEvent_BotCrashUnique::clear_speed_diff() {
  speed_diff_ = 0;
  clear_has_speed_diff();
}
float GameEvent_BotCrashUnique::speed_diff() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.speed_diff)
  return speed_diff_;
}
void GameEvent_BotCrashUnique::set_speed_diff(float value) {
  set_has_speed_diff();
  speed_diff_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.speed_diff)
}

// optional float crash_angle = 7;
bool GameEvent_BotCrashUnique::has_crash_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameEvent_BotCrashUnique::set_has_crash_angle() {
  _has_bits_[0] |= 0x00000040u;
}
void GameEvent_BotCrashUnique::clear_has_crash_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameEvent_BotCrashUnique::clear_crash_angle() {
  crash_angle_ = 0;
  clear_has_crash_angle();
}
float GameEvent_BotCrashUnique::crash_angle() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.crash_angle)
  return crash_angle_;
}
void GameEvent_BotCrashUnique::set_crash_angle(float value) {
  set_has_crash_angle();
  crash_angle_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.crash_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotPushedBot::kByTeamFieldNumber;
const int GameEvent_BotPushedBot::kViolatorFieldNumber;
const int GameEvent_BotPushedBot::kVictimFieldNumber;
const int GameEvent_BotPushedBot::kLocationFieldNumber;
const int GameEvent_BotPushedBot::kPushedDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotPushedBot::GameEvent_BotPushedBot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotPushedBot)
}
GameEvent_BotPushedBot::GameEvent_BotPushedBot(const GameEvent_BotPushedBot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&pushed_distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(pushed_distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotPushedBot)
}

void GameEvent_BotPushedBot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&pushed_distance_) -
    reinterpret_cast<char*>(&location_) + sizeof(pushed_distance_));
}

GameEvent_BotPushedBot::~GameEvent_BotPushedBot() {
  // @@protoc_insertion_point(destructor:GameEvent.BotPushedBot)
  SharedDtor();
}

void GameEvent_BotPushedBot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BotPushedBot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotPushedBot::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotPushedBot& GameEvent_BotPushedBot::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotPushedBot* GameEvent_BotPushedBot::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotPushedBot* n = new GameEvent_BotPushedBot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotPushedBot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotPushedBot)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&pushed_distance_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(pushed_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotPushedBot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotPushedBot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 violator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_violator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &violator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_victim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pushed_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_pushed_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pushed_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotPushedBot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotPushedBot)
  return false;
#undef DO_
}

void GameEvent_BotPushedBot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotPushedBot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->violator(), output);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->victim(), output);
  }

  // optional .Location location = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // optional float pushed_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pushed_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotPushedBot)
}

::google::protobuf::uint8* GameEvent_BotPushedBot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotPushedBot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->violator(), target);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->victim(), target);
  }

  // optional .Location location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, deterministic, target);
  }

  // optional float pushed_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pushed_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotPushedBot)
  return target;
}

size_t GameEvent_BotPushedBot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotPushedBot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 4;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 violator = 2;
    if (has_violator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->violator());
    }

    // optional uint32 victim = 3;
    if (has_victim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim());
    }

    // optional float pushed_distance = 5;
    if (has_pushed_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotPushedBot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotPushedBot)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotPushedBot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotPushedBot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotPushedBot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotPushedBot)
    MergeFrom(*source);
  }
}

void GameEvent_BotPushedBot::MergeFrom(const GameEvent_BotPushedBot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotPushedBot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      violator_ = from.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      pushed_distance_ = from.pushed_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotPushedBot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotPushedBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotPushedBot::CopyFrom(const GameEvent_BotPushedBot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotPushedBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotPushedBot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotPushedBot::Swap(GameEvent_BotPushedBot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotPushedBot::InternalSwap(GameEvent_BotPushedBot* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(violator_, other->violator_);
  std::swap(victim_, other->victim_);
  std::swap(pushed_distance_, other->pushed_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotPushedBot::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotPushedBot

// required .Team by_team = 1;
bool GameEvent_BotPushedBot::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotPushedBot::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotPushedBot::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotPushedBot::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotPushedBot::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotPushedBot::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotPushedBot.by_team)
}

// optional uint32 violator = 2;
bool GameEvent_BotPushedBot::has_violator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotPushedBot::set_has_violator() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotPushedBot::clear_has_violator() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotPushedBot::clear_violator() {
  violator_ = 0u;
  clear_has_violator();
}
::google::protobuf::uint32 GameEvent_BotPushedBot::violator() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.violator)
  return violator_;
}
void GameEvent_BotPushedBot::set_violator(::google::protobuf::uint32 value) {
  set_has_violator();
  violator_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotPushedBot.violator)
}

// optional uint32 victim = 3;
bool GameEvent_BotPushedBot::has_victim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_BotPushedBot::set_has_victim() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_BotPushedBot::clear_has_victim() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_BotPushedBot::clear_victim() {
  victim_ = 0u;
  clear_has_victim();
}
::google::protobuf::uint32 GameEvent_BotPushedBot::victim() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.victim)
  return victim_;
}
void GameEvent_BotPushedBot::set_victim(::google::protobuf::uint32 value) {
  set_has_victim();
  victim_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotPushedBot.victim)
}

// optional .Location location = 4;
bool GameEvent_BotPushedBot::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotPushedBot::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotPushedBot::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotPushedBot::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BotPushedBot::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotPushedBot::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotPushedBot.location)
  return location_;
}
::Location* GameEvent_BotPushedBot::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BotPushedBot.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BotPushedBot::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotPushedBot.location)
}

// optional float pushed_distance = 5;
bool GameEvent_BotPushedBot::has_pushed_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameEvent_BotPushedBot::set_has_pushed_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void GameEvent_BotPushedBot::clear_has_pushed_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameEvent_BotPushedBot::clear_pushed_distance() {
  pushed_distance_ = 0;
  clear_has_pushed_distance();
}
float GameEvent_BotPushedBot::pushed_distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.pushed_distance)
  return pushed_distance_;
}
void GameEvent_BotPushedBot::set_pushed_distance(float value) {
  set_has_pushed_distance();
  pushed_distance_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotPushedBot.pushed_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotTippedOver::kByTeamFieldNumber;
const int GameEvent_BotTippedOver::kByBotFieldNumber;
const int GameEvent_BotTippedOver::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotTippedOver::GameEvent_BotTippedOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotTippedOver)
}
GameEvent_BotTippedOver::GameEvent_BotTippedOver(const GameEvent_BotTippedOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTippedOver)
}

void GameEvent_BotTippedOver::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&location_) + sizeof(by_bot_));
}

GameEvent_BotTippedOver::~GameEvent_BotTippedOver() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTippedOver)
  SharedDtor();
}

void GameEvent_BotTippedOver::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BotTippedOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotTippedOver::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotTippedOver& GameEvent_BotTippedOver::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotTippedOver* GameEvent_BotTippedOver::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotTippedOver* n = new GameEvent_BotTippedOver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotTippedOver::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTippedOver)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotTippedOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotTippedOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotTippedOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotTippedOver)
  return false;
#undef DO_
}

void GameEvent_BotTippedOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotTippedOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotTippedOver)
}

::google::protobuf::uint8* GameEvent_BotTippedOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTippedOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTippedOver)
  return target;
}

size_t GameEvent_BotTippedOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTippedOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotTippedOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotTippedOver)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotTippedOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotTippedOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotTippedOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotTippedOver)
    MergeFrom(*source);
  }
}

void GameEvent_BotTippedOver::MergeFrom(const GameEvent_BotTippedOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTippedOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotTippedOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotTippedOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotTippedOver::CopyFrom(const GameEvent_BotTippedOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTippedOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotTippedOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTippedOver::Swap(GameEvent_BotTippedOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotTippedOver::InternalSwap(GameEvent_BotTippedOver* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotTippedOver::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotTippedOver

// required .Team by_team = 1;
bool GameEvent_BotTippedOver::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotTippedOver::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotTippedOver::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotTippedOver::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotTippedOver::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTippedOver.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotTippedOver::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotTippedOver.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_BotTippedOver::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotTippedOver::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotTippedOver::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotTippedOver::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_BotTippedOver::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTippedOver.by_bot)
  return by_bot_;
}
void GameEvent_BotTippedOver::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotTippedOver.by_bot)
}

// optional .Location location = 3;
bool GameEvent_BotTippedOver::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotTippedOver::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotTippedOver::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotTippedOver::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BotTippedOver::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTippedOver.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotTippedOver::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotTippedOver.location)
  return location_;
}
::Location* GameEvent_BotTippedOver::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BotTippedOver.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BotTippedOver::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotTippedOver.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_DefenderInDefenseArea::kByTeamFieldNumber;
const int GameEvent_DefenderInDefenseArea::kByBotFieldNumber;
const int GameEvent_DefenderInDefenseArea::kLocationFieldNumber;
const int GameEvent_DefenderInDefenseArea::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.DefenderInDefenseArea)
}
GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(const GameEvent_DefenderInDefenseArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseArea)
}

void GameEvent_DefenderInDefenseArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&location_) + sizeof(distance_));
}

GameEvent_DefenderInDefenseArea::~GameEvent_DefenderInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseArea)
  SharedDtor();
}

void GameEvent_DefenderInDefenseArea::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_DefenderInDefenseArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_DefenderInDefenseArea::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_DefenderInDefenseArea& GameEvent_DefenderInDefenseArea::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_DefenderInDefenseArea* GameEvent_DefenderInDefenseArea::New(::google::protobuf::Arena* arena) const {
  GameEvent_DefenderInDefenseArea* n = new GameEvent_DefenderInDefenseArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_DefenderInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseArea)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_DefenderInDefenseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.DefenderInDefenseArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.DefenderInDefenseArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.DefenderInDefenseArea)
  return false;
#undef DO_
}

void GameEvent_DefenderInDefenseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.DefenderInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.DefenderInDefenseArea)
}

::google::protobuf::uint8* GameEvent_DefenderInDefenseArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseArea)
  return target;
}

size_t GameEvent_DefenderInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_DefenderInDefenseArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderInDefenseArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_DefenderInDefenseArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderInDefenseArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderInDefenseArea::MergeFrom(const GameEvent_DefenderInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderInDefenseArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderInDefenseArea::CopyFrom(const GameEvent_DefenderInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderInDefenseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseArea::Swap(GameEvent_DefenderInDefenseArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_DefenderInDefenseArea::InternalSwap(GameEvent_DefenderInDefenseArea* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_DefenderInDefenseArea::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_DefenderInDefenseArea

// required .Team by_team = 1;
bool GameEvent_DefenderInDefenseArea::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_DefenderInDefenseArea::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_DefenderInDefenseArea::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_DefenderInDefenseArea::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_DefenderInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseArea.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_DefenderInDefenseArea::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseArea.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_DefenderInDefenseArea::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_DefenderInDefenseArea::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_DefenderInDefenseArea::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_DefenderInDefenseArea::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_DefenderInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseArea.by_bot)
  return by_bot_;
}
void GameEvent_DefenderInDefenseArea::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseArea.by_bot)
}

// optional .Location location = 3;
bool GameEvent_DefenderInDefenseArea::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_DefenderInDefenseArea::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_DefenderInDefenseArea::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_DefenderInDefenseArea::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_DefenderInDefenseArea::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseArea.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_DefenderInDefenseArea::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.DefenderInDefenseArea.location)
  return location_;
}
::Location* GameEvent_DefenderInDefenseArea::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.DefenderInDefenseArea.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_DefenderInDefenseArea::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.DefenderInDefenseArea.location)
}

// optional float distance = 4;
bool GameEvent_DefenderInDefenseArea::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_DefenderInDefenseArea::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_DefenderInDefenseArea::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_DefenderInDefenseArea::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float GameEvent_DefenderInDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseArea.distance)
  return distance_;
}
void GameEvent_DefenderInDefenseArea::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseArea.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_DefenderInDefenseAreaPartially::kByTeamFieldNumber;
const int GameEvent_DefenderInDefenseAreaPartially::kByBotFieldNumber;
const int GameEvent_DefenderInDefenseAreaPartially::kLocationFieldNumber;
const int GameEvent_DefenderInDefenseAreaPartially::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.DefenderInDefenseAreaPartially)
}
GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(const GameEvent_DefenderInDefenseAreaPartially& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseAreaPartially)
}

void GameEvent_DefenderInDefenseAreaPartially::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&location_) + sizeof(distance_));
}

GameEvent_DefenderInDefenseAreaPartially::~GameEvent_DefenderInDefenseAreaPartially() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseAreaPartially)
  SharedDtor();
}

void GameEvent_DefenderInDefenseAreaPartially::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_DefenderInDefenseAreaPartially::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_DefenderInDefenseAreaPartially::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_DefenderInDefenseAreaPartially& GameEvent_DefenderInDefenseAreaPartially::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_DefenderInDefenseAreaPartially* GameEvent_DefenderInDefenseAreaPartially::New(::google::protobuf::Arena* arena) const {
  GameEvent_DefenderInDefenseAreaPartially* n = new GameEvent_DefenderInDefenseAreaPartially;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_DefenderInDefenseAreaPartially::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseAreaPartially)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_DefenderInDefenseAreaPartially::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.DefenderInDefenseAreaPartially)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.DefenderInDefenseAreaPartially)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.DefenderInDefenseAreaPartially)
  return false;
#undef DO_
}

void GameEvent_DefenderInDefenseAreaPartially::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.DefenderInDefenseAreaPartially)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.DefenderInDefenseAreaPartially)
}

::google::protobuf::uint8* GameEvent_DefenderInDefenseAreaPartially::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseAreaPartially)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseAreaPartially)
  return target;
}

size_t GameEvent_DefenderInDefenseAreaPartially::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseAreaPartially)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_DefenderInDefenseAreaPartially::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderInDefenseAreaPartially)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderInDefenseAreaPartially* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_DefenderInDefenseAreaPartially>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderInDefenseAreaPartially)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderInDefenseAreaPartially)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderInDefenseAreaPartially::MergeFrom(const GameEvent_DefenderInDefenseAreaPartially& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseAreaPartially)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderInDefenseAreaPartially::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderInDefenseAreaPartially)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderInDefenseAreaPartially::CopyFrom(const GameEvent_DefenderInDefenseAreaPartially& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseAreaPartially)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderInDefenseAreaPartially::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseAreaPartially::Swap(GameEvent_DefenderInDefenseAreaPartially* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_DefenderInDefenseAreaPartially::InternalSwap(GameEvent_DefenderInDefenseAreaPartially* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_DefenderInDefenseAreaPartially::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_DefenderInDefenseAreaPartially

// required .Team by_team = 1;
bool GameEvent_DefenderInDefenseAreaPartially::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_DefenderInDefenseAreaPartially::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_DefenderInDefenseAreaPartially::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_DefenderInDefenseAreaPartially::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseAreaPartially.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_DefenderInDefenseAreaPartially::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_DefenderInDefenseAreaPartially::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_DefenderInDefenseAreaPartially::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.by_bot)
  return by_bot_;
}
void GameEvent_DefenderInDefenseAreaPartially::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseAreaPartially.by_bot)
}

// optional .Location location = 3;
bool GameEvent_DefenderInDefenseAreaPartially::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_DefenderInDefenseAreaPartially::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_DefenderInDefenseAreaPartially::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_DefenderInDefenseAreaPartially::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.DefenderInDefenseAreaPartially.location)
  return location_;
}
::Location* GameEvent_DefenderInDefenseAreaPartially::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.DefenderInDefenseAreaPartially.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_DefenderInDefenseAreaPartially::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.DefenderInDefenseAreaPartially.location)
}

// optional float distance = 4;
bool GameEvent_DefenderInDefenseAreaPartially::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_DefenderInDefenseAreaPartially::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float GameEvent_DefenderInDefenseAreaPartially::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.distance)
  return distance_;
}
void GameEvent_DefenderInDefenseAreaPartially::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseAreaPartially.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AttackerTouchedBallInDefenseArea::kByTeamFieldNumber;
const int GameEvent_AttackerTouchedBallInDefenseArea::kByBotFieldNumber;
const int GameEvent_AttackerTouchedBallInDefenseArea::kLocationFieldNumber;
const int GameEvent_AttackerTouchedBallInDefenseArea::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}
GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(const GameEvent_AttackerTouchedBallInDefenseArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}

void GameEvent_AttackerTouchedBallInDefenseArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&location_) + sizeof(distance_));
}

GameEvent_AttackerTouchedBallInDefenseArea::~GameEvent_AttackerTouchedBallInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedBallInDefenseArea)
  SharedDtor();
}

void GameEvent_AttackerTouchedBallInDefenseArea::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_AttackerTouchedBallInDefenseArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_AttackerTouchedBallInDefenseArea::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AttackerTouchedBallInDefenseArea& GameEvent_AttackerTouchedBallInDefenseArea::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_AttackerTouchedBallInDefenseArea* GameEvent_AttackerTouchedBallInDefenseArea::New(::google::protobuf::Arena* arena) const {
  GameEvent_AttackerTouchedBallInDefenseArea* n = new GameEvent_AttackerTouchedBallInDefenseArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_AttackerTouchedBallInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AttackerTouchedBallInDefenseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AttackerTouchedBallInDefenseArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AttackerTouchedBallInDefenseArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AttackerTouchedBallInDefenseArea)
  return false;
#undef DO_
}

void GameEvent_AttackerTouchedBallInDefenseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AttackerTouchedBallInDefenseArea)
}

::google::protobuf::uint8* GameEvent_AttackerTouchedBallInDefenseArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedBallInDefenseArea)
  return target;
}

size_t GameEvent_AttackerTouchedBallInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedBallInDefenseArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTouchedBallInDefenseArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AttackerTouchedBallInDefenseArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTouchedBallInDefenseArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTouchedBallInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTouchedBallInDefenseArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTouchedBallInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTouchedBallInDefenseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedBallInDefenseArea::Swap(GameEvent_AttackerTouchedBallInDefenseArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AttackerTouchedBallInDefenseArea::InternalSwap(GameEvent_AttackerTouchedBallInDefenseArea* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_AttackerTouchedBallInDefenseArea::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_AttackerTouchedBallInDefenseArea

// required .Team by_team = 1;
bool GameEvent_AttackerTouchedBallInDefenseArea::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_AttackerTouchedBallInDefenseArea::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_AttackerTouchedBallInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedBallInDefenseArea.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_AttackerTouchedBallInDefenseArea::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedBallInDefenseArea.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_AttackerTouchedBallInDefenseArea::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_AttackerTouchedBallInDefenseArea::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_AttackerTouchedBallInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedBallInDefenseArea.by_bot)
  return by_bot_;
}
void GameEvent_AttackerTouchedBallInDefenseArea::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedBallInDefenseArea.by_bot)
}

// optional .Location location = 3;
bool GameEvent_AttackerTouchedBallInDefenseArea::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_AttackerTouchedBallInDefenseArea::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_AttackerTouchedBallInDefenseArea::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedBallInDefenseArea.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_AttackerTouchedBallInDefenseArea::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerTouchedBallInDefenseArea.location)
  return location_;
}
::Location* GameEvent_AttackerTouchedBallInDefenseArea::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.AttackerTouchedBallInDefenseArea.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_AttackerTouchedBallInDefenseArea::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerTouchedBallInDefenseArea.location)
}

// optional float distance = 4;
bool GameEvent_AttackerTouchedBallInDefenseArea::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_AttackerTouchedBallInDefenseArea::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float GameEvent_AttackerTouchedBallInDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedBallInDefenseArea.distance)
  return distance_;
}
void GameEvent_AttackerTouchedBallInDefenseArea::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedBallInDefenseArea.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotKickedBallTooFast::kByTeamFieldNumber;
const int GameEvent_BotKickedBallTooFast::kByBotFieldNumber;
const int GameEvent_BotKickedBallTooFast::kLocationFieldNumber;
const int GameEvent_BotKickedBallTooFast::kInitialBallSpeedFieldNumber;
const int GameEvent_BotKickedBallTooFast::kChippedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotKickedBallTooFast)
}
GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(const GameEvent_BotKickedBallTooFast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&chipped_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(chipped_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotKickedBallTooFast)
}

void GameEvent_BotKickedBallTooFast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&chipped_) -
    reinterpret_cast<char*>(&location_) + sizeof(chipped_));
}

GameEvent_BotKickedBallTooFast::~GameEvent_BotKickedBallTooFast() {
  // @@protoc_insertion_point(destructor:GameEvent.BotKickedBallTooFast)
  SharedDtor();
}

void GameEvent_BotKickedBallTooFast::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BotKickedBallTooFast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotKickedBallTooFast::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotKickedBallTooFast& GameEvent_BotKickedBallTooFast::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotKickedBallTooFast* GameEvent_BotKickedBallTooFast::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotKickedBallTooFast* n = new GameEvent_BotKickedBallTooFast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotKickedBallTooFast::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotKickedBallTooFast)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&chipped_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(chipped_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotKickedBallTooFast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotKickedBallTooFast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float initial_ball_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_initial_ball_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_ball_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chipped = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_chipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotKickedBallTooFast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotKickedBallTooFast)
  return false;
#undef DO_
}

void GameEvent_BotKickedBallTooFast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotKickedBallTooFast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float initial_ball_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->initial_ball_speed(), output);
  }

  // optional bool chipped = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->chipped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotKickedBallTooFast)
}

::google::protobuf::uint8* GameEvent_BotKickedBallTooFast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotKickedBallTooFast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float initial_ball_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->initial_ball_speed(), target);
  }

  // optional bool chipped = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->chipped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotKickedBallTooFast)
  return target;
}

size_t GameEvent_BotKickedBallTooFast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotKickedBallTooFast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float initial_ball_speed = 4;
    if (has_initial_ball_speed()) {
      total_size += 1 + 4;
    }

    // optional bool chipped = 5;
    if (has_chipped()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotKickedBallTooFast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotKickedBallTooFast)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotKickedBallTooFast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotKickedBallTooFast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotKickedBallTooFast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotKickedBallTooFast)
    MergeFrom(*source);
  }
}

void GameEvent_BotKickedBallTooFast::MergeFrom(const GameEvent_BotKickedBallTooFast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotKickedBallTooFast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_ball_speed_ = from.initial_ball_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      chipped_ = from.chipped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotKickedBallTooFast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotKickedBallTooFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotKickedBallTooFast::CopyFrom(const GameEvent_BotKickedBallTooFast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotKickedBallTooFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotKickedBallTooFast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotKickedBallTooFast::Swap(GameEvent_BotKickedBallTooFast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotKickedBallTooFast::InternalSwap(GameEvent_BotKickedBallTooFast* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(initial_ball_speed_, other->initial_ball_speed_);
  std::swap(chipped_, other->chipped_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotKickedBallTooFast::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotKickedBallTooFast

// required .Team by_team = 1;
bool GameEvent_BotKickedBallTooFast::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotKickedBallTooFast::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotKickedBallTooFast::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotKickedBallTooFast::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotKickedBallTooFast::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotKickedBallTooFast::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotKickedBallTooFast.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_BotKickedBallTooFast::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotKickedBallTooFast::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotKickedBallTooFast::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotKickedBallTooFast::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_BotKickedBallTooFast::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.by_bot)
  return by_bot_;
}
void GameEvent_BotKickedBallTooFast::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotKickedBallTooFast.by_bot)
}

// optional .Location location = 3;
bool GameEvent_BotKickedBallTooFast::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotKickedBallTooFast::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotKickedBallTooFast::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotKickedBallTooFast::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BotKickedBallTooFast::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotKickedBallTooFast::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotKickedBallTooFast.location)
  return location_;
}
::Location* GameEvent_BotKickedBallTooFast::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BotKickedBallTooFast.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BotKickedBallTooFast::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotKickedBallTooFast.location)
}

// optional float initial_ball_speed = 4;
bool GameEvent_BotKickedBallTooFast::has_initial_ball_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_BotKickedBallTooFast::set_has_initial_ball_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_BotKickedBallTooFast::clear_has_initial_ball_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_BotKickedBallTooFast::clear_initial_ball_speed() {
  initial_ball_speed_ = 0;
  clear_has_initial_ball_speed();
}
float GameEvent_BotKickedBallTooFast::initial_ball_speed() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.initial_ball_speed)
  return initial_ball_speed_;
}
void GameEvent_BotKickedBallTooFast::set_initial_ball_speed(float value) {
  set_has_initial_ball_speed();
  initial_ball_speed_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotKickedBallTooFast.initial_ball_speed)
}

// optional bool chipped = 5;
bool GameEvent_BotKickedBallTooFast::has_chipped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameEvent_BotKickedBallTooFast::set_has_chipped() {
  _has_bits_[0] |= 0x00000010u;
}
void GameEvent_BotKickedBallTooFast::clear_has_chipped() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameEvent_BotKickedBallTooFast::clear_chipped() {
  chipped_ = false;
  clear_has_chipped();
}
bool GameEvent_BotKickedBallTooFast::chipped() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.chipped)
  return chipped_;
}
void GameEvent_BotKickedBallTooFast::set_chipped(bool value) {
  set_has_chipped();
  chipped_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotKickedBallTooFast.chipped)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotDribbledBallTooFar::kByTeamFieldNumber;
const int GameEvent_BotDribbledBallTooFar::kByBotFieldNumber;
const int GameEvent_BotDribbledBallTooFar::kStartFieldNumber;
const int GameEvent_BotDribbledBallTooFar::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotDribbledBallTooFar)
}
GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(const GameEvent_BotDribbledBallTooFar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::Location(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::Location(*from.end_);
  } else {
    end_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotDribbledBallTooFar)
}

void GameEvent_BotDribbledBallTooFar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_, 0, reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&start_) + sizeof(by_bot_));
}

GameEvent_BotDribbledBallTooFar::~GameEvent_BotDribbledBallTooFar() {
  // @@protoc_insertion_point(destructor:GameEvent.BotDribbledBallTooFar)
  SharedDtor();
}

void GameEvent_BotDribbledBallTooFar::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete end_;
  }
}

void GameEvent_BotDribbledBallTooFar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotDribbledBallTooFar::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotDribbledBallTooFar& GameEvent_BotDribbledBallTooFar::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotDribbledBallTooFar* GameEvent_BotDribbledBallTooFar::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotDribbledBallTooFar* n = new GameEvent_BotDribbledBallTooFar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotDribbledBallTooFar::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotDribbledBallTooFar)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_start()) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->::Location::Clear();
    }
    if (has_end()) {
      GOOGLE_DCHECK(end_ != NULL);
      end_->::Location::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotDribbledBallTooFar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotDribbledBallTooFar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotDribbledBallTooFar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotDribbledBallTooFar)
  return false;
#undef DO_
}

void GameEvent_BotDribbledBallTooFar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotDribbledBallTooFar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location start = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->start_, output);
  }

  // optional .Location end = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->end_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotDribbledBallTooFar)
}

::google::protobuf::uint8* GameEvent_BotDribbledBallTooFar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotDribbledBallTooFar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location start = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->start_, deterministic, target);
  }

  // optional .Location end = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->end_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotDribbledBallTooFar)
  return target;
}

size_t GameEvent_BotDribbledBallTooFar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotDribbledBallTooFar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional .Location end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->end_);
    }

  }
  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotDribbledBallTooFar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotDribbledBallTooFar)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotDribbledBallTooFar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotDribbledBallTooFar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotDribbledBallTooFar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotDribbledBallTooFar)
    MergeFrom(*source);
  }
}

void GameEvent_BotDribbledBallTooFar::MergeFrom(const GameEvent_BotDribbledBallTooFar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotDribbledBallTooFar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::Location::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end()->::Location::MergeFrom(from.end());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotDribbledBallTooFar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotDribbledBallTooFar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotDribbledBallTooFar::CopyFrom(const GameEvent_BotDribbledBallTooFar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotDribbledBallTooFar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotDribbledBallTooFar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_start()) {
    if (!this->start_->IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotDribbledBallTooFar::Swap(GameEvent_BotDribbledBallTooFar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotDribbledBallTooFar::InternalSwap(GameEvent_BotDribbledBallTooFar* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotDribbledBallTooFar::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotDribbledBallTooFar

// required .Team by_team = 1;
bool GameEvent_BotDribbledBallTooFar::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotDribbledBallTooFar::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotDribbledBallTooFar::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotDribbledBallTooFar::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotDribbledBallTooFar::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotDribbledBallTooFar.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotDribbledBallTooFar::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotDribbledBallTooFar.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_BotDribbledBallTooFar::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_BotDribbledBallTooFar::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_BotDribbledBallTooFar::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_BotDribbledBallTooFar::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_BotDribbledBallTooFar::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotDribbledBallTooFar.by_bot)
  return by_bot_;
}
void GameEvent_BotDribbledBallTooFar::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotDribbledBallTooFar.by_bot)
}

// optional .Location start = 3;
bool GameEvent_BotDribbledBallTooFar::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotDribbledBallTooFar::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotDribbledBallTooFar::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotDribbledBallTooFar::clear_start() {
  if (start_ != NULL) start_->::Location::Clear();
  clear_has_start();
}
const ::Location& GameEvent_BotDribbledBallTooFar::start() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotDribbledBallTooFar.start)
  return start_ != NULL ? *start_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotDribbledBallTooFar::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotDribbledBallTooFar.start)
  return start_;
}
::Location* GameEvent_BotDribbledBallTooFar::release_start() {
  // @@protoc_insertion_point(field_release:GameEvent.BotDribbledBallTooFar.start)
  clear_has_start();
  ::Location* temp = start_;
  start_ = NULL;
  return temp;
}
void GameEvent_BotDribbledBallTooFar::set_allocated_start(::Location* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotDribbledBallTooFar.start)
}

// optional .Location end = 4;
bool GameEvent_BotDribbledBallTooFar::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotDribbledBallTooFar::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotDribbledBallTooFar::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotDribbledBallTooFar::clear_end() {
  if (end_ != NULL) end_->::Location::Clear();
  clear_has_end();
}
const ::Location& GameEvent_BotDribbledBallTooFar::end() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotDribbledBallTooFar.end)
  return end_ != NULL ? *end_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotDribbledBallTooFar::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    end_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotDribbledBallTooFar.end)
  return end_;
}
::Location* GameEvent_BotDribbledBallTooFar::release_end() {
  // @@protoc_insertion_point(field_release:GameEvent.BotDribbledBallTooFar.end)
  clear_has_end();
  ::Location* temp = end_;
  end_ = NULL;
  return temp;
}
void GameEvent_BotDribbledBallTooFar::set_allocated_end(::Location* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotDribbledBallTooFar.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AttackerTouchedOpponentInDefenseArea::kByTeamFieldNumber;
const int GameEvent_AttackerTouchedOpponentInDefenseArea::kByBotFieldNumber;
const int GameEvent_AttackerTouchedOpponentInDefenseArea::kVictimFieldNumber;
const int GameEvent_AttackerTouchedOpponentInDefenseArea::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}
GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(const GameEvent_AttackerTouchedOpponentInDefenseArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&victim_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(victim_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&victim_) -
    reinterpret_cast<char*>(&location_) + sizeof(victim_));
}

GameEvent_AttackerTouchedOpponentInDefenseArea::~GameEvent_AttackerTouchedOpponentInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
  SharedDtor();
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_AttackerTouchedOpponentInDefenseArea::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent_AttackerTouchedOpponentInDefenseArea::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent_AttackerTouchedOpponentInDefenseArea::New(::google::protobuf::Arena* arena) const {
  GameEvent_AttackerTouchedOpponentInDefenseArea* n = new GameEvent_AttackerTouchedOpponentInDefenseArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&victim_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(victim_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AttackerTouchedOpponentInDefenseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_victim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AttackerTouchedOpponentInDefenseArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AttackerTouchedOpponentInDefenseArea)
  return false;
#undef DO_
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional uint32 victim = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->victim(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AttackerTouchedOpponentInDefenseArea)
}

::google::protobuf::uint8* GameEvent_AttackerTouchedOpponentInDefenseArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional uint32 victim = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->victim(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedOpponentInDefenseArea)
  return target;
}

size_t GameEvent_AttackerTouchedOpponentInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional uint32 victim = 4;
    if (has_victim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTouchedOpponentInDefenseArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AttackerTouchedOpponentInDefenseArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTouchedOpponentInDefenseArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTouchedOpponentInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTouchedOpponentInDefenseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::Swap(GameEvent_AttackerTouchedOpponentInDefenseArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::InternalSwap(GameEvent_AttackerTouchedOpponentInDefenseArea* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(victim_, other->victim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_AttackerTouchedOpponentInDefenseArea::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_AttackerTouchedOpponentInDefenseArea

// required .Team by_team = 1;
bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_AttackerTouchedOpponentInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedOpponentInDefenseArea.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedOpponentInDefenseArea.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_AttackerTouchedOpponentInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedOpponentInDefenseArea.by_bot)
  return by_bot_;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedOpponentInDefenseArea.by_bot)
}

// optional uint32 victim = 4;
bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_victim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::set_has_victim() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_has_victim() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_victim() {
  victim_ = 0u;
  clear_has_victim();
}
::google::protobuf::uint32 GameEvent_AttackerTouchedOpponentInDefenseArea::victim() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedOpponentInDefenseArea.victim)
  return victim_;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::set_victim(::google::protobuf::uint32 value) {
  set_has_victim();
  victim_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedOpponentInDefenseArea.victim)
}

// optional .Location location = 3;
bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_AttackerTouchedOpponentInDefenseArea::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedOpponentInDefenseArea.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_AttackerTouchedOpponentInDefenseArea::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerTouchedOpponentInDefenseArea.location)
  return location_;
}
::Location* GameEvent_AttackerTouchedOpponentInDefenseArea::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.AttackerTouchedOpponentInDefenseArea.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerTouchedOpponentInDefenseArea.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AttackerDoubleTouchedBall::kByTeamFieldNumber;
const int GameEvent_AttackerDoubleTouchedBall::kByBotFieldNumber;
const int GameEvent_AttackerDoubleTouchedBall::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AttackerDoubleTouchedBall)
}
GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(const GameEvent_AttackerDoubleTouchedBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerDoubleTouchedBall)
}

void GameEvent_AttackerDoubleTouchedBall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&location_) + sizeof(by_bot_));
}

GameEvent_AttackerDoubleTouchedBall::~GameEvent_AttackerDoubleTouchedBall() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerDoubleTouchedBall)
  SharedDtor();
}

void GameEvent_AttackerDoubleTouchedBall::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_AttackerDoubleTouchedBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_AttackerDoubleTouchedBall::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AttackerDoubleTouchedBall& GameEvent_AttackerDoubleTouchedBall::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_AttackerDoubleTouchedBall* GameEvent_AttackerDoubleTouchedBall::New(::google::protobuf::Arena* arena) const {
  GameEvent_AttackerDoubleTouchedBall* n = new GameEvent_AttackerDoubleTouchedBall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_AttackerDoubleTouchedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerDoubleTouchedBall)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AttackerDoubleTouchedBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AttackerDoubleTouchedBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AttackerDoubleTouchedBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AttackerDoubleTouchedBall)
  return false;
#undef DO_
}

void GameEvent_AttackerDoubleTouchedBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AttackerDoubleTouchedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AttackerDoubleTouchedBall)
}

::google::protobuf::uint8* GameEvent_AttackerDoubleTouchedBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerDoubleTouchedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerDoubleTouchedBall)
  return target;
}

size_t GameEvent_AttackerDoubleTouchedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerDoubleTouchedBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_AttackerDoubleTouchedBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerDoubleTouchedBall)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerDoubleTouchedBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AttackerDoubleTouchedBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerDoubleTouchedBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerDoubleTouchedBall)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerDoubleTouchedBall::MergeFrom(const GameEvent_AttackerDoubleTouchedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerDoubleTouchedBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerDoubleTouchedBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerDoubleTouchedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerDoubleTouchedBall::CopyFrom(const GameEvent_AttackerDoubleTouchedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerDoubleTouchedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerDoubleTouchedBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerDoubleTouchedBall::Swap(GameEvent_AttackerDoubleTouchedBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AttackerDoubleTouchedBall::InternalSwap(GameEvent_AttackerDoubleTouchedBall* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_AttackerDoubleTouchedBall::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_AttackerDoubleTouchedBall

// required .Team by_team = 1;
bool GameEvent_AttackerDoubleTouchedBall::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_AttackerDoubleTouchedBall::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_AttackerDoubleTouchedBall::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_AttackerDoubleTouchedBall::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_AttackerDoubleTouchedBall::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerDoubleTouchedBall.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_AttackerDoubleTouchedBall::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerDoubleTouchedBall.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_AttackerDoubleTouchedBall::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_AttackerDoubleTouchedBall::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_AttackerDoubleTouchedBall::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_AttackerDoubleTouchedBall::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_AttackerDoubleTouchedBall::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerDoubleTouchedBall.by_bot)
  return by_bot_;
}
void GameEvent_AttackerDoubleTouchedBall::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerDoubleTouchedBall.by_bot)
}

// optional .Location location = 3;
bool GameEvent_AttackerDoubleTouchedBall::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_AttackerDoubleTouchedBall::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_AttackerDoubleTouchedBall::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AttackerDoubleTouchedBall::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_AttackerDoubleTouchedBall::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerDoubleTouchedBall.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_AttackerDoubleTouchedBall::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerDoubleTouchedBall.location)
  return location_;
}
::Location* GameEvent_AttackerDoubleTouchedBall::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.AttackerDoubleTouchedBall.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_AttackerDoubleTouchedBall::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerDoubleTouchedBall.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AttackerTooCloseToDefenseArea::kByTeamFieldNumber;
const int GameEvent_AttackerTooCloseToDefenseArea::kByBotFieldNumber;
const int GameEvent_AttackerTooCloseToDefenseArea::kLocationFieldNumber;
const int GameEvent_AttackerTooCloseToDefenseArea::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AttackerTooCloseToDefenseArea)
}
GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(const GameEvent_AttackerTooCloseToDefenseArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTooCloseToDefenseArea)
}

void GameEvent_AttackerTooCloseToDefenseArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&location_) + sizeof(distance_));
}

GameEvent_AttackerTooCloseToDefenseArea::~GameEvent_AttackerTooCloseToDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTooCloseToDefenseArea)
  SharedDtor();
}

void GameEvent_AttackerTooCloseToDefenseArea::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_AttackerTooCloseToDefenseArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_AttackerTooCloseToDefenseArea::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AttackerTooCloseToDefenseArea& GameEvent_AttackerTooCloseToDefenseArea::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_AttackerTooCloseToDefenseArea* GameEvent_AttackerTooCloseToDefenseArea::New(::google::protobuf::Arena* arena) const {
  GameEvent_AttackerTooCloseToDefenseArea* n = new GameEvent_AttackerTooCloseToDefenseArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_AttackerTooCloseToDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AttackerTooCloseToDefenseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AttackerTooCloseToDefenseArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AttackerTooCloseToDefenseArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AttackerTooCloseToDefenseArea)
  return false;
#undef DO_
}

void GameEvent_AttackerTooCloseToDefenseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AttackerTooCloseToDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AttackerTooCloseToDefenseArea)
}

::google::protobuf::uint8* GameEvent_AttackerTooCloseToDefenseArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTooCloseToDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTooCloseToDefenseArea)
  return target;
}

size_t GameEvent_AttackerTooCloseToDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTooCloseToDefenseArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTooCloseToDefenseArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AttackerTooCloseToDefenseArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTooCloseToDefenseArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTooCloseToDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTooCloseToDefenseArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTooCloseToDefenseArea::CopyFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTooCloseToDefenseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTooCloseToDefenseArea::Swap(GameEvent_AttackerTooCloseToDefenseArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AttackerTooCloseToDefenseArea::InternalSwap(GameEvent_AttackerTooCloseToDefenseArea* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_AttackerTooCloseToDefenseArea::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_AttackerTooCloseToDefenseArea

// required .Team by_team = 1;
bool GameEvent_AttackerTooCloseToDefenseArea::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_AttackerTooCloseToDefenseArea::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_AttackerTooCloseToDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_AttackerTooCloseToDefenseArea::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTooCloseToDefenseArea.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_AttackerTooCloseToDefenseArea::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_AttackerTooCloseToDefenseArea::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_AttackerTooCloseToDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.by_bot)
  return by_bot_;
}
void GameEvent_AttackerTooCloseToDefenseArea::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTooCloseToDefenseArea.by_bot)
}

// optional .Location location = 3;
bool GameEvent_AttackerTooCloseToDefenseArea::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_AttackerTooCloseToDefenseArea::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_AttackerTooCloseToDefenseArea::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_AttackerTooCloseToDefenseArea::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerTooCloseToDefenseArea.location)
  return location_;
}
::Location* GameEvent_AttackerTooCloseToDefenseArea::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.AttackerTooCloseToDefenseArea.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_AttackerTooCloseToDefenseArea::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerTooCloseToDefenseArea.location)
}

// optional float distance = 4;
bool GameEvent_AttackerTooCloseToDefenseArea::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_AttackerTooCloseToDefenseArea::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float GameEvent_AttackerTooCloseToDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.distance)
  return distance_;
}
void GameEvent_AttackerTooCloseToDefenseArea::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTooCloseToDefenseArea.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotHeldBallDeliberately::kByTeamFieldNumber;
const int GameEvent_BotHeldBallDeliberately::kByBotFieldNumber;
const int GameEvent_BotHeldBallDeliberately::kLocationFieldNumber;
const int GameEvent_BotHeldBallDeliberately::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotHeldBallDeliberately)
}
GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(const GameEvent_BotHeldBallDeliberately& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotHeldBallDeliberately)
}

void GameEvent_BotHeldBallDeliberately::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&location_) + sizeof(duration_));
}

GameEvent_BotHeldBallDeliberately::~GameEvent_BotHeldBallDeliberately() {
  // @@protoc_insertion_point(destructor:GameEvent.BotHeldBallDeliberately)
  SharedDtor();
}

void GameEvent_BotHeldBallDeliberately::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BotHeldBallDeliberately::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotHeldBallDeliberately::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotHeldBallDeliberately& GameEvent_BotHeldBallDeliberately::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotHeldBallDeliberately* GameEvent_BotHeldBallDeliberately::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotHeldBallDeliberately* n = new GameEvent_BotHeldBallDeliberately;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotHeldBallDeliberately::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotHeldBallDeliberately)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotHeldBallDeliberately::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotHeldBallDeliberately)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotHeldBallDeliberately)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotHeldBallDeliberately)
  return false;
#undef DO_
}

void GameEvent_BotHeldBallDeliberately::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotHeldBallDeliberately)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotHeldBallDeliberately)
}

::google::protobuf::uint8* GameEvent_BotHeldBallDeliberately::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotHeldBallDeliberately)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotHeldBallDeliberately)
  return target;
}

size_t GameEvent_BotHeldBallDeliberately::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotHeldBallDeliberately)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotHeldBallDeliberately::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotHeldBallDeliberately)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotHeldBallDeliberately* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotHeldBallDeliberately>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotHeldBallDeliberately)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotHeldBallDeliberately)
    MergeFrom(*source);
  }
}

void GameEvent_BotHeldBallDeliberately::MergeFrom(const GameEvent_BotHeldBallDeliberately& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotHeldBallDeliberately)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotHeldBallDeliberately::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotHeldBallDeliberately)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotHeldBallDeliberately::CopyFrom(const GameEvent_BotHeldBallDeliberately& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotHeldBallDeliberately)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotHeldBallDeliberately::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotHeldBallDeliberately::Swap(GameEvent_BotHeldBallDeliberately* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotHeldBallDeliberately::InternalSwap(GameEvent_BotHeldBallDeliberately* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotHeldBallDeliberately::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotHeldBallDeliberately

// required .Team by_team = 1;
bool GameEvent_BotHeldBallDeliberately::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotHeldBallDeliberately::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotHeldBallDeliberately::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotHeldBallDeliberately::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotHeldBallDeliberately::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotHeldBallDeliberately.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotHeldBallDeliberately::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotHeldBallDeliberately.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_BotHeldBallDeliberately::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotHeldBallDeliberately::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotHeldBallDeliberately::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotHeldBallDeliberately::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_BotHeldBallDeliberately::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotHeldBallDeliberately.by_bot)
  return by_bot_;
}
void GameEvent_BotHeldBallDeliberately::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotHeldBallDeliberately.by_bot)
}

// optional .Location location = 3;
bool GameEvent_BotHeldBallDeliberately::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotHeldBallDeliberately::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotHeldBallDeliberately::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotHeldBallDeliberately::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BotHeldBallDeliberately::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotHeldBallDeliberately.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotHeldBallDeliberately::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotHeldBallDeliberately.location)
  return location_;
}
::Location* GameEvent_BotHeldBallDeliberately::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BotHeldBallDeliberately.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BotHeldBallDeliberately::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotHeldBallDeliberately.location)
}

// optional float duration = 4;
bool GameEvent_BotHeldBallDeliberately::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_BotHeldBallDeliberately::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_BotHeldBallDeliberately::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_BotHeldBallDeliberately::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float GameEvent_BotHeldBallDeliberately::duration() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotHeldBallDeliberately.duration)
  return duration_;
}
void GameEvent_BotHeldBallDeliberately::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotHeldBallDeliberately.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotInterferedPlacement::kByTeamFieldNumber;
const int GameEvent_BotInterferedPlacement::kByBotFieldNumber;
const int GameEvent_BotInterferedPlacement::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotInterferedPlacement)
}
GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(const GameEvent_BotInterferedPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotInterferedPlacement)
}

void GameEvent_BotInterferedPlacement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&location_) + sizeof(by_bot_));
}

GameEvent_BotInterferedPlacement::~GameEvent_BotInterferedPlacement() {
  // @@protoc_insertion_point(destructor:GameEvent.BotInterferedPlacement)
  SharedDtor();
}

void GameEvent_BotInterferedPlacement::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_BotInterferedPlacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotInterferedPlacement::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotInterferedPlacement& GameEvent_BotInterferedPlacement::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotInterferedPlacement* GameEvent_BotInterferedPlacement::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotInterferedPlacement* n = new GameEvent_BotInterferedPlacement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotInterferedPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotInterferedPlacement)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotInterferedPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotInterferedPlacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotInterferedPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotInterferedPlacement)
  return false;
#undef DO_
}

void GameEvent_BotInterferedPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotInterferedPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotInterferedPlacement)
}

::google::protobuf::uint8* GameEvent_BotInterferedPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotInterferedPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotInterferedPlacement)
  return target;
}

size_t GameEvent_BotInterferedPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotInterferedPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotInterferedPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotInterferedPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotInterferedPlacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotInterferedPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotInterferedPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotInterferedPlacement)
    MergeFrom(*source);
  }
}

void GameEvent_BotInterferedPlacement::MergeFrom(const GameEvent_BotInterferedPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotInterferedPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotInterferedPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotInterferedPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotInterferedPlacement::CopyFrom(const GameEvent_BotInterferedPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotInterferedPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotInterferedPlacement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotInterferedPlacement::Swap(GameEvent_BotInterferedPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotInterferedPlacement::InternalSwap(GameEvent_BotInterferedPlacement* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(by_bot_, other->by_bot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotInterferedPlacement::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotInterferedPlacement

// required .Team by_team = 1;
bool GameEvent_BotInterferedPlacement::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_BotInterferedPlacement::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_BotInterferedPlacement::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_BotInterferedPlacement::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotInterferedPlacement::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotInterferedPlacement.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotInterferedPlacement::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotInterferedPlacement.by_team)
}

// optional uint32 by_bot = 2;
bool GameEvent_BotInterferedPlacement::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_BotInterferedPlacement::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_BotInterferedPlacement::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_BotInterferedPlacement::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
::google::protobuf::uint32 GameEvent_BotInterferedPlacement::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotInterferedPlacement.by_bot)
  return by_bot_;
}
void GameEvent_BotInterferedPlacement::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotInterferedPlacement.by_bot)
}

// optional .Location location = 3;
bool GameEvent_BotInterferedPlacement::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotInterferedPlacement::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotInterferedPlacement::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotInterferedPlacement::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_BotInterferedPlacement::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotInterferedPlacement.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_BotInterferedPlacement::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.BotInterferedPlacement.location)
  return location_;
}
::Location* GameEvent_BotInterferedPlacement::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.BotInterferedPlacement.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_BotInterferedPlacement::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotInterferedPlacement.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_MultipleCards::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_MultipleCards::GameEvent_MultipleCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.MultipleCards)
}
GameEvent_MultipleCards::GameEvent_MultipleCards(const GameEvent_MultipleCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleCards)
}

void GameEvent_MultipleCards::SharedCtor() {
  _cached_size_ = 0;
  by_team_ = 0;
}

GameEvent_MultipleCards::~GameEvent_MultipleCards() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleCards)
  SharedDtor();
}

void GameEvent_MultipleCards::SharedDtor() {
}

void GameEvent_MultipleCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_MultipleCards::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_MultipleCards& GameEvent_MultipleCards::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_MultipleCards* GameEvent_MultipleCards::New(::google::protobuf::Arena* arena) const {
  GameEvent_MultipleCards* n = new GameEvent_MultipleCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_MultipleCards::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleCards)
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_MultipleCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.MultipleCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.MultipleCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.MultipleCards)
  return false;
#undef DO_
}

void GameEvent_MultipleCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.MultipleCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.MultipleCards)
}

::google::protobuf::uint8* GameEvent_MultipleCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleCards)
  return target;
}

size_t GameEvent_MultipleCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_MultipleCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultipleCards)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultipleCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_MultipleCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultipleCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultipleCards)
    MergeFrom(*source);
  }
}

void GameEvent_MultipleCards::MergeFrom(const GameEvent_MultipleCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_MultipleCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultipleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultipleCards::CopyFrom(const GameEvent_MultipleCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultipleCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_MultipleCards::Swap(GameEvent_MultipleCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_MultipleCards::InternalSwap(GameEvent_MultipleCards* other) {
  std::swap(by_team_, other->by_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_MultipleCards::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_MultipleCards

// required .Team by_team = 1;
bool GameEvent_MultipleCards::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_MultipleCards::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_MultipleCards::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_MultipleCards::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_MultipleCards::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.MultipleCards.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_MultipleCards::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.MultipleCards.by_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_MultipleFouls::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_MultipleFouls::GameEvent_MultipleFouls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.MultipleFouls)
}
GameEvent_MultipleFouls::GameEvent_MultipleFouls(const GameEvent_MultipleFouls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleFouls)
}

void GameEvent_MultipleFouls::SharedCtor() {
  _cached_size_ = 0;
  by_team_ = 0;
}

GameEvent_MultipleFouls::~GameEvent_MultipleFouls() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleFouls)
  SharedDtor();
}

void GameEvent_MultipleFouls::SharedDtor() {
}

void GameEvent_MultipleFouls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_MultipleFouls::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_MultipleFouls& GameEvent_MultipleFouls::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_MultipleFouls* GameEvent_MultipleFouls::New(::google::protobuf::Arena* arena) const {
  GameEvent_MultipleFouls* n = new GameEvent_MultipleFouls;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_MultipleFouls::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleFouls)
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_MultipleFouls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.MultipleFouls)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.MultipleFouls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.MultipleFouls)
  return false;
#undef DO_
}

void GameEvent_MultipleFouls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.MultipleFouls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.MultipleFouls)
}

::google::protobuf::uint8* GameEvent_MultipleFouls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleFouls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleFouls)
  return target;
}

size_t GameEvent_MultipleFouls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleFouls)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_MultipleFouls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultipleFouls)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultipleFouls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_MultipleFouls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultipleFouls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultipleFouls)
    MergeFrom(*source);
  }
}

void GameEvent_MultipleFouls::MergeFrom(const GameEvent_MultipleFouls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleFouls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_MultipleFouls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultipleFouls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultipleFouls::CopyFrom(const GameEvent_MultipleFouls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleFouls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultipleFouls::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_MultipleFouls::Swap(GameEvent_MultipleFouls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_MultipleFouls::InternalSwap(GameEvent_MultipleFouls* other) {
  std::swap(by_team_, other->by_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_MultipleFouls::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_MultipleFouls

// required .Team by_team = 1;
bool GameEvent_MultipleFouls::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_MultipleFouls::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_MultipleFouls::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_MultipleFouls::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_MultipleFouls::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.MultipleFouls.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_MultipleFouls::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.MultipleFouls.by_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_MultiplePlacementFailures::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.MultiplePlacementFailures)
}
GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(const GameEvent_MultiplePlacementFailures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultiplePlacementFailures)
}

void GameEvent_MultiplePlacementFailures::SharedCtor() {
  _cached_size_ = 0;
  by_team_ = 0;
}

GameEvent_MultiplePlacementFailures::~GameEvent_MultiplePlacementFailures() {
  // @@protoc_insertion_point(destructor:GameEvent.MultiplePlacementFailures)
  SharedDtor();
}

void GameEvent_MultiplePlacementFailures::SharedDtor() {
}

void GameEvent_MultiplePlacementFailures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_MultiplePlacementFailures::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_MultiplePlacementFailures& GameEvent_MultiplePlacementFailures::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_MultiplePlacementFailures* GameEvent_MultiplePlacementFailures::New(::google::protobuf::Arena* arena) const {
  GameEvent_MultiplePlacementFailures* n = new GameEvent_MultiplePlacementFailures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_MultiplePlacementFailures::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultiplePlacementFailures)
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_MultiplePlacementFailures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.MultiplePlacementFailures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.MultiplePlacementFailures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.MultiplePlacementFailures)
  return false;
#undef DO_
}

void GameEvent_MultiplePlacementFailures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.MultiplePlacementFailures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.MultiplePlacementFailures)
}

::google::protobuf::uint8* GameEvent_MultiplePlacementFailures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultiplePlacementFailures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultiplePlacementFailures)
  return target;
}

size_t GameEvent_MultiplePlacementFailures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultiplePlacementFailures)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_MultiplePlacementFailures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultiplePlacementFailures)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultiplePlacementFailures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_MultiplePlacementFailures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultiplePlacementFailures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultiplePlacementFailures)
    MergeFrom(*source);
  }
}

void GameEvent_MultiplePlacementFailures::MergeFrom(const GameEvent_MultiplePlacementFailures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultiplePlacementFailures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_MultiplePlacementFailures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultiplePlacementFailures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultiplePlacementFailures::CopyFrom(const GameEvent_MultiplePlacementFailures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultiplePlacementFailures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultiplePlacementFailures::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_MultiplePlacementFailures::Swap(GameEvent_MultiplePlacementFailures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_MultiplePlacementFailures::InternalSwap(GameEvent_MultiplePlacementFailures* other) {
  std::swap(by_team_, other->by_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_MultiplePlacementFailures::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_MultiplePlacementFailures

// required .Team by_team = 1;
bool GameEvent_MultiplePlacementFailures::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_MultiplePlacementFailures::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_MultiplePlacementFailures::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_MultiplePlacementFailures::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_MultiplePlacementFailures::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.MultiplePlacementFailures.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_MultiplePlacementFailures::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.MultiplePlacementFailures.by_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_KickTimeout::kByTeamFieldNumber;
const int GameEvent_KickTimeout::kLocationFieldNumber;
const int GameEvent_KickTimeout::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_KickTimeout::GameEvent_KickTimeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.KickTimeout)
}
GameEvent_KickTimeout::GameEvent_KickTimeout(const GameEvent_KickTimeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.KickTimeout)
}

void GameEvent_KickTimeout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&location_) + sizeof(time_));
}

GameEvent_KickTimeout::~GameEvent_KickTimeout() {
  // @@protoc_insertion_point(destructor:GameEvent.KickTimeout)
  SharedDtor();
}

void GameEvent_KickTimeout::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_KickTimeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_KickTimeout::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_KickTimeout& GameEvent_KickTimeout::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_KickTimeout* GameEvent_KickTimeout::New(::google::protobuf::Arena* arena) const {
  GameEvent_KickTimeout* n = new GameEvent_KickTimeout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_KickTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KickTimeout)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_KickTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.KickTimeout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.KickTimeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.KickTimeout)
  return false;
#undef DO_
}

void GameEvent_KickTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.KickTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional .Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional float time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.KickTimeout)
}

::google::protobuf::uint8* GameEvent_KickTimeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KickTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional .Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // optional float time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KickTimeout)
  return target;
}

size_t GameEvent_KickTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.KickTimeout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 2;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional float time = 3;
  if (has_time()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_KickTimeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.KickTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_KickTimeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_KickTimeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.KickTimeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.KickTimeout)
    MergeFrom(*source);
  }
}

void GameEvent_KickTimeout::MergeFrom(const GameEvent_KickTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KickTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_KickTimeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.KickTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_KickTimeout::CopyFrom(const GameEvent_KickTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KickTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_KickTimeout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KickTimeout::Swap(GameEvent_KickTimeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_KickTimeout::InternalSwap(GameEvent_KickTimeout* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_KickTimeout::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_KickTimeout

// required .Team by_team = 1;
bool GameEvent_KickTimeout::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_KickTimeout::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_KickTimeout::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_KickTimeout::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_KickTimeout::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.KickTimeout.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_KickTimeout::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.KickTimeout.by_team)
}

// optional .Location location = 2;
bool GameEvent_KickTimeout::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_KickTimeout::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_KickTimeout::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_KickTimeout::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_KickTimeout::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.KickTimeout.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_KickTimeout::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.KickTimeout.location)
  return location_;
}
::Location* GameEvent_KickTimeout::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.KickTimeout.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_KickTimeout::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.KickTimeout.location)
}

// optional float time = 3;
bool GameEvent_KickTimeout::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_KickTimeout::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_KickTimeout::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_KickTimeout::clear_time() {
  time_ = 0;
  clear_has_time();
}
float GameEvent_KickTimeout::time() const {
  // @@protoc_insertion_point(field_get:GameEvent.KickTimeout.time)
  return time_;
}
void GameEvent_KickTimeout::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.KickTimeout.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_NoProgressInGame::kLocationFieldNumber;
const int GameEvent_NoProgressInGame::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_NoProgressInGame::GameEvent_NoProgressInGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.NoProgressInGame)
}
GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(const GameEvent_NoProgressInGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.NoProgressInGame)
}

void GameEvent_NoProgressInGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&location_) + sizeof(time_));
}

GameEvent_NoProgressInGame::~GameEvent_NoProgressInGame() {
  // @@protoc_insertion_point(destructor:GameEvent.NoProgressInGame)
  SharedDtor();
}

void GameEvent_NoProgressInGame::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_NoProgressInGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_NoProgressInGame::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_NoProgressInGame& GameEvent_NoProgressInGame::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_NoProgressInGame* GameEvent_NoProgressInGame::New(::google::protobuf::Arena* arena) const {
  GameEvent_NoProgressInGame* n = new GameEvent_NoProgressInGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_NoProgressInGame::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.NoProgressInGame)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_NoProgressInGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.NoProgressInGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Location location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.NoProgressInGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.NoProgressInGame)
  return false;
#undef DO_
}

void GameEvent_NoProgressInGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.NoProgressInGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Location location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional float time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.NoProgressInGame)
}

::google::protobuf::uint8* GameEvent_NoProgressInGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.NoProgressInGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Location location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, deterministic, target);
  }

  // optional float time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.NoProgressInGame)
  return target;
}

size_t GameEvent_NoProgressInGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.NoProgressInGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional float time = 2;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_NoProgressInGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.NoProgressInGame)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_NoProgressInGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_NoProgressInGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.NoProgressInGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.NoProgressInGame)
    MergeFrom(*source);
  }
}

void GameEvent_NoProgressInGame::MergeFrom(const GameEvent_NoProgressInGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.NoProgressInGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_NoProgressInGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.NoProgressInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_NoProgressInGame::CopyFrom(const GameEvent_NoProgressInGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.NoProgressInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_NoProgressInGame::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_NoProgressInGame::Swap(GameEvent_NoProgressInGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_NoProgressInGame::InternalSwap(GameEvent_NoProgressInGame* other) {
  std::swap(location_, other->location_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_NoProgressInGame::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_NoProgressInGame

// optional .Location location = 1;
bool GameEvent_NoProgressInGame::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_NoProgressInGame::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_NoProgressInGame::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_NoProgressInGame::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_NoProgressInGame::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.NoProgressInGame.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_NoProgressInGame::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.NoProgressInGame.location)
  return location_;
}
::Location* GameEvent_NoProgressInGame::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.NoProgressInGame.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_NoProgressInGame::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.NoProgressInGame.location)
}

// optional float time = 2;
bool GameEvent_NoProgressInGame::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_NoProgressInGame::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_NoProgressInGame::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_NoProgressInGame::clear_time() {
  time_ = 0;
  clear_has_time();
}
float GameEvent_NoProgressInGame::time() const {
  // @@protoc_insertion_point(field_get:GameEvent.NoProgressInGame.time)
  return time_;
}
void GameEvent_NoProgressInGame::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.NoProgressInGame.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_PlacementFailed::kByTeamFieldNumber;
const int GameEvent_PlacementFailed::kRemainingDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_PlacementFailed::GameEvent_PlacementFailed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.PlacementFailed)
}
GameEvent_PlacementFailed::GameEvent_PlacementFailed(const GameEvent_PlacementFailed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&remaining_distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(remaining_distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.PlacementFailed)
}

void GameEvent_PlacementFailed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&by_team_, 0, reinterpret_cast<char*>(&remaining_distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(remaining_distance_));
}

GameEvent_PlacementFailed::~GameEvent_PlacementFailed() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementFailed)
  SharedDtor();
}

void GameEvent_PlacementFailed::SharedDtor() {
}

void GameEvent_PlacementFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_PlacementFailed::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_PlacementFailed& GameEvent_PlacementFailed::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_PlacementFailed* GameEvent_PlacementFailed::New(::google::protobuf::Arena* arena) const {
  GameEvent_PlacementFailed* n = new GameEvent_PlacementFailed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_PlacementFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementFailed)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&remaining_distance_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(remaining_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_PlacementFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.PlacementFailed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float remaining_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_remaining_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remaining_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.PlacementFailed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.PlacementFailed)
  return false;
#undef DO_
}

void GameEvent_PlacementFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.PlacementFailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional float remaining_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->remaining_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.PlacementFailed)
}

::google::protobuf::uint8* GameEvent_PlacementFailed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementFailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional float remaining_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->remaining_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementFailed)
  return target;
}

size_t GameEvent_PlacementFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementFailed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional float remaining_distance = 2;
  if (has_remaining_distance()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_PlacementFailed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.PlacementFailed)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_PlacementFailed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_PlacementFailed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.PlacementFailed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.PlacementFailed)
    MergeFrom(*source);
  }
}

void GameEvent_PlacementFailed::MergeFrom(const GameEvent_PlacementFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementFailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      remaining_distance_ = from.remaining_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_PlacementFailed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.PlacementFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_PlacementFailed::CopyFrom(const GameEvent_PlacementFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PlacementFailed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_PlacementFailed::Swap(GameEvent_PlacementFailed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_PlacementFailed::InternalSwap(GameEvent_PlacementFailed* other) {
  std::swap(by_team_, other->by_team_);
  std::swap(remaining_distance_, other->remaining_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_PlacementFailed::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_PlacementFailed

// required .Team by_team = 1;
bool GameEvent_PlacementFailed::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_PlacementFailed::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_PlacementFailed::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_PlacementFailed::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_PlacementFailed::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementFailed.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_PlacementFailed::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementFailed.by_team)
}

// optional float remaining_distance = 2;
bool GameEvent_PlacementFailed::has_remaining_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_PlacementFailed::set_has_remaining_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_PlacementFailed::clear_has_remaining_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_PlacementFailed::clear_remaining_distance() {
  remaining_distance_ = 0;
  clear_has_remaining_distance();
}
float GameEvent_PlacementFailed::remaining_distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementFailed.remaining_distance)
  return remaining_distance_;
}
void GameEvent_PlacementFailed::set_remaining_distance(float value) {
  set_has_remaining_distance();
  remaining_distance_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementFailed.remaining_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_UnsportingBehaviorMinor::kByTeamFieldNumber;
const int GameEvent_UnsportingBehaviorMinor::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.UnsportingBehaviorMinor)
}
GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(const GameEvent_UnsportingBehaviorMinor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMinor)
}

void GameEvent_UnsportingBehaviorMinor::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_team_ = 0;
}

GameEvent_UnsportingBehaviorMinor::~GameEvent_UnsportingBehaviorMinor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMinor)
  SharedDtor();
}

void GameEvent_UnsportingBehaviorMinor::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameEvent_UnsportingBehaviorMinor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_UnsportingBehaviorMinor::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_UnsportingBehaviorMinor& GameEvent_UnsportingBehaviorMinor::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_UnsportingBehaviorMinor* GameEvent_UnsportingBehaviorMinor::New(::google::protobuf::Arena* arena) const {
  GameEvent_UnsportingBehaviorMinor* n = new GameEvent_UnsportingBehaviorMinor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_UnsportingBehaviorMinor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMinor)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_UnsportingBehaviorMinor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.UnsportingBehaviorMinor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameEvent.UnsportingBehaviorMinor.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.UnsportingBehaviorMinor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.UnsportingBehaviorMinor)
  return false;
#undef DO_
}

void GameEvent_UnsportingBehaviorMinor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.UnsportingBehaviorMinor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMinor.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.UnsportingBehaviorMinor)
}

::google::protobuf::uint8* GameEvent_UnsportingBehaviorMinor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMinor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMinor.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMinor)
  return target;
}

size_t GameEvent_UnsportingBehaviorMinor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.UnsportingBehaviorMinor)
  size_t total_size = 0;

  if (has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }

  return total_size;
}
size_t GameEvent_UnsportingBehaviorMinor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMinor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());

    // required .Team by_team = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_UnsportingBehaviorMinor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.UnsportingBehaviorMinor)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_UnsportingBehaviorMinor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_UnsportingBehaviorMinor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.UnsportingBehaviorMinor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.UnsportingBehaviorMinor)
    MergeFrom(*source);
  }
}

void GameEvent_UnsportingBehaviorMinor::MergeFrom(const GameEvent_UnsportingBehaviorMinor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMinor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_UnsportingBehaviorMinor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.UnsportingBehaviorMinor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_UnsportingBehaviorMinor::CopyFrom(const GameEvent_UnsportingBehaviorMinor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMinor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_UnsportingBehaviorMinor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameEvent_UnsportingBehaviorMinor::Swap(GameEvent_UnsportingBehaviorMinor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_UnsportingBehaviorMinor::InternalSwap(GameEvent_UnsportingBehaviorMinor* other) {
  reason_.Swap(&other->reason_);
  std::swap(by_team_, other->by_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_UnsportingBehaviorMinor::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_UnsportingBehaviorMinor

// required .Team by_team = 1;
bool GameEvent_UnsportingBehaviorMinor::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_UnsportingBehaviorMinor::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_UnsportingBehaviorMinor::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_UnsportingBehaviorMinor::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_UnsportingBehaviorMinor::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.UnsportingBehaviorMinor.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_UnsportingBehaviorMinor::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.UnsportingBehaviorMinor.by_team)
}

// required string reason = 2;
bool GameEvent_UnsportingBehaviorMinor::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_UnsportingBehaviorMinor::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_UnsportingBehaviorMinor::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_UnsportingBehaviorMinor::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& GameEvent_UnsportingBehaviorMinor::reason() const {
  // @@protoc_insertion_point(field_get:GameEvent.UnsportingBehaviorMinor.reason)
  return reason_.GetNoArena();
}
void GameEvent_UnsportingBehaviorMinor::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameEvent.UnsportingBehaviorMinor.reason)
}
#if LANG_CXX11
void GameEvent_UnsportingBehaviorMinor::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameEvent.UnsportingBehaviorMinor.reason)
}
#endif
void GameEvent_UnsportingBehaviorMinor::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameEvent.UnsportingBehaviorMinor.reason)
}
void GameEvent_UnsportingBehaviorMinor::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameEvent.UnsportingBehaviorMinor.reason)
}
::std::string* GameEvent_UnsportingBehaviorMinor::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:GameEvent.UnsportingBehaviorMinor.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameEvent_UnsportingBehaviorMinor::release_reason() {
  // @@protoc_insertion_point(field_release:GameEvent.UnsportingBehaviorMinor.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameEvent_UnsportingBehaviorMinor::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.UnsportingBehaviorMinor.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_UnsportingBehaviorMajor::kByTeamFieldNumber;
const int GameEvent_UnsportingBehaviorMajor::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.UnsportingBehaviorMajor)
}
GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(const GameEvent_UnsportingBehaviorMajor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMajor)
}

void GameEvent_UnsportingBehaviorMajor::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_team_ = 0;
}

GameEvent_UnsportingBehaviorMajor::~GameEvent_UnsportingBehaviorMajor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMajor)
  SharedDtor();
}

void GameEvent_UnsportingBehaviorMajor::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameEvent_UnsportingBehaviorMajor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_UnsportingBehaviorMajor::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_UnsportingBehaviorMajor& GameEvent_UnsportingBehaviorMajor::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_UnsportingBehaviorMajor* GameEvent_UnsportingBehaviorMajor::New(::google::protobuf::Arena* arena) const {
  GameEvent_UnsportingBehaviorMajor* n = new GameEvent_UnsportingBehaviorMajor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_UnsportingBehaviorMajor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMajor)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_UnsportingBehaviorMajor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.UnsportingBehaviorMajor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameEvent.UnsportingBehaviorMajor.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.UnsportingBehaviorMajor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.UnsportingBehaviorMajor)
  return false;
#undef DO_
}

void GameEvent_UnsportingBehaviorMajor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.UnsportingBehaviorMajor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMajor.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.UnsportingBehaviorMajor)
}

::google::protobuf::uint8* GameEvent_UnsportingBehaviorMajor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMajor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMajor.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMajor)
  return target;
}

size_t GameEvent_UnsportingBehaviorMajor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.UnsportingBehaviorMajor)
  size_t total_size = 0;

  if (has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }

  return total_size;
}
size_t GameEvent_UnsportingBehaviorMajor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMajor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());

    // required .Team by_team = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_UnsportingBehaviorMajor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.UnsportingBehaviorMajor)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_UnsportingBehaviorMajor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_UnsportingBehaviorMajor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.UnsportingBehaviorMajor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.UnsportingBehaviorMajor)
    MergeFrom(*source);
  }
}

void GameEvent_UnsportingBehaviorMajor::MergeFrom(const GameEvent_UnsportingBehaviorMajor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMajor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_UnsportingBehaviorMajor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.UnsportingBehaviorMajor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_UnsportingBehaviorMajor::CopyFrom(const GameEvent_UnsportingBehaviorMajor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMajor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_UnsportingBehaviorMajor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameEvent_UnsportingBehaviorMajor::Swap(GameEvent_UnsportingBehaviorMajor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_UnsportingBehaviorMajor::InternalSwap(GameEvent_UnsportingBehaviorMajor* other) {
  reason_.Swap(&other->reason_);
  std::swap(by_team_, other->by_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_UnsportingBehaviorMajor::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_UnsportingBehaviorMajor

// required .Team by_team = 1;
bool GameEvent_UnsportingBehaviorMajor::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_UnsportingBehaviorMajor::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_UnsportingBehaviorMajor::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_UnsportingBehaviorMajor::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_UnsportingBehaviorMajor::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.UnsportingBehaviorMajor.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_UnsportingBehaviorMajor::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.UnsportingBehaviorMajor.by_team)
}

// required string reason = 2;
bool GameEvent_UnsportingBehaviorMajor::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_UnsportingBehaviorMajor::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_UnsportingBehaviorMajor::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_UnsportingBehaviorMajor::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& GameEvent_UnsportingBehaviorMajor::reason() const {
  // @@protoc_insertion_point(field_get:GameEvent.UnsportingBehaviorMajor.reason)
  return reason_.GetNoArena();
}
void GameEvent_UnsportingBehaviorMajor::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameEvent.UnsportingBehaviorMajor.reason)
}
#if LANG_CXX11
void GameEvent_UnsportingBehaviorMajor::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameEvent.UnsportingBehaviorMajor.reason)
}
#endif
void GameEvent_UnsportingBehaviorMajor::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameEvent.UnsportingBehaviorMajor.reason)
}
void GameEvent_UnsportingBehaviorMajor::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameEvent.UnsportingBehaviorMajor.reason)
}
::std::string* GameEvent_UnsportingBehaviorMajor::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:GameEvent.UnsportingBehaviorMajor.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameEvent_UnsportingBehaviorMajor::release_reason() {
  // @@protoc_insertion_point(field_release:GameEvent.UnsportingBehaviorMajor.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameEvent_UnsportingBehaviorMajor::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.UnsportingBehaviorMajor.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_KeeperHeldBall::kByTeamFieldNumber;
const int GameEvent_KeeperHeldBall::kLocationFieldNumber;
const int GameEvent_KeeperHeldBall::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.KeeperHeldBall)
}
GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(const GameEvent_KeeperHeldBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.KeeperHeldBall)
}

void GameEvent_KeeperHeldBall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&location_) + sizeof(duration_));
}

GameEvent_KeeperHeldBall::~GameEvent_KeeperHeldBall() {
  // @@protoc_insertion_point(destructor:GameEvent.KeeperHeldBall)
  SharedDtor();
}

void GameEvent_KeeperHeldBall::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GameEvent_KeeperHeldBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_KeeperHeldBall::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_KeeperHeldBall& GameEvent_KeeperHeldBall::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_KeeperHeldBall* GameEvent_KeeperHeldBall::New(::google::protobuf::Arena* arena) const {
  GameEvent_KeeperHeldBall* n = new GameEvent_KeeperHeldBall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_KeeperHeldBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KeeperHeldBall)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::Location::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_KeeperHeldBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.KeeperHeldBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.KeeperHeldBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.KeeperHeldBall)
  return false;
#undef DO_
}

void GameEvent_KeeperHeldBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.KeeperHeldBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional .Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.KeeperHeldBall)
}

::google::protobuf::uint8* GameEvent_KeeperHeldBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KeeperHeldBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional .Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KeeperHeldBall)
  return target;
}

size_t GameEvent_KeeperHeldBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.KeeperHeldBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 2;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional float duration = 3;
  if (has_duration()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_KeeperHeldBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.KeeperHeldBall)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_KeeperHeldBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_KeeperHeldBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.KeeperHeldBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.KeeperHeldBall)
    MergeFrom(*source);
  }
}

void GameEvent_KeeperHeldBall::MergeFrom(const GameEvent_KeeperHeldBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KeeperHeldBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_KeeperHeldBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.KeeperHeldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_KeeperHeldBall::CopyFrom(const GameEvent_KeeperHeldBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KeeperHeldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_KeeperHeldBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KeeperHeldBall::Swap(GameEvent_KeeperHeldBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_KeeperHeldBall::InternalSwap(GameEvent_KeeperHeldBall* other) {
  std::swap(location_, other->location_);
  std::swap(by_team_, other->by_team_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_KeeperHeldBall::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_KeeperHeldBall

// required .Team by_team = 1;
bool GameEvent_KeeperHeldBall::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_KeeperHeldBall::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_KeeperHeldBall::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_KeeperHeldBall::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_KeeperHeldBall::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.KeeperHeldBall.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_KeeperHeldBall::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.KeeperHeldBall.by_team)
}

// optional .Location location = 2;
bool GameEvent_KeeperHeldBall::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_KeeperHeldBall::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_KeeperHeldBall::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_KeeperHeldBall::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& GameEvent_KeeperHeldBall::location() const {
  // @@protoc_insertion_point(field_get:GameEvent.KeeperHeldBall.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* GameEvent_KeeperHeldBall::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.KeeperHeldBall.location)
  return location_;
}
::Location* GameEvent_KeeperHeldBall::release_location() {
  // @@protoc_insertion_point(field_release:GameEvent.KeeperHeldBall.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GameEvent_KeeperHeldBall::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.KeeperHeldBall.location)
}

// optional float duration = 3;
bool GameEvent_KeeperHeldBall::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_KeeperHeldBall::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_KeeperHeldBall::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_KeeperHeldBall::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float GameEvent_KeeperHeldBall::duration() const {
  // @@protoc_insertion_point(field_get:GameEvent.KeeperHeldBall.duration)
  return duration_;
}
void GameEvent_KeeperHeldBall::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.KeeperHeldBall.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_PlacementSucceeded::kByTeamFieldNumber;
const int GameEvent_PlacementSucceeded::kTimeTakenFieldNumber;
const int GameEvent_PlacementSucceeded::kPrecisionFieldNumber;
const int GameEvent_PlacementSucceeded::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.PlacementSucceeded)
}
GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(const GameEvent_PlacementSucceeded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&by_team_, &from.by_team_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.PlacementSucceeded)
}

void GameEvent_PlacementSucceeded::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&by_team_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
}

GameEvent_PlacementSucceeded::~GameEvent_PlacementSucceeded() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementSucceeded)
  SharedDtor();
}

void GameEvent_PlacementSucceeded::SharedDtor() {
}

void GameEvent_PlacementSucceeded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_PlacementSucceeded::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_PlacementSucceeded& GameEvent_PlacementSucceeded::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_PlacementSucceeded* GameEvent_PlacementSucceeded::New(::google::protobuf::Arena* arena) const {
  GameEvent_PlacementSucceeded* n = new GameEvent_PlacementSucceeded;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_PlacementSucceeded::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementSucceeded)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&by_team_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&by_team_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_PlacementSucceeded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.PlacementSucceeded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time_taken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_time_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float precision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.PlacementSucceeded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.PlacementSucceeded)
  return false;
#undef DO_
}

void GameEvent_PlacementSucceeded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.PlacementSucceeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional float time_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_taken(), output);
  }

  // optional float precision = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->precision(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.PlacementSucceeded)
}

::google::protobuf::uint8* GameEvent_PlacementSucceeded::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementSucceeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional float time_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_taken(), target);
  }

  // optional float precision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->precision(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementSucceeded)
  return target;
}

size_t GameEvent_PlacementSucceeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementSucceeded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional float time_taken = 2;
    if (has_time_taken()) {
      total_size += 1 + 4;
    }

    // optional float precision = 3;
    if (has_precision()) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_PlacementSucceeded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.PlacementSucceeded)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_PlacementSucceeded* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_PlacementSucceeded>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.PlacementSucceeded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.PlacementSucceeded)
    MergeFrom(*source);
  }
}

void GameEvent_PlacementSucceeded::MergeFrom(const GameEvent_PlacementSucceeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementSucceeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_taken_ = from.time_taken_;
    }
    if (cached_has_bits & 0x00000004u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_PlacementSucceeded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.PlacementSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_PlacementSucceeded::CopyFrom(const GameEvent_PlacementSucceeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PlacementSucceeded::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_PlacementSucceeded::Swap(GameEvent_PlacementSucceeded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_PlacementSucceeded::InternalSwap(GameEvent_PlacementSucceeded* other) {
  std::swap(by_team_, other->by_team_);
  std::swap(time_taken_, other->time_taken_);
  std::swap(precision_, other->precision_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_PlacementSucceeded::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_PlacementSucceeded

// required .Team by_team = 1;
bool GameEvent_PlacementSucceeded::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_PlacementSucceeded::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_PlacementSucceeded::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_PlacementSucceeded::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_PlacementSucceeded::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementSucceeded.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_PlacementSucceeded::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementSucceeded.by_team)
}

// optional float time_taken = 2;
bool GameEvent_PlacementSucceeded::has_time_taken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEvent_PlacementSucceeded::set_has_time_taken() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEvent_PlacementSucceeded::clear_has_time_taken() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_PlacementSucceeded::clear_time_taken() {
  time_taken_ = 0;
  clear_has_time_taken();
}
float GameEvent_PlacementSucceeded::time_taken() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementSucceeded.time_taken)
  return time_taken_;
}
void GameEvent_PlacementSucceeded::set_time_taken(float value) {
  set_has_time_taken();
  time_taken_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementSucceeded.time_taken)
}

// optional float precision = 3;
bool GameEvent_PlacementSucceeded::has_precision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEvent_PlacementSucceeded::set_has_precision() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEvent_PlacementSucceeded::clear_has_precision() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEvent_PlacementSucceeded::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
float GameEvent_PlacementSucceeded::precision() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementSucceeded.precision)
  return precision_;
}
void GameEvent_PlacementSucceeded::set_precision(float value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementSucceeded.precision)
}

// optional float distance = 4;
bool GameEvent_PlacementSucceeded::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEvent_PlacementSucceeded::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEvent_PlacementSucceeded::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEvent_PlacementSucceeded::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float GameEvent_PlacementSucceeded::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementSucceeded.distance)
  return distance_;
}
void GameEvent_PlacementSucceeded::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementSucceeded.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_Prepared::kTimeTakenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_Prepared::GameEvent_Prepared()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.Prepared)
}
GameEvent_Prepared::GameEvent_Prepared(const GameEvent_Prepared& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_taken_ = from.time_taken_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.Prepared)
}

void GameEvent_Prepared::SharedCtor() {
  _cached_size_ = 0;
  time_taken_ = 0;
}

GameEvent_Prepared::~GameEvent_Prepared() {
  // @@protoc_insertion_point(destructor:GameEvent.Prepared)
  SharedDtor();
}

void GameEvent_Prepared::SharedDtor() {
}

void GameEvent_Prepared::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_Prepared::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_Prepared& GameEvent_Prepared::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_Prepared* GameEvent_Prepared::New(::google::protobuf::Arena* arena) const {
  GameEvent_Prepared* n = new GameEvent_Prepared;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_Prepared::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Prepared)
  time_taken_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_Prepared::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.Prepared)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time_taken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_time_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.Prepared)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.Prepared)
  return false;
#undef DO_
}

void GameEvent_Prepared::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.Prepared)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_taken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_taken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.Prepared)
}

::google::protobuf::uint8* GameEvent_Prepared::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Prepared)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_taken = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time_taken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Prepared)
  return target;
}

size_t GameEvent_Prepared::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.Prepared)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float time_taken = 1;
  if (has_time_taken()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_Prepared::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.Prepared)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_Prepared* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_Prepared>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.Prepared)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.Prepared)
    MergeFrom(*source);
  }
}

void GameEvent_Prepared::MergeFrom(const GameEvent_Prepared& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Prepared)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_taken()) {
    set_time_taken(from.time_taken());
  }
}

void GameEvent_Prepared::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.Prepared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_Prepared::CopyFrom(const GameEvent_Prepared& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Prepared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_Prepared::IsInitialized() const {
  return true;
}

void GameEvent_Prepared::Swap(GameEvent_Prepared* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_Prepared::InternalSwap(GameEvent_Prepared* other) {
  std::swap(time_taken_, other->time_taken_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_Prepared::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_Prepared

// optional float time_taken = 1;
bool GameEvent_Prepared::has_time_taken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_Prepared::set_has_time_taken() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_Prepared::clear_has_time_taken() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_Prepared::clear_time_taken() {
  time_taken_ = 0;
  clear_has_time_taken();
}
float GameEvent_Prepared::time_taken() const {
  // @@protoc_insertion_point(field_get:GameEvent.Prepared.time_taken)
  return time_taken_;
}
void GameEvent_Prepared::set_time_taken(float value) {
  set_has_time_taken();
  time_taken_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.Prepared.time_taken)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotSubstitution::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotSubstitution::GameEvent_BotSubstitution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotSubstitution)
}
GameEvent_BotSubstitution::GameEvent_BotSubstitution(const GameEvent_BotSubstitution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotSubstitution)
}

void GameEvent_BotSubstitution::SharedCtor() {
  _cached_size_ = 0;
  by_team_ = 0;
}

GameEvent_BotSubstitution::~GameEvent_BotSubstitution() {
  // @@protoc_insertion_point(destructor:GameEvent.BotSubstitution)
  SharedDtor();
}

void GameEvent_BotSubstitution::SharedDtor() {
}

void GameEvent_BotSubstitution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_BotSubstitution::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotSubstitution& GameEvent_BotSubstitution::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_BotSubstitution* GameEvent_BotSubstitution::New(::google::protobuf::Arena* arena) const {
  GameEvent_BotSubstitution* n = new GameEvent_BotSubstitution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_BotSubstitution::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotSubstitution)
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotSubstitution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotSubstitution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotSubstitution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotSubstitution)
  return false;
#undef DO_
}

void GameEvent_BotSubstitution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotSubstitution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotSubstitution)
}

::google::protobuf::uint8* GameEvent_BotSubstitution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotSubstitution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotSubstitution)
  return target;
}

size_t GameEvent_BotSubstitution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotSubstitution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_BotSubstitution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotSubstitution)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotSubstitution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotSubstitution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotSubstitution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotSubstitution)
    MergeFrom(*source);
  }
}

void GameEvent_BotSubstitution::MergeFrom(const GameEvent_BotSubstitution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotSubstitution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_BotSubstitution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotSubstitution::CopyFrom(const GameEvent_BotSubstitution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotSubstitution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_BotSubstitution::Swap(GameEvent_BotSubstitution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotSubstitution::InternalSwap(GameEvent_BotSubstitution* other) {
  std::swap(by_team_, other->by_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_BotSubstitution::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_BotSubstitution

// required .Team by_team = 1;
bool GameEvent_BotSubstitution::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_BotSubstitution::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_BotSubstitution::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotSubstitution::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_BotSubstitution::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotSubstitution.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_BotSubstitution::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.BotSubstitution.by_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_TooManyRobots::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_TooManyRobots::GameEvent_TooManyRobots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.TooManyRobots)
}
GameEvent_TooManyRobots::GameEvent_TooManyRobots(const GameEvent_TooManyRobots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.TooManyRobots)
}

void GameEvent_TooManyRobots::SharedCtor() {
  _cached_size_ = 0;
  by_team_ = 0;
}

GameEvent_TooManyRobots::~GameEvent_TooManyRobots() {
  // @@protoc_insertion_point(destructor:GameEvent.TooManyRobots)
  SharedDtor();
}

void GameEvent_TooManyRobots::SharedDtor() {
}

void GameEvent_TooManyRobots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_TooManyRobots::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_TooManyRobots& GameEvent_TooManyRobots::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent_TooManyRobots* GameEvent_TooManyRobots::New(::google::protobuf::Arena* arena) const {
  GameEvent_TooManyRobots* n = new GameEvent_TooManyRobots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent_TooManyRobots::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.TooManyRobots)
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_TooManyRobots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.TooManyRobots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.TooManyRobots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.TooManyRobots)
  return false;
#undef DO_
}

void GameEvent_TooManyRobots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.TooManyRobots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.TooManyRobots)
}

::google::protobuf::uint8* GameEvent_TooManyRobots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.TooManyRobots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.TooManyRobots)
  return target;
}

size_t GameEvent_TooManyRobots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.TooManyRobots)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_TooManyRobots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.TooManyRobots)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_TooManyRobots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_TooManyRobots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.TooManyRobots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.TooManyRobots)
    MergeFrom(*source);
  }
}

void GameEvent_TooManyRobots::MergeFrom(const GameEvent_TooManyRobots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.TooManyRobots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_TooManyRobots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.TooManyRobots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_TooManyRobots::CopyFrom(const GameEvent_TooManyRobots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.TooManyRobots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_TooManyRobots::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_TooManyRobots::Swap(GameEvent_TooManyRobots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_TooManyRobots::InternalSwap(GameEvent_TooManyRobots* other) {
  std::swap(by_team_, other->by_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent_TooManyRobots::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent_TooManyRobots

// required .Team by_team = 1;
bool GameEvent_TooManyRobots::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent_TooManyRobots::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent_TooManyRobots::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_TooManyRobots::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
::Team GameEvent_TooManyRobots::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.TooManyRobots.by_team)
  return static_cast< ::Team >(by_team_);
}
void GameEvent_TooManyRobots::set_by_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.TooManyRobots.by_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent::kTypeFieldNumber;
const int GameEvent::kOriginFieldNumber;
const int GameEvent::kPreparedFieldNumber;
const int GameEvent::kNoProgressInGameFieldNumber;
const int GameEvent::kPlacementFailedFieldNumber;
const int GameEvent::kPlacementSucceededFieldNumber;
const int GameEvent::kBotSubstitutionFieldNumber;
const int GameEvent::kTooManyRobotsFieldNumber;
const int GameEvent::kBallLeftFieldTouchLineFieldNumber;
const int GameEvent::kBallLeftFieldGoalLineFieldNumber;
const int GameEvent::kPossibleGoalFieldNumber;
const int GameEvent::kGoalFieldNumber;
const int GameEvent::kIndirectGoalFieldNumber;
const int GameEvent::kChippedGoalFieldNumber;
const int GameEvent::kAimlessKickFieldNumber;
const int GameEvent::kKickTimeoutFieldNumber;
const int GameEvent::kKeeperHeldBallFieldNumber;
const int GameEvent::kAttackerDoubleTouchedBallFieldNumber;
const int GameEvent::kAttackerTouchedBallInDefenseAreaFieldNumber;
const int GameEvent::kAttackerTouchedOpponentInDefenseAreaFieldNumber;
const int GameEvent::kAttackerTouchedOpponentInDefenseAreaSkippedFieldNumber;
const int GameEvent::kBotDribbledBallTooFarFieldNumber;
const int GameEvent::kBotKickedBallTooFastFieldNumber;
const int GameEvent::kAttackerTooCloseToDefenseAreaFieldNumber;
const int GameEvent::kBotInterferedPlacementFieldNumber;
const int GameEvent::kBotCrashDrawnFieldNumber;
const int GameEvent::kBotCrashUniqueFieldNumber;
const int GameEvent::kBotCrashUniqueSkippedFieldNumber;
const int GameEvent::kBotPushedBotFieldNumber;
const int GameEvent::kBotPushedBotSkippedFieldNumber;
const int GameEvent::kBotHeldBallDeliberatelyFieldNumber;
const int GameEvent::kBotTippedOverFieldNumber;
const int GameEvent::kBotTooFastInStopFieldNumber;
const int GameEvent::kDefenderTooCloseToKickPointFieldNumber;
const int GameEvent::kDefenderInDefenseAreaPartiallyFieldNumber;
const int GameEvent::kDefenderInDefenseAreaFieldNumber;
const int GameEvent::kMultipleCardsFieldNumber;
const int GameEvent::kMultiplePlacementFailuresFieldNumber;
const int GameEvent::kMultipleFoulsFieldNumber;
const int GameEvent::kUnsportingBehaviorMinorFieldNumber;
const int GameEvent::kUnsportingBehaviorMajorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent::GameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent)
}
GameEvent::GameEvent(const GameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      origin_(from.origin_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_event();
  switch (from.event_case()) {
    case kPrepared: {
      mutable_prepared()->::GameEvent_Prepared::MergeFrom(from.prepared());
      break;
    }
    case kNoProgressInGame: {
      mutable_no_progress_in_game()->::GameEvent_NoProgressInGame::MergeFrom(from.no_progress_in_game());
      break;
    }
    case kPlacementFailed: {
      mutable_placement_failed()->::GameEvent_PlacementFailed::MergeFrom(from.placement_failed());
      break;
    }
    case kPlacementSucceeded: {
      mutable_placement_succeeded()->::GameEvent_PlacementSucceeded::MergeFrom(from.placement_succeeded());
      break;
    }
    case kBotSubstitution: {
      mutable_bot_substitution()->::GameEvent_BotSubstitution::MergeFrom(from.bot_substitution());
      break;
    }
    case kTooManyRobots: {
      mutable_too_many_robots()->::GameEvent_TooManyRobots::MergeFrom(from.too_many_robots());
      break;
    }
    case kBallLeftFieldTouchLine: {
      mutable_ball_left_field_touch_line()->::GameEvent_BallLeftField::MergeFrom(from.ball_left_field_touch_line());
      break;
    }
    case kBallLeftFieldGoalLine: {
      mutable_ball_left_field_goal_line()->::GameEvent_BallLeftField::MergeFrom(from.ball_left_field_goal_line());
      break;
    }
    case kPossibleGoal: {
      mutable_possible_goal()->::GameEvent_Goal::MergeFrom(from.possible_goal());
      break;
    }
    case kGoal: {
      mutable_goal()->::GameEvent_Goal::MergeFrom(from.goal());
      break;
    }
    case kIndirectGoal: {
      mutable_indirect_goal()->::GameEvent_IndirectGoal::MergeFrom(from.indirect_goal());
      break;
    }
    case kChippedGoal: {
      mutable_chipped_goal()->::GameEvent_ChippedGoal::MergeFrom(from.chipped_goal());
      break;
    }
    case kAimlessKick: {
      mutable_aimless_kick()->::GameEvent_AimlessKick::MergeFrom(from.aimless_kick());
      break;
    }
    case kKickTimeout: {
      mutable_kick_timeout()->::GameEvent_KickTimeout::MergeFrom(from.kick_timeout());
      break;
    }
    case kKeeperHeldBall: {
      mutable_keeper_held_ball()->::GameEvent_KeeperHeldBall::MergeFrom(from.keeper_held_ball());
      break;
    }
    case kAttackerDoubleTouchedBall: {
      mutable_attacker_double_touched_ball()->::GameEvent_AttackerDoubleTouchedBall::MergeFrom(from.attacker_double_touched_ball());
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      mutable_attacker_touched_ball_in_defense_area()->::GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(from.attacker_touched_ball_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      mutable_attacker_touched_opponent_in_defense_area_skipped()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area_skipped());
      break;
    }
    case kBotDribbledBallTooFar: {
      mutable_bot_dribbled_ball_too_far()->::GameEvent_BotDribbledBallTooFar::MergeFrom(from.bot_dribbled_ball_too_far());
      break;
    }
    case kBotKickedBallTooFast: {
      mutable_bot_kicked_ball_too_fast()->::GameEvent_BotKickedBallTooFast::MergeFrom(from.bot_kicked_ball_too_fast());
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      mutable_attacker_too_close_to_defense_area()->::GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(from.attacker_too_close_to_defense_area());
      break;
    }
    case kBotInterferedPlacement: {
      mutable_bot_interfered_placement()->::GameEvent_BotInterferedPlacement::MergeFrom(from.bot_interfered_placement());
      break;
    }
    case kBotCrashDrawn: {
      mutable_bot_crash_drawn()->::GameEvent_BotCrashDrawn::MergeFrom(from.bot_crash_drawn());
      break;
    }
    case kBotCrashUnique: {
      mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique());
      break;
    }
    case kBotCrashUniqueSkipped: {
      mutable_bot_crash_unique_skipped()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique_skipped());
      break;
    }
    case kBotPushedBot: {
      mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot());
      break;
    }
    case kBotPushedBotSkipped: {
      mutable_bot_pushed_bot_skipped()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot_skipped());
      break;
    }
    case kBotHeldBallDeliberately: {
      mutable_bot_held_ball_deliberately()->::GameEvent_BotHeldBallDeliberately::MergeFrom(from.bot_held_ball_deliberately());
      break;
    }
    case kBotTippedOver: {
      mutable_bot_tipped_over()->::GameEvent_BotTippedOver::MergeFrom(from.bot_tipped_over());
      break;
    }
    case kBotTooFastInStop: {
      mutable_bot_too_fast_in_stop()->::GameEvent_BotTooFastInStop::MergeFrom(from.bot_too_fast_in_stop());
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      mutable_defender_too_close_to_kick_point()->::GameEvent_DefenderTooCloseToKickPoint::MergeFrom(from.defender_too_close_to_kick_point());
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      mutable_defender_in_defense_area_partially()->::GameEvent_DefenderInDefenseAreaPartially::MergeFrom(from.defender_in_defense_area_partially());
      break;
    }
    case kDefenderInDefenseArea: {
      mutable_defender_in_defense_area()->::GameEvent_DefenderInDefenseArea::MergeFrom(from.defender_in_defense_area());
      break;
    }
    case kMultipleCards: {
      mutable_multiple_cards()->::GameEvent_MultipleCards::MergeFrom(from.multiple_cards());
      break;
    }
    case kMultiplePlacementFailures: {
      mutable_multiple_placement_failures()->::GameEvent_MultiplePlacementFailures::MergeFrom(from.multiple_placement_failures());
      break;
    }
    case kMultipleFouls: {
      mutable_multiple_fouls()->::GameEvent_MultipleFouls::MergeFrom(from.multiple_fouls());
      break;
    }
    case kUnsportingBehaviorMinor: {
      mutable_unsporting_behavior_minor()->::GameEvent_UnsportingBehaviorMinor::MergeFrom(from.unsporting_behavior_minor());
      break;
    }
    case kUnsportingBehaviorMajor: {
      mutable_unsporting_behavior_major()->::GameEvent_UnsportingBehaviorMajor::MergeFrom(from.unsporting_behavior_major());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameEvent)
}

void GameEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  clear_has_event();
}

GameEvent::~GameEvent() {
  // @@protoc_insertion_point(destructor:GameEvent)
  SharedDtor();
}

void GameEvent::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void GameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent::descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent& GameEvent::default_instance() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEvent* GameEvent::New(::google::protobuf::Arena* arena) const {
  GameEvent* n = new GameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:GameEvent)
  switch (event_case()) {
    case kPrepared: {
      delete event_.prepared_;
      break;
    }
    case kNoProgressInGame: {
      delete event_.no_progress_in_game_;
      break;
    }
    case kPlacementFailed: {
      delete event_.placement_failed_;
      break;
    }
    case kPlacementSucceeded: {
      delete event_.placement_succeeded_;
      break;
    }
    case kBotSubstitution: {
      delete event_.bot_substitution_;
      break;
    }
    case kTooManyRobots: {
      delete event_.too_many_robots_;
      break;
    }
    case kBallLeftFieldTouchLine: {
      delete event_.ball_left_field_touch_line_;
      break;
    }
    case kBallLeftFieldGoalLine: {
      delete event_.ball_left_field_goal_line_;
      break;
    }
    case kPossibleGoal: {
      delete event_.possible_goal_;
      break;
    }
    case kGoal: {
      delete event_.goal_;
      break;
    }
    case kIndirectGoal: {
      delete event_.indirect_goal_;
      break;
    }
    case kChippedGoal: {
      delete event_.chipped_goal_;
      break;
    }
    case kAimlessKick: {
      delete event_.aimless_kick_;
      break;
    }
    case kKickTimeout: {
      delete event_.kick_timeout_;
      break;
    }
    case kKeeperHeldBall: {
      delete event_.keeper_held_ball_;
      break;
    }
    case kAttackerDoubleTouchedBall: {
      delete event_.attacker_double_touched_ball_;
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      delete event_.attacker_touched_ball_in_defense_area_;
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      delete event_.attacker_touched_opponent_in_defense_area_;
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      delete event_.attacker_touched_opponent_in_defense_area_skipped_;
      break;
    }
    case kBotDribbledBallTooFar: {
      delete event_.bot_dribbled_ball_too_far_;
      break;
    }
    case kBotKickedBallTooFast: {
      delete event_.bot_kicked_ball_too_fast_;
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      delete event_.attacker_too_close_to_defense_area_;
      break;
    }
    case kBotInterferedPlacement: {
      delete event_.bot_interfered_placement_;
      break;
    }
    case kBotCrashDrawn: {
      delete event_.bot_crash_drawn_;
      break;
    }
    case kBotCrashUnique: {
      delete event_.bot_crash_unique_;
      break;
    }
    case kBotCrashUniqueSkipped: {
      delete event_.bot_crash_unique_skipped_;
      break;
    }
    case kBotPushedBot: {
      delete event_.bot_pushed_bot_;
      break;
    }
    case kBotPushedBotSkipped: {
      delete event_.bot_pushed_bot_skipped_;
      break;
    }
    case kBotHeldBallDeliberately: {
      delete event_.bot_held_ball_deliberately_;
      break;
    }
    case kBotTippedOver: {
      delete event_.bot_tipped_over_;
      break;
    }
    case kBotTooFastInStop: {
      delete event_.bot_too_fast_in_stop_;
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      delete event_.defender_too_close_to_kick_point_;
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      delete event_.defender_in_defense_area_partially_;
      break;
    }
    case kDefenderInDefenseArea: {
      delete event_.defender_in_defense_area_;
      break;
    }
    case kMultipleCards: {
      delete event_.multiple_cards_;
      break;
    }
    case kMultiplePlacementFailures: {
      delete event_.multiple_placement_failures_;
      break;
    }
    case kMultipleFouls: {
      delete event_.multiple_fouls_;
      break;
    }
    case kUnsportingBehaviorMinor: {
      delete event_.unsporting_behavior_minor_;
      break;
    }
    case kUnsportingBehaviorMajor: {
      delete event_.unsporting_behavior_major_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent)
  origin_.Clear();
  type_ = 0;
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameEvent.Prepared prepared = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prepared()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.NoProgressInGame no_progress_in_game = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_no_progress_in_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.PlacementFailed placement_failed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement_failed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.PlacementSucceeded placement_succeeded = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement_succeeded()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BallLeftField ball_left_field_touch_line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball_left_field_touch_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BallLeftField ball_left_field_goal_line = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball_left_field_goal_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.Goal goal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.IndirectGoal indirect_goal = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indirect_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.ChippedGoal chipped_goal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chipped_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AimlessKick aimless_kick = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aimless_kick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.KickTimeout kick_timeout = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kick_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.KeeperHeldBall keeper_held_ball = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keeper_held_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker_double_touched_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker_touched_ball_in_defense_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker_touched_opponent_in_defense_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_dribbled_ball_too_far()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_kicked_ball_too_fast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker_too_close_to_defense_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_interfered_placement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_crash_drawn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotCrashUnique bot_crash_unique = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_crash_unique()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_crash_unique_skipped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotPushedBot bot_pushed_bot = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_pushed_bot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_pushed_bot_skipped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_held_ball_deliberately()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotTippedOver bot_tipped_over = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_tipped_over()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_too_fast_in_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender_too_close_to_kick_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender_in_defense_area_partially()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender_in_defense_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.MultipleCards multiple_cards = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiple_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiple_placement_failures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.MultipleFouls multiple_fouls = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiple_fouls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unsporting_behavior_minor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unsporting_behavior_major()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotSubstitution bot_substitution = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_substitution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.TooManyRobots too_many_robots = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_too_many_robots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.Goal possible_goal = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_possible_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GameEventType type = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameEventType_IsValid(value)) {
            set_type(static_cast< ::GameEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string origin = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_origin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origin(this->origin_size() - 1).data(),
            this->origin(this->origin_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameEvent.origin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker_touched_opponent_in_defense_area_skipped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent)
  return false;
#undef DO_
}

void GameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kPrepared:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *event_.prepared_, output);
      break;
    case kNoProgressInGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *event_.no_progress_in_game_, output);
      break;
    case kPlacementFailed:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *event_.placement_failed_, output);
      break;
    case kPlacementSucceeded:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *event_.placement_succeeded_, output);
      break;
    case kBallLeftFieldTouchLine:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *event_.ball_left_field_touch_line_, output);
      break;
    case kBallLeftFieldGoalLine:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *event_.ball_left_field_goal_line_, output);
      break;
    case kGoal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *event_.goal_, output);
      break;
    case kIndirectGoal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *event_.indirect_goal_, output);
      break;
    case kChippedGoal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *event_.chipped_goal_, output);
      break;
    case kAimlessKick:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *event_.aimless_kick_, output);
      break;
    case kKickTimeout:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *event_.kick_timeout_, output);
      break;
    case kKeeperHeldBall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *event_.keeper_held_ball_, output);
      break;
    case kAttackerDoubleTouchedBall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, *event_.attacker_double_touched_ball_, output);
      break;
    case kAttackerTouchedBallInDefenseArea:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, *event_.attacker_touched_ball_in_defense_area_, output);
      break;
    case kAttackerTouchedOpponentInDefenseArea:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, *event_.attacker_touched_opponent_in_defense_area_, output);
      break;
    case kBotDribbledBallTooFar:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, *event_.bot_dribbled_ball_too_far_, output);
      break;
    case kBotKickedBallTooFast:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, *event_.bot_kicked_ball_too_fast_, output);
      break;
    case kAttackerTooCloseToDefenseArea:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, *event_.attacker_too_close_to_defense_area_, output);
      break;
    case kBotInterferedPlacement:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, *event_.bot_interfered_placement_, output);
      break;
    case kBotCrashDrawn:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, *event_.bot_crash_drawn_, output);
      break;
    case kBotCrashUnique:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, *event_.bot_crash_unique_, output);
      break;
    case kBotCrashUniqueSkipped:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, *event_.bot_crash_unique_skipped_, output);
      break;
    case kBotPushedBot:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, *event_.bot_pushed_bot_, output);
      break;
    case kBotPushedBotSkipped:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, *event_.bot_pushed_bot_skipped_, output);
      break;
    case kBotHeldBallDeliberately:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        26, *event_.bot_held_ball_deliberately_, output);
      break;
    case kBotTippedOver:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        27, *event_.bot_tipped_over_, output);
      break;
    case kBotTooFastInStop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        28, *event_.bot_too_fast_in_stop_, output);
      break;
    case kDefenderTooCloseToKickPoint:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        29, *event_.defender_too_close_to_kick_point_, output);
      break;
    case kDefenderInDefenseAreaPartially:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        30, *event_.defender_in_defense_area_partially_, output);
      break;
    case kDefenderInDefenseArea:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        31, *event_.defender_in_defense_area_, output);
      break;
    case kMultipleCards:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        32, *event_.multiple_cards_, output);
      break;
    case kMultiplePlacementFailures:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        33, *event_.multiple_placement_failures_, output);
      break;
    case kMultipleFouls:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        34, *event_.multiple_fouls_, output);
      break;
    case kUnsportingBehaviorMinor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        35, *event_.unsporting_behavior_minor_, output);
      break;
    case kUnsportingBehaviorMajor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        36, *event_.unsporting_behavior_major_, output);
      break;
    case kBotSubstitution:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        37, *event_.bot_substitution_, output);
      break;
    case kTooManyRobots:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        38, *event_.too_many_robots_, output);
      break;
    case kPossibleGoal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        39, *event_.possible_goal_, output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required .GameEventType type = 40;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->type(), output);
  }

  // repeated string origin = 41;
  for (int i = 0, n = this->origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin(i).data(), this->origin(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.origin");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->origin(i), output);
  }

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
  if (has_attacker_touched_opponent_in_defense_area_skipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *event_.attacker_touched_opponent_in_defense_area_skipped_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent)
}

::google::protobuf::uint8* GameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kPrepared:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *event_.prepared_, deterministic, target);
      break;
    case kNoProgressInGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *event_.no_progress_in_game_, deterministic, target);
      break;
    case kPlacementFailed:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *event_.placement_failed_, deterministic, target);
      break;
    case kPlacementSucceeded:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *event_.placement_succeeded_, deterministic, target);
      break;
    case kBallLeftFieldTouchLine:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *event_.ball_left_field_touch_line_, deterministic, target);
      break;
    case kBallLeftFieldGoalLine:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *event_.ball_left_field_goal_line_, deterministic, target);
      break;
    case kGoal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *event_.goal_, deterministic, target);
      break;
    case kIndirectGoal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *event_.indirect_goal_, deterministic, target);
      break;
    case kChippedGoal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *event_.chipped_goal_, deterministic, target);
      break;
    case kAimlessKick:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *event_.aimless_kick_, deterministic, target);
      break;
    case kKickTimeout:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *event_.kick_timeout_, deterministic, target);
      break;
    case kKeeperHeldBall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *event_.keeper_held_ball_, deterministic, target);
      break;
    case kAttackerDoubleTouchedBall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          14, *event_.attacker_double_touched_ball_, deterministic, target);
      break;
    case kAttackerTouchedBallInDefenseArea:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          15, *event_.attacker_touched_ball_in_defense_area_, deterministic, target);
      break;
    case kAttackerTouchedOpponentInDefenseArea:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          16, *event_.attacker_touched_opponent_in_defense_area_, deterministic, target);
      break;
    case kBotDribbledBallTooFar:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          17, *event_.bot_dribbled_ball_too_far_, deterministic, target);
      break;
    case kBotKickedBallTooFast:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          18, *event_.bot_kicked_ball_too_fast_, deterministic, target);
      break;
    case kAttackerTooCloseToDefenseArea:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          19, *event_.attacker_too_close_to_defense_area_, deterministic, target);
      break;
    case kBotInterferedPlacement:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          20, *event_.bot_interfered_placement_, deterministic, target);
      break;
    case kBotCrashDrawn:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          21, *event_.bot_crash_drawn_, deterministic, target);
      break;
    case kBotCrashUnique:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          22, *event_.bot_crash_unique_, deterministic, target);
      break;
    case kBotCrashUniqueSkipped:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          23, *event_.bot_crash_unique_skipped_, deterministic, target);
      break;
    case kBotPushedBot:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          24, *event_.bot_pushed_bot_, deterministic, target);
      break;
    case kBotPushedBotSkipped:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          25, *event_.bot_pushed_bot_skipped_, deterministic, target);
      break;
    case kBotHeldBallDeliberately:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          26, *event_.bot_held_ball_deliberately_, deterministic, target);
      break;
    case kBotTippedOver:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          27, *event_.bot_tipped_over_, deterministic, target);
      break;
    case kBotTooFastInStop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          28, *event_.bot_too_fast_in_stop_, deterministic, target);
      break;
    case kDefenderTooCloseToKickPoint:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          29, *event_.defender_too_close_to_kick_point_, deterministic, target);
      break;
    case kDefenderInDefenseAreaPartially:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          30, *event_.defender_in_defense_area_partially_, deterministic, target);
      break;
    case kDefenderInDefenseArea:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          31, *event_.defender_in_defense_area_, deterministic, target);
      break;
    case kMultipleCards:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          32, *event_.multiple_cards_, deterministic, target);
      break;
    case kMultiplePlacementFailures:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          33, *event_.multiple_placement_failures_, deterministic, target);
      break;
    case kMultipleFouls:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          34, *event_.multiple_fouls_, deterministic, target);
      break;
    case kUnsportingBehaviorMinor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          35, *event_.unsporting_behavior_minor_, deterministic, target);
      break;
    case kUnsportingBehaviorMajor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          36, *event_.unsporting_behavior_major_, deterministic, target);
      break;
    case kBotSubstitution:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          37, *event_.bot_substitution_, deterministic, target);
      break;
    case kTooManyRobots:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          38, *event_.too_many_robots_, deterministic, target);
      break;
    case kPossibleGoal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          39, *event_.possible_goal_, deterministic, target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required .GameEventType type = 40;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->type(), target);
  }

  // repeated string origin = 41;
  for (int i = 0, n = this->origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin(i).data(), this->origin(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.origin");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(41, this->origin(i), target);
  }

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
  if (has_attacker_touched_opponent_in_defense_area_skipped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *event_.attacker_touched_opponent_in_defense_area_skipped_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent)
  return target;
}

size_t GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .GameEventType type = 40;
  if (has_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated string origin = 41;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->origin_size());
  for (int i = 0, n = this->origin_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->origin(i));
  }

  switch (event_case()) {
    // optional .GameEvent.Prepared prepared = 1;
    case kPrepared: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.prepared_);
      break;
    }
    // optional .GameEvent.NoProgressInGame no_progress_in_game = 2;
    case kNoProgressInGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.no_progress_in_game_);
      break;
    }
    // optional .GameEvent.PlacementFailed placement_failed = 3;
    case kPlacementFailed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.placement_failed_);
      break;
    }
    // optional .GameEvent.PlacementSucceeded placement_succeeded = 5;
    case kPlacementSucceeded: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.placement_succeeded_);
      break;
    }
    // optional .GameEvent.BotSubstitution bot_substitution = 37;
    case kBotSubstitution: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_substitution_);
      break;
    }
    // optional .GameEvent.TooManyRobots too_many_robots = 38;
    case kTooManyRobots: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.too_many_robots_);
      break;
    }
    // optional .GameEvent.BallLeftField ball_left_field_touch_line = 6;
    case kBallLeftFieldTouchLine: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.ball_left_field_touch_line_);
      break;
    }
    // optional .GameEvent.BallLeftField ball_left_field_goal_line = 7;
    case kBallLeftFieldGoalLine: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.ball_left_field_goal_line_);
      break;
    }
    // optional .GameEvent.Goal possible_goal = 39;
    case kPossibleGoal: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.possible_goal_);
      break;
    }
    // optional .GameEvent.Goal goal = 8;
    case kGoal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.goal_);
      break;
    }
    // optional .GameEvent.IndirectGoal indirect_goal = 9;
    case kIndirectGoal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.indirect_goal_);
      break;
    }
    // optional .GameEvent.ChippedGoal chipped_goal = 10;
    case kChippedGoal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.chipped_goal_);
      break;
    }
    // optional .GameEvent.AimlessKick aimless_kick = 11;
    case kAimlessKick: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.aimless_kick_);
      break;
    }
    // optional .GameEvent.KickTimeout kick_timeout = 12;
    case kKickTimeout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.kick_timeout_);
      break;
    }
    // optional .GameEvent.KeeperHeldBall keeper_held_ball = 13;
    case kKeeperHeldBall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.keeper_held_ball_);
      break;
    }
    // optional .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
    case kAttackerDoubleTouchedBall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.attacker_double_touched_ball_);
      break;
    }
    // optional .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
    case kAttackerTouchedBallInDefenseArea: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.attacker_touched_ball_in_defense_area_);
      break;
    }
    // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16;
    case kAttackerTouchedOpponentInDefenseArea: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.attacker_touched_opponent_in_defense_area_);
      break;
    }
    // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.attacker_touched_opponent_in_defense_area_skipped_);
      break;
    }
    // optional .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
    case kBotDribbledBallTooFar: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_dribbled_ball_too_far_);
      break;
    }
    // optional .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
    case kBotKickedBallTooFast: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_kicked_ball_too_fast_);
      break;
    }
    // optional .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
    case kAttackerTooCloseToDefenseArea: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.attacker_too_close_to_defense_area_);
      break;
    }
    // optional .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
    case kBotInterferedPlacement: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_interfered_placement_);
      break;
    }
    // optional .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
    case kBotCrashDrawn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_crash_drawn_);
      break;
    }
    // optional .GameEvent.BotCrashUnique bot_crash_unique = 22;
    case kBotCrashUnique: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_crash_unique_);
      break;
    }
    // optional .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23;
    case kBotCrashUniqueSkipped: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_crash_unique_skipped_);
      break;
    }
    // optional .GameEvent.BotPushedBot bot_pushed_bot = 24;
    case kBotPushedBot: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_pushed_bot_);
      break;
    }
    // optional .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25;
    case kBotPushedBotSkipped: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_pushed_bot_skipped_);
      break;
    }
    // optional .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
    case kBotHeldBallDeliberately: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_held_ball_deliberately_);
      break;
    }
    // optional .GameEvent.BotTippedOver bot_tipped_over = 27;
    case kBotTippedOver: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_tipped_over_);
      break;
    }
    // optional .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
    case kBotTooFastInStop: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.bot_too_fast_in_stop_);
      break;
    }
    // optional .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
    case kDefenderTooCloseToKickPoint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.defender_too_close_to_kick_point_);
      break;
    }
    // optional .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30;
    case kDefenderInDefenseAreaPartially: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.defender_in_defense_area_partially_);
      break;
    }
    // optional .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
    case kDefenderInDefenseArea: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.defender_in_defense_area_);
      break;
    }
    // optional .GameEvent.MultipleCards multiple_cards = 32;
    case kMultipleCards: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.multiple_cards_);
      break;
    }
    // optional .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33;
    case kMultiplePlacementFailures: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.multiple_placement_failures_);
      break;
    }
    // optional .GameEvent.MultipleFouls multiple_fouls = 34;
    case kMultipleFouls: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.multiple_fouls_);
      break;
    }
    // optional .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
    case kUnsportingBehaviorMinor: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.unsporting_behavior_minor_);
      break;
    }
    // optional .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
    case kUnsportingBehaviorMajor: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.unsporting_behavior_major_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent)
    MergeFrom(*source);
  }
}

void GameEvent::MergeFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  origin_.MergeFrom(from.origin_);
  if (from.has_type()) {
    set_type(from.type());
  }
  switch (from.event_case()) {
    case kPrepared: {
      mutable_prepared()->::GameEvent_Prepared::MergeFrom(from.prepared());
      break;
    }
    case kNoProgressInGame: {
      mutable_no_progress_in_game()->::GameEvent_NoProgressInGame::MergeFrom(from.no_progress_in_game());
      break;
    }
    case kPlacementFailed: {
      mutable_placement_failed()->::GameEvent_PlacementFailed::MergeFrom(from.placement_failed());
      break;
    }
    case kPlacementSucceeded: {
      mutable_placement_succeeded()->::GameEvent_PlacementSucceeded::MergeFrom(from.placement_succeeded());
      break;
    }
    case kBotSubstitution: {
      mutable_bot_substitution()->::GameEvent_BotSubstitution::MergeFrom(from.bot_substitution());
      break;
    }
    case kTooManyRobots: {
      mutable_too_many_robots()->::GameEvent_TooManyRobots::MergeFrom(from.too_many_robots());
      break;
    }
    case kBallLeftFieldTouchLine: {
      mutable_ball_left_field_touch_line()->::GameEvent_BallLeftField::MergeFrom(from.ball_left_field_touch_line());
      break;
    }
    case kBallLeftFieldGoalLine: {
      mutable_ball_left_field_goal_line()->::GameEvent_BallLeftField::MergeFrom(from.ball_left_field_goal_line());
      break;
    }
    case kPossibleGoal: {
      mutable_possible_goal()->::GameEvent_Goal::MergeFrom(from.possible_goal());
      break;
    }
    case kGoal: {
      mutable_goal()->::GameEvent_Goal::MergeFrom(from.goal());
      break;
    }
    case kIndirectGoal: {
      mutable_indirect_goal()->::GameEvent_IndirectGoal::MergeFrom(from.indirect_goal());
      break;
    }
    case kChippedGoal: {
      mutable_chipped_goal()->::GameEvent_ChippedGoal::MergeFrom(from.chipped_goal());
      break;
    }
    case kAimlessKick: {
      mutable_aimless_kick()->::GameEvent_AimlessKick::MergeFrom(from.aimless_kick());
      break;
    }
    case kKickTimeout: {
      mutable_kick_timeout()->::GameEvent_KickTimeout::MergeFrom(from.kick_timeout());
      break;
    }
    case kKeeperHeldBall: {
      mutable_keeper_held_ball()->::GameEvent_KeeperHeldBall::MergeFrom(from.keeper_held_ball());
      break;
    }
    case kAttackerDoubleTouchedBall: {
      mutable_attacker_double_touched_ball()->::GameEvent_AttackerDoubleTouchedBall::MergeFrom(from.attacker_double_touched_ball());
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      mutable_attacker_touched_ball_in_defense_area()->::GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(from.attacker_touched_ball_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      mutable_attacker_touched_opponent_in_defense_area_skipped()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area_skipped());
      break;
    }
    case kBotDribbledBallTooFar: {
      mutable_bot_dribbled_ball_too_far()->::GameEvent_BotDribbledBallTooFar::MergeFrom(from.bot_dribbled_ball_too_far());
      break;
    }
    case kBotKickedBallTooFast: {
      mutable_bot_kicked_ball_too_fast()->::GameEvent_BotKickedBallTooFast::MergeFrom(from.bot_kicked_ball_too_fast());
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      mutable_attacker_too_close_to_defense_area()->::GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(from.attacker_too_close_to_defense_area());
      break;
    }
    case kBotInterferedPlacement: {
      mutable_bot_interfered_placement()->::GameEvent_BotInterferedPlacement::MergeFrom(from.bot_interfered_placement());
      break;
    }
    case kBotCrashDrawn: {
      mutable_bot_crash_drawn()->::GameEvent_BotCrashDrawn::MergeFrom(from.bot_crash_drawn());
      break;
    }
    case kBotCrashUnique: {
      mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique());
      break;
    }
    case kBotCrashUniqueSkipped: {
      mutable_bot_crash_unique_skipped()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique_skipped());
      break;
    }
    case kBotPushedBot: {
      mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot());
      break;
    }
    case kBotPushedBotSkipped: {
      mutable_bot_pushed_bot_skipped()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot_skipped());
      break;
    }
    case kBotHeldBallDeliberately: {
      mutable_bot_held_ball_deliberately()->::GameEvent_BotHeldBallDeliberately::MergeFrom(from.bot_held_ball_deliberately());
      break;
    }
    case kBotTippedOver: {
      mutable_bot_tipped_over()->::GameEvent_BotTippedOver::MergeFrom(from.bot_tipped_over());
      break;
    }
    case kBotTooFastInStop: {
      mutable_bot_too_fast_in_stop()->::GameEvent_BotTooFastInStop::MergeFrom(from.bot_too_fast_in_stop());
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      mutable_defender_too_close_to_kick_point()->::GameEvent_DefenderTooCloseToKickPoint::MergeFrom(from.defender_too_close_to_kick_point());
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      mutable_defender_in_defense_area_partially()->::GameEvent_DefenderInDefenseAreaPartially::MergeFrom(from.defender_in_defense_area_partially());
      break;
    }
    case kDefenderInDefenseArea: {
      mutable_defender_in_defense_area()->::GameEvent_DefenderInDefenseArea::MergeFrom(from.defender_in_defense_area());
      break;
    }
    case kMultipleCards: {
      mutable_multiple_cards()->::GameEvent_MultipleCards::MergeFrom(from.multiple_cards());
      break;
    }
    case kMultiplePlacementFailures: {
      mutable_multiple_placement_failures()->::GameEvent_MultiplePlacementFailures::MergeFrom(from.multiple_placement_failures());
      break;
    }
    case kMultipleFouls: {
      mutable_multiple_fouls()->::GameEvent_MultipleFouls::MergeFrom(from.multiple_fouls());
      break;
    }
    case kUnsportingBehaviorMinor: {
      mutable_unsporting_behavior_minor()->::GameEvent_UnsportingBehaviorMinor::MergeFrom(from.unsporting_behavior_minor());
      break;
    }
    case kUnsportingBehaviorMajor: {
      mutable_unsporting_behavior_major()->::GameEvent_UnsportingBehaviorMajor::MergeFrom(from.unsporting_behavior_major());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void GameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent::CopyFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (event_case()) {
    case kPrepared: {
      break;
    }
    case kNoProgressInGame: {
      if (has_no_progress_in_game()) {
        if (!this->no_progress_in_game().IsInitialized()) return false;
      }
      break;
    }
    case kPlacementFailed: {
      if (has_placement_failed()) {
        if (!this->placement_failed().IsInitialized()) return false;
      }
      break;
    }
    case kPlacementSucceeded: {
      if (has_placement_succeeded()) {
        if (!this->placement_succeeded().IsInitialized()) return false;
      }
      break;
    }
    case kBotSubstitution: {
      if (has_bot_substitution()) {
        if (!this->bot_substitution().IsInitialized()) return false;
      }
      break;
    }
    case kTooManyRobots: {
      if (has_too_many_robots()) {
        if (!this->too_many_robots().IsInitialized()) return false;
      }
      break;
    }
    case kBallLeftFieldTouchLine: {
      if (has_ball_left_field_touch_line()) {
        if (!this->ball_left_field_touch_line().IsInitialized()) return false;
      }
      break;
    }
    case kBallLeftFieldGoalLine: {
      if (has_ball_left_field_goal_line()) {
        if (!this->ball_left_field_goal_line().IsInitialized()) return false;
      }
      break;
    }
    case kPossibleGoal: {
      if (has_possible_goal()) {
        if (!this->possible_goal().IsInitialized()) return false;
      }
      break;
    }
    case kGoal: {
      if (has_goal()) {
        if (!this->goal().IsInitialized()) return false;
      }
      break;
    }
    case kIndirectGoal: {
      if (has_indirect_goal()) {
        if (!this->indirect_goal().IsInitialized()) return false;
      }
      break;
    }
    case kChippedGoal: {
      if (has_chipped_goal()) {
        if (!this->chipped_goal().IsInitialized()) return false;
      }
      break;
    }
    case kAimlessKick: {
      if (has_aimless_kick()) {
        if (!this->aimless_kick().IsInitialized()) return false;
      }
      break;
    }
    case kKickTimeout: {
      if (has_kick_timeout()) {
        if (!this->kick_timeout().IsInitialized()) return false;
      }
      break;
    }
    case kKeeperHeldBall: {
      if (has_keeper_held_ball()) {
        if (!this->keeper_held_ball().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerDoubleTouchedBall: {
      if (has_attacker_double_touched_ball()) {
        if (!this->attacker_double_touched_ball().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      if (has_attacker_touched_ball_in_defense_area()) {
        if (!this->attacker_touched_ball_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      if (has_attacker_touched_opponent_in_defense_area()) {
        if (!this->attacker_touched_opponent_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      if (has_attacker_touched_opponent_in_defense_area_skipped()) {
        if (!this->attacker_touched_opponent_in_defense_area_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kBotDribbledBallTooFar: {
      if (has_bot_dribbled_ball_too_far()) {
        if (!this->bot_dribbled_ball_too_far().IsInitialized()) return false;
      }
      break;
    }
    case kBotKickedBallTooFast: {
      if (has_bot_kicked_ball_too_fast()) {
        if (!this->bot_kicked_ball_too_fast().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      if (has_attacker_too_close_to_defense_area()) {
        if (!this->attacker_too_close_to_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kBotInterferedPlacement: {
      if (has_bot_interfered_placement()) {
        if (!this->bot_interfered_placement().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashDrawn: {
      if (has_bot_crash_drawn()) {
        if (!this->bot_crash_drawn().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashUnique: {
      if (has_bot_crash_unique()) {
        if (!this->bot_crash_unique().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashUniqueSkipped: {
      if (has_bot_crash_unique_skipped()) {
        if (!this->bot_crash_unique_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kBotPushedBot: {
      if (has_bot_pushed_bot()) {
        if (!this->bot_pushed_bot().IsInitialized()) return false;
      }
      break;
    }
    case kBotPushedBotSkipped: {
      if (has_bot_pushed_bot_skipped()) {
        if (!this->bot_pushed_bot_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kBotHeldBallDeliberately: {
      if (has_bot_held_ball_deliberately()) {
        if (!this->bot_held_ball_deliberately().IsInitialized()) return false;
      }
      break;
    }
    case kBotTippedOver: {
      if (has_bot_tipped_over()) {
        if (!this->bot_tipped_over().IsInitialized()) return false;
      }
      break;
    }
    case kBotTooFastInStop: {
      if (has_bot_too_fast_in_stop()) {
        if (!this->bot_too_fast_in_stop().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      if (has_defender_too_close_to_kick_point()) {
        if (!this->defender_too_close_to_kick_point().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      if (has_defender_in_defense_area_partially()) {
        if (!this->defender_in_defense_area_partially().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderInDefenseArea: {
      if (has_defender_in_defense_area()) {
        if (!this->defender_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kMultipleCards: {
      if (has_multiple_cards()) {
        if (!this->multiple_cards().IsInitialized()) return false;
      }
      break;
    }
    case kMultiplePlacementFailures: {
      if (has_multiple_placement_failures()) {
        if (!this->multiple_placement_failures().IsInitialized()) return false;
      }
      break;
    }
    case kMultipleFouls: {
      if (has_multiple_fouls()) {
        if (!this->multiple_fouls().IsInitialized()) return false;
      }
      break;
    }
    case kUnsportingBehaviorMinor: {
      if (has_unsporting_behavior_minor()) {
        if (!this->unsporting_behavior_minor().IsInitialized()) return false;
      }
      break;
    }
    case kUnsportingBehaviorMajor: {
      if (has_unsporting_behavior_major()) {
        if (!this->unsporting_behavior_major().IsInitialized()) return false;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void GameEvent::Swap(GameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent::InternalSwap(GameEvent* other) {
  origin_.InternalSwap(&other->origin_);
  std::swap(type_, other->type_);
  std::swap(event_, other->event_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEvent::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEvent

// required .GameEventType type = 40;
bool GameEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
::GameEventType GameEvent::type() const {
  // @@protoc_insertion_point(field_get:GameEvent.type)
  return static_cast< ::GameEventType >(type_);
}
void GameEvent::set_type(::GameEventType value) {
  assert(::GameEventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GameEvent.type)
}

// repeated string origin = 41;
int GameEvent::origin_size() const {
  return origin_.size();
}
void GameEvent::clear_origin() {
  origin_.Clear();
}
const ::std::string& GameEvent::origin(int index) const {
  // @@protoc_insertion_point(field_get:GameEvent.origin)
  return origin_.Get(index);
}
::std::string* GameEvent::mutable_origin(int index) {
  // @@protoc_insertion_point(field_mutable:GameEvent.origin)
  return origin_.Mutable(index);
}
void GameEvent::set_origin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GameEvent.origin)
  origin_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GameEvent::set_origin(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:GameEvent.origin)
  origin_.Mutable(index)->assign(std::move(value));
}
#endif
void GameEvent::set_origin(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  origin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GameEvent.origin)
}
void GameEvent::set_origin(int index, const char* value, size_t size) {
  origin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GameEvent.origin)
}
::std::string* GameEvent::add_origin() {
  // @@protoc_insertion_point(field_add_mutable:GameEvent.origin)
  return origin_.Add();
}
void GameEvent::add_origin(const ::std::string& value) {
  origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GameEvent.origin)
}
#if LANG_CXX11
void GameEvent::add_origin(::std::string&& value) {
  origin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GameEvent.origin)
}
#endif
void GameEvent::add_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GameEvent.origin)
}
void GameEvent::add_origin(const char* value, size_t size) {
  origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GameEvent.origin)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GameEvent::origin() const {
  // @@protoc_insertion_point(field_list:GameEvent.origin)
  return origin_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GameEvent::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:GameEvent.origin)
  return &origin_;
}

// optional .GameEvent.Prepared prepared = 1;
bool GameEvent::has_prepared() const {
  return event_case() == kPrepared;
}
void GameEvent::set_has_prepared() {
  _oneof_case_[0] = kPrepared;
}
void GameEvent::clear_prepared() {
  if (has_prepared()) {
    delete event_.prepared_;
    clear_has_event();
  }
}
 const ::GameEvent_Prepared& GameEvent::prepared() const {
  // @@protoc_insertion_point(field_get:GameEvent.prepared)
  return has_prepared()
      ? *event_.prepared_
      : ::GameEvent_Prepared::default_instance();
}
::GameEvent_Prepared* GameEvent::mutable_prepared() {
  if (!has_prepared()) {
    clear_event();
    set_has_prepared();
    event_.prepared_ = new ::GameEvent_Prepared;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.prepared)
  return event_.prepared_;
}
::GameEvent_Prepared* GameEvent::release_prepared() {
  // @@protoc_insertion_point(field_release:GameEvent.prepared)
  if (has_prepared()) {
    clear_has_event();
    ::GameEvent_Prepared* temp = event_.prepared_;
    event_.prepared_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_prepared(::GameEvent_Prepared* prepared) {
  clear_event();
  if (prepared) {
    set_has_prepared();
    event_.prepared_ = prepared;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.prepared)
}

// optional .GameEvent.NoProgressInGame no_progress_in_game = 2;
bool GameEvent::has_no_progress_in_game() const {
  return event_case() == kNoProgressInGame;
}
void GameEvent::set_has_no_progress_in_game() {
  _oneof_case_[0] = kNoProgressInGame;
}
void GameEvent::clear_no_progress_in_game() {
  if (has_no_progress_in_game()) {
    delete event_.no_progress_in_game_;
    clear_has_event();
  }
}
 const ::GameEvent_NoProgressInGame& GameEvent::no_progress_in_game() const {
  // @@protoc_insertion_point(field_get:GameEvent.no_progress_in_game)
  return has_no_progress_in_game()
      ? *event_.no_progress_in_game_
      : ::GameEvent_NoProgressInGame::default_instance();
}
::GameEvent_NoProgressInGame* GameEvent::mutable_no_progress_in_game() {
  if (!has_no_progress_in_game()) {
    clear_event();
    set_has_no_progress_in_game();
    event_.no_progress_in_game_ = new ::GameEvent_NoProgressInGame;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.no_progress_in_game)
  return event_.no_progress_in_game_;
}
::GameEvent_NoProgressInGame* GameEvent::release_no_progress_in_game() {
  // @@protoc_insertion_point(field_release:GameEvent.no_progress_in_game)
  if (has_no_progress_in_game()) {
    clear_has_event();
    ::GameEvent_NoProgressInGame* temp = event_.no_progress_in_game_;
    event_.no_progress_in_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_no_progress_in_game(::GameEvent_NoProgressInGame* no_progress_in_game) {
  clear_event();
  if (no_progress_in_game) {
    set_has_no_progress_in_game();
    event_.no_progress_in_game_ = no_progress_in_game;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.no_progress_in_game)
}

// optional .GameEvent.PlacementFailed placement_failed = 3;
bool GameEvent::has_placement_failed() const {
  return event_case() == kPlacementFailed;
}
void GameEvent::set_has_placement_failed() {
  _oneof_case_[0] = kPlacementFailed;
}
void GameEvent::clear_placement_failed() {
  if (has_placement_failed()) {
    delete event_.placement_failed_;
    clear_has_event();
  }
}
 const ::GameEvent_PlacementFailed& GameEvent::placement_failed() const {
  // @@protoc_insertion_point(field_get:GameEvent.placement_failed)
  return has_placement_failed()
      ? *event_.placement_failed_
      : ::GameEvent_PlacementFailed::default_instance();
}
::GameEvent_PlacementFailed* GameEvent::mutable_placement_failed() {
  if (!has_placement_failed()) {
    clear_event();
    set_has_placement_failed();
    event_.placement_failed_ = new ::GameEvent_PlacementFailed;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.placement_failed)
  return event_.placement_failed_;
}
::GameEvent_PlacementFailed* GameEvent::release_placement_failed() {
  // @@protoc_insertion_point(field_release:GameEvent.placement_failed)
  if (has_placement_failed()) {
    clear_has_event();
    ::GameEvent_PlacementFailed* temp = event_.placement_failed_;
    event_.placement_failed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_placement_failed(::GameEvent_PlacementFailed* placement_failed) {
  clear_event();
  if (placement_failed) {
    set_has_placement_failed();
    event_.placement_failed_ = placement_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_failed)
}

// optional .GameEvent.PlacementSucceeded placement_succeeded = 5;
bool GameEvent::has_placement_succeeded() const {
  return event_case() == kPlacementSucceeded;
}
void GameEvent::set_has_placement_succeeded() {
  _oneof_case_[0] = kPlacementSucceeded;
}
void GameEvent::clear_placement_succeeded() {
  if (has_placement_succeeded()) {
    delete event_.placement_succeeded_;
    clear_has_event();
  }
}
 const ::GameEvent_PlacementSucceeded& GameEvent::placement_succeeded() const {
  // @@protoc_insertion_point(field_get:GameEvent.placement_succeeded)
  return has_placement_succeeded()
      ? *event_.placement_succeeded_
      : ::GameEvent_PlacementSucceeded::default_instance();
}
::GameEvent_PlacementSucceeded* GameEvent::mutable_placement_succeeded() {
  if (!has_placement_succeeded()) {
    clear_event();
    set_has_placement_succeeded();
    event_.placement_succeeded_ = new ::GameEvent_PlacementSucceeded;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.placement_succeeded)
  return event_.placement_succeeded_;
}
::GameEvent_PlacementSucceeded* GameEvent::release_placement_succeeded() {
  // @@protoc_insertion_point(field_release:GameEvent.placement_succeeded)
  if (has_placement_succeeded()) {
    clear_has_event();
    ::GameEvent_PlacementSucceeded* temp = event_.placement_succeeded_;
    event_.placement_succeeded_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_placement_succeeded(::GameEvent_PlacementSucceeded* placement_succeeded) {
  clear_event();
  if (placement_succeeded) {
    set_has_placement_succeeded();
    event_.placement_succeeded_ = placement_succeeded;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_succeeded)
}

// optional .GameEvent.BotSubstitution bot_substitution = 37;
bool GameEvent::has_bot_substitution() const {
  return event_case() == kBotSubstitution;
}
void GameEvent::set_has_bot_substitution() {
  _oneof_case_[0] = kBotSubstitution;
}
void GameEvent::clear_bot_substitution() {
  if (has_bot_substitution()) {
    delete event_.bot_substitution_;
    clear_has_event();
  }
}
 const ::GameEvent_BotSubstitution& GameEvent::bot_substitution() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_substitution)
  return has_bot_substitution()
      ? *event_.bot_substitution_
      : ::GameEvent_BotSubstitution::default_instance();
}
::GameEvent_BotSubstitution* GameEvent::mutable_bot_substitution() {
  if (!has_bot_substitution()) {
    clear_event();
    set_has_bot_substitution();
    event_.bot_substitution_ = new ::GameEvent_BotSubstitution;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_substitution)
  return event_.bot_substitution_;
}
::GameEvent_BotSubstitution* GameEvent::release_bot_substitution() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_substitution)
  if (has_bot_substitution()) {
    clear_has_event();
    ::GameEvent_BotSubstitution* temp = event_.bot_substitution_;
    event_.bot_substitution_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_substitution(::GameEvent_BotSubstitution* bot_substitution) {
  clear_event();
  if (bot_substitution) {
    set_has_bot_substitution();
    event_.bot_substitution_ = bot_substitution;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_substitution)
}

// optional .GameEvent.TooManyRobots too_many_robots = 38;
bool GameEvent::has_too_many_robots() const {
  return event_case() == kTooManyRobots;
}
void GameEvent::set_has_too_many_robots() {
  _oneof_case_[0] = kTooManyRobots;
}
void GameEvent::clear_too_many_robots() {
  if (has_too_many_robots()) {
    delete event_.too_many_robots_;
    clear_has_event();
  }
}
 const ::GameEvent_TooManyRobots& GameEvent::too_many_robots() const {
  // @@protoc_insertion_point(field_get:GameEvent.too_many_robots)
  return has_too_many_robots()
      ? *event_.too_many_robots_
      : ::GameEvent_TooManyRobots::default_instance();
}
::GameEvent_TooManyRobots* GameEvent::mutable_too_many_robots() {
  if (!has_too_many_robots()) {
    clear_event();
    set_has_too_many_robots();
    event_.too_many_robots_ = new ::GameEvent_TooManyRobots;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.too_many_robots)
  return event_.too_many_robots_;
}
::GameEvent_TooManyRobots* GameEvent::release_too_many_robots() {
  // @@protoc_insertion_point(field_release:GameEvent.too_many_robots)
  if (has_too_many_robots()) {
    clear_has_event();
    ::GameEvent_TooManyRobots* temp = event_.too_many_robots_;
    event_.too_many_robots_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_too_many_robots(::GameEvent_TooManyRobots* too_many_robots) {
  clear_event();
  if (too_many_robots) {
    set_has_too_many_robots();
    event_.too_many_robots_ = too_many_robots;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.too_many_robots)
}

// optional .GameEvent.BallLeftField ball_left_field_touch_line = 6;
bool GameEvent::has_ball_left_field_touch_line() const {
  return event_case() == kBallLeftFieldTouchLine;
}
void GameEvent::set_has_ball_left_field_touch_line() {
  _oneof_case_[0] = kBallLeftFieldTouchLine;
}
void GameEvent::clear_ball_left_field_touch_line() {
  if (has_ball_left_field_touch_line()) {
    delete event_.ball_left_field_touch_line_;
    clear_has_event();
  }
}
 const ::GameEvent_BallLeftField& GameEvent::ball_left_field_touch_line() const {
  // @@protoc_insertion_point(field_get:GameEvent.ball_left_field_touch_line)
  return has_ball_left_field_touch_line()
      ? *event_.ball_left_field_touch_line_
      : ::GameEvent_BallLeftField::default_instance();
}
::GameEvent_BallLeftField* GameEvent::mutable_ball_left_field_touch_line() {
  if (!has_ball_left_field_touch_line()) {
    clear_event();
    set_has_ball_left_field_touch_line();
    event_.ball_left_field_touch_line_ = new ::GameEvent_BallLeftField;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.ball_left_field_touch_line)
  return event_.ball_left_field_touch_line_;
}
::GameEvent_BallLeftField* GameEvent::release_ball_left_field_touch_line() {
  // @@protoc_insertion_point(field_release:GameEvent.ball_left_field_touch_line)
  if (has_ball_left_field_touch_line()) {
    clear_has_event();
    ::GameEvent_BallLeftField* temp = event_.ball_left_field_touch_line_;
    event_.ball_left_field_touch_line_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_ball_left_field_touch_line(::GameEvent_BallLeftField* ball_left_field_touch_line) {
  clear_event();
  if (ball_left_field_touch_line) {
    set_has_ball_left_field_touch_line();
    event_.ball_left_field_touch_line_ = ball_left_field_touch_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_touch_line)
}

// optional .GameEvent.BallLeftField ball_left_field_goal_line = 7;
bool GameEvent::has_ball_left_field_goal_line() const {
  return event_case() == kBallLeftFieldGoalLine;
}
void GameEvent::set_has_ball_left_field_goal_line() {
  _oneof_case_[0] = kBallLeftFieldGoalLine;
}
void GameEvent::clear_ball_left_field_goal_line() {
  if (has_ball_left_field_goal_line()) {
    delete event_.ball_left_field_goal_line_;
    clear_has_event();
  }
}
 const ::GameEvent_BallLeftField& GameEvent::ball_left_field_goal_line() const {
  // @@protoc_insertion_point(field_get:GameEvent.ball_left_field_goal_line)
  return has_ball_left_field_goal_line()
      ? *event_.ball_left_field_goal_line_
      : ::GameEvent_BallLeftField::default_instance();
}
::GameEvent_BallLeftField* GameEvent::mutable_ball_left_field_goal_line() {
  if (!has_ball_left_field_goal_line()) {
    clear_event();
    set_has_ball_left_field_goal_line();
    event_.ball_left_field_goal_line_ = new ::GameEvent_BallLeftField;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.ball_left_field_goal_line)
  return event_.ball_left_field_goal_line_;
}
::GameEvent_BallLeftField* GameEvent::release_ball_left_field_goal_line() {
  // @@protoc_insertion_point(field_release:GameEvent.ball_left_field_goal_line)
  if (has_ball_left_field_goal_line()) {
    clear_has_event();
    ::GameEvent_BallLeftField* temp = event_.ball_left_field_goal_line_;
    event_.ball_left_field_goal_line_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_ball_left_field_goal_line(::GameEvent_BallLeftField* ball_left_field_goal_line) {
  clear_event();
  if (ball_left_field_goal_line) {
    set_has_ball_left_field_goal_line();
    event_.ball_left_field_goal_line_ = ball_left_field_goal_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_goal_line)
}

// optional .GameEvent.Goal possible_goal = 39;
bool GameEvent::has_possible_goal() const {
  return event_case() == kPossibleGoal;
}
void GameEvent::set_has_possible_goal() {
  _oneof_case_[0] = kPossibleGoal;
}
void GameEvent::clear_possible_goal() {
  if (has_possible_goal()) {
    delete event_.possible_goal_;
    clear_has_event();
  }
}
 const ::GameEvent_Goal& GameEvent::possible_goal() const {
  // @@protoc_insertion_point(field_get:GameEvent.possible_goal)
  return has_possible_goal()
      ? *event_.possible_goal_
      : ::GameEvent_Goal::default_instance();
}
::GameEvent_Goal* GameEvent::mutable_possible_goal() {
  if (!has_possible_goal()) {
    clear_event();
    set_has_possible_goal();
    event_.possible_goal_ = new ::GameEvent_Goal;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.possible_goal)
  return event_.possible_goal_;
}
::GameEvent_Goal* GameEvent::release_possible_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.possible_goal)
  if (has_possible_goal()) {
    clear_has_event();
    ::GameEvent_Goal* temp = event_.possible_goal_;
    event_.possible_goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_possible_goal(::GameEvent_Goal* possible_goal) {
  clear_event();
  if (possible_goal) {
    set_has_possible_goal();
    event_.possible_goal_ = possible_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.possible_goal)
}

// optional .GameEvent.Goal goal = 8;
bool GameEvent::has_goal() const {
  return event_case() == kGoal;
}
void GameEvent::set_has_goal() {
  _oneof_case_[0] = kGoal;
}
void GameEvent::clear_goal() {
  if (has_goal()) {
    delete event_.goal_;
    clear_has_event();
  }
}
 const ::GameEvent_Goal& GameEvent::goal() const {
  // @@protoc_insertion_point(field_get:GameEvent.goal)
  return has_goal()
      ? *event_.goal_
      : ::GameEvent_Goal::default_instance();
}
::GameEvent_Goal* GameEvent::mutable_goal() {
  if (!has_goal()) {
    clear_event();
    set_has_goal();
    event_.goal_ = new ::GameEvent_Goal;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.goal)
  return event_.goal_;
}
::GameEvent_Goal* GameEvent::release_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.goal)
  if (has_goal()) {
    clear_has_event();
    ::GameEvent_Goal* temp = event_.goal_;
    event_.goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_goal(::GameEvent_Goal* goal) {
  clear_event();
  if (goal) {
    set_has_goal();
    event_.goal_ = goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.goal)
}

// optional .GameEvent.IndirectGoal indirect_goal = 9;
bool GameEvent::has_indirect_goal() const {
  return event_case() == kIndirectGoal;
}
void GameEvent::set_has_indirect_goal() {
  _oneof_case_[0] = kIndirectGoal;
}
void GameEvent::clear_indirect_goal() {
  if (has_indirect_goal()) {
    delete event_.indirect_goal_;
    clear_has_event();
  }
}
 const ::GameEvent_IndirectGoal& GameEvent::indirect_goal() const {
  // @@protoc_insertion_point(field_get:GameEvent.indirect_goal)
  return has_indirect_goal()
      ? *event_.indirect_goal_
      : ::GameEvent_IndirectGoal::default_instance();
}
::GameEvent_IndirectGoal* GameEvent::mutable_indirect_goal() {
  if (!has_indirect_goal()) {
    clear_event();
    set_has_indirect_goal();
    event_.indirect_goal_ = new ::GameEvent_IndirectGoal;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.indirect_goal)
  return event_.indirect_goal_;
}
::GameEvent_IndirectGoal* GameEvent::release_indirect_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.indirect_goal)
  if (has_indirect_goal()) {
    clear_has_event();
    ::GameEvent_IndirectGoal* temp = event_.indirect_goal_;
    event_.indirect_goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_indirect_goal(::GameEvent_IndirectGoal* indirect_goal) {
  clear_event();
  if (indirect_goal) {
    set_has_indirect_goal();
    event_.indirect_goal_ = indirect_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.indirect_goal)
}

// optional .GameEvent.ChippedGoal chipped_goal = 10;
bool GameEvent::has_chipped_goal() const {
  return event_case() == kChippedGoal;
}
void GameEvent::set_has_chipped_goal() {
  _oneof_case_[0] = kChippedGoal;
}
void GameEvent::clear_chipped_goal() {
  if (has_chipped_goal()) {
    delete event_.chipped_goal_;
    clear_has_event();
  }
}
 const ::GameEvent_ChippedGoal& GameEvent::chipped_goal() const {
  // @@protoc_insertion_point(field_get:GameEvent.chipped_goal)
  return has_chipped_goal()
      ? *event_.chipped_goal_
      : ::GameEvent_ChippedGoal::default_instance();
}
::GameEvent_ChippedGoal* GameEvent::mutable_chipped_goal() {
  if (!has_chipped_goal()) {
    clear_event();
    set_has_chipped_goal();
    event_.chipped_goal_ = new ::GameEvent_ChippedGoal;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.chipped_goal)
  return event_.chipped_goal_;
}
::GameEvent_ChippedGoal* GameEvent::release_chipped_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.chipped_goal)
  if (has_chipped_goal()) {
    clear_has_event();
    ::GameEvent_ChippedGoal* temp = event_.chipped_goal_;
    event_.chipped_goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_chipped_goal(::GameEvent_ChippedGoal* chipped_goal) {
  clear_event();
  if (chipped_goal) {
    set_has_chipped_goal();
    event_.chipped_goal_ = chipped_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.chipped_goal)
}

// optional .GameEvent.AimlessKick aimless_kick = 11;
bool GameEvent::has_aimless_kick() const {
  return event_case() == kAimlessKick;
}
void GameEvent::set_has_aimless_kick() {
  _oneof_case_[0] = kAimlessKick;
}
void GameEvent::clear_aimless_kick() {
  if (has_aimless_kick()) {
    delete event_.aimless_kick_;
    clear_has_event();
  }
}
 const ::GameEvent_AimlessKick& GameEvent::aimless_kick() const {
  // @@protoc_insertion_point(field_get:GameEvent.aimless_kick)
  return has_aimless_kick()
      ? *event_.aimless_kick_
      : ::GameEvent_AimlessKick::default_instance();
}
::GameEvent_AimlessKick* GameEvent::mutable_aimless_kick() {
  if (!has_aimless_kick()) {
    clear_event();
    set_has_aimless_kick();
    event_.aimless_kick_ = new ::GameEvent_AimlessKick;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.aimless_kick)
  return event_.aimless_kick_;
}
::GameEvent_AimlessKick* GameEvent::release_aimless_kick() {
  // @@protoc_insertion_point(field_release:GameEvent.aimless_kick)
  if (has_aimless_kick()) {
    clear_has_event();
    ::GameEvent_AimlessKick* temp = event_.aimless_kick_;
    event_.aimless_kick_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_aimless_kick(::GameEvent_AimlessKick* aimless_kick) {
  clear_event();
  if (aimless_kick) {
    set_has_aimless_kick();
    event_.aimless_kick_ = aimless_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.aimless_kick)
}

// optional .GameEvent.KickTimeout kick_timeout = 12;
bool GameEvent::has_kick_timeout() const {
  return event_case() == kKickTimeout;
}
void GameEvent::set_has_kick_timeout() {
  _oneof_case_[0] = kKickTimeout;
}
void GameEvent::clear_kick_timeout() {
  if (has_kick_timeout()) {
    delete event_.kick_timeout_;
    clear_has_event();
  }
}
 const ::GameEvent_KickTimeout& GameEvent::kick_timeout() const {
  // @@protoc_insertion_point(field_get:GameEvent.kick_timeout)
  return has_kick_timeout()
      ? *event_.kick_timeout_
      : ::GameEvent_KickTimeout::default_instance();
}
::GameEvent_KickTimeout* GameEvent::mutable_kick_timeout() {
  if (!has_kick_timeout()) {
    clear_event();
    set_has_kick_timeout();
    event_.kick_timeout_ = new ::GameEvent_KickTimeout;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.kick_timeout)
  return event_.kick_timeout_;
}
::GameEvent_KickTimeout* GameEvent::release_kick_timeout() {
  // @@protoc_insertion_point(field_release:GameEvent.kick_timeout)
  if (has_kick_timeout()) {
    clear_has_event();
    ::GameEvent_KickTimeout* temp = event_.kick_timeout_;
    event_.kick_timeout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_kick_timeout(::GameEvent_KickTimeout* kick_timeout) {
  clear_event();
  if (kick_timeout) {
    set_has_kick_timeout();
    event_.kick_timeout_ = kick_timeout;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.kick_timeout)
}

// optional .GameEvent.KeeperHeldBall keeper_held_ball = 13;
bool GameEvent::has_keeper_held_ball() const {
  return event_case() == kKeeperHeldBall;
}
void GameEvent::set_has_keeper_held_ball() {
  _oneof_case_[0] = kKeeperHeldBall;
}
void GameEvent::clear_keeper_held_ball() {
  if (has_keeper_held_ball()) {
    delete event_.keeper_held_ball_;
    clear_has_event();
  }
}
 const ::GameEvent_KeeperHeldBall& GameEvent::keeper_held_ball() const {
  // @@protoc_insertion_point(field_get:GameEvent.keeper_held_ball)
  return has_keeper_held_ball()
      ? *event_.keeper_held_ball_
      : ::GameEvent_KeeperHeldBall::default_instance();
}
::GameEvent_KeeperHeldBall* GameEvent::mutable_keeper_held_ball() {
  if (!has_keeper_held_ball()) {
    clear_event();
    set_has_keeper_held_ball();
    event_.keeper_held_ball_ = new ::GameEvent_KeeperHeldBall;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.keeper_held_ball)
  return event_.keeper_held_ball_;
}
::GameEvent_KeeperHeldBall* GameEvent::release_keeper_held_ball() {
  // @@protoc_insertion_point(field_release:GameEvent.keeper_held_ball)
  if (has_keeper_held_ball()) {
    clear_has_event();
    ::GameEvent_KeeperHeldBall* temp = event_.keeper_held_ball_;
    event_.keeper_held_ball_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_keeper_held_ball(::GameEvent_KeeperHeldBall* keeper_held_ball) {
  clear_event();
  if (keeper_held_ball) {
    set_has_keeper_held_ball();
    event_.keeper_held_ball_ = keeper_held_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.keeper_held_ball)
}

// optional .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
bool GameEvent::has_attacker_double_touched_ball() const {
  return event_case() == kAttackerDoubleTouchedBall;
}
void GameEvent::set_has_attacker_double_touched_ball() {
  _oneof_case_[0] = kAttackerDoubleTouchedBall;
}
void GameEvent::clear_attacker_double_touched_ball() {
  if (has_attacker_double_touched_ball()) {
    delete event_.attacker_double_touched_ball_;
    clear_has_event();
  }
}
 const ::GameEvent_AttackerDoubleTouchedBall& GameEvent::attacker_double_touched_ball() const {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_double_touched_ball)
  return has_attacker_double_touched_ball()
      ? *event_.attacker_double_touched_ball_
      : ::GameEvent_AttackerDoubleTouchedBall::default_instance();
}
::GameEvent_AttackerDoubleTouchedBall* GameEvent::mutable_attacker_double_touched_ball() {
  if (!has_attacker_double_touched_ball()) {
    clear_event();
    set_has_attacker_double_touched_ball();
    event_.attacker_double_touched_ball_ = new ::GameEvent_AttackerDoubleTouchedBall;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_double_touched_ball)
  return event_.attacker_double_touched_ball_;
}
::GameEvent_AttackerDoubleTouchedBall* GameEvent::release_attacker_double_touched_ball() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_double_touched_ball)
  if (has_attacker_double_touched_ball()) {
    clear_has_event();
    ::GameEvent_AttackerDoubleTouchedBall* temp = event_.attacker_double_touched_ball_;
    event_.attacker_double_touched_ball_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_attacker_double_touched_ball(::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball) {
  clear_event();
  if (attacker_double_touched_ball) {
    set_has_attacker_double_touched_ball();
    event_.attacker_double_touched_ball_ = attacker_double_touched_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_double_touched_ball)
}

// optional .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
bool GameEvent::has_attacker_touched_ball_in_defense_area() const {
  return event_case() == kAttackerTouchedBallInDefenseArea;
}
void GameEvent::set_has_attacker_touched_ball_in_defense_area() {
  _oneof_case_[0] = kAttackerTouchedBallInDefenseArea;
}
void GameEvent::clear_attacker_touched_ball_in_defense_area() {
  if (has_attacker_touched_ball_in_defense_area()) {
    delete event_.attacker_touched_ball_in_defense_area_;
    clear_has_event();
  }
}
 const ::GameEvent_AttackerTouchedBallInDefenseArea& GameEvent::attacker_touched_ball_in_defense_area() const {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_touched_ball_in_defense_area)
  return has_attacker_touched_ball_in_defense_area()
      ? *event_.attacker_touched_ball_in_defense_area_
      : ::GameEvent_AttackerTouchedBallInDefenseArea::default_instance();
}
::GameEvent_AttackerTouchedBallInDefenseArea* GameEvent::mutable_attacker_touched_ball_in_defense_area() {
  if (!has_attacker_touched_ball_in_defense_area()) {
    clear_event();
    set_has_attacker_touched_ball_in_defense_area();
    event_.attacker_touched_ball_in_defense_area_ = new ::GameEvent_AttackerTouchedBallInDefenseArea;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_touched_ball_in_defense_area)
  return event_.attacker_touched_ball_in_defense_area_;
}
::GameEvent_AttackerTouchedBallInDefenseArea* GameEvent::release_attacker_touched_ball_in_defense_area() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_touched_ball_in_defense_area)
  if (has_attacker_touched_ball_in_defense_area()) {
    clear_has_event();
    ::GameEvent_AttackerTouchedBallInDefenseArea* temp = event_.attacker_touched_ball_in_defense_area_;
    event_.attacker_touched_ball_in_defense_area_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_attacker_touched_ball_in_defense_area(::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area) {
  clear_event();
  if (attacker_touched_ball_in_defense_area) {
    set_has_attacker_touched_ball_in_defense_area();
    event_.attacker_touched_ball_in_defense_area_ = attacker_touched_ball_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_ball_in_defense_area)
}

// optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16;
bool GameEvent::has_attacker_touched_opponent_in_defense_area() const {
  return event_case() == kAttackerTouchedOpponentInDefenseArea;
}
void GameEvent::set_has_attacker_touched_opponent_in_defense_area() {
  _oneof_case_[0] = kAttackerTouchedOpponentInDefenseArea;
}
void GameEvent::clear_attacker_touched_opponent_in_defense_area() {
  if (has_attacker_touched_opponent_in_defense_area()) {
    delete event_.attacker_touched_opponent_in_defense_area_;
    clear_has_event();
  }
}
 const ::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::attacker_touched_opponent_in_defense_area() const {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_touched_opponent_in_defense_area)
  return has_attacker_touched_opponent_in_defense_area()
      ? *event_.attacker_touched_opponent_in_defense_area_
      : ::GameEvent_AttackerTouchedOpponentInDefenseArea::default_instance();
}
::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::mutable_attacker_touched_opponent_in_defense_area() {
  if (!has_attacker_touched_opponent_in_defense_area()) {
    clear_event();
    set_has_attacker_touched_opponent_in_defense_area();
    event_.attacker_touched_opponent_in_defense_area_ = new ::GameEvent_AttackerTouchedOpponentInDefenseArea;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_touched_opponent_in_defense_area)
  return event_.attacker_touched_opponent_in_defense_area_;
}
::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::release_attacker_touched_opponent_in_defense_area() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_touched_opponent_in_defense_area)
  if (has_attacker_touched_opponent_in_defense_area()) {
    clear_has_event();
    ::GameEvent_AttackerTouchedOpponentInDefenseArea* temp = event_.attacker_touched_opponent_in_defense_area_;
    event_.attacker_touched_opponent_in_defense_area_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  clear_event();
  if (attacker_touched_opponent_in_defense_area) {
    set_has_attacker_touched_opponent_in_defense_area();
    event_.attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area)
}

// optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
bool GameEvent::has_attacker_touched_opponent_in_defense_area_skipped() const {
  return event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped;
}
void GameEvent::set_has_attacker_touched_opponent_in_defense_area_skipped() {
  _oneof_case_[0] = kAttackerTouchedOpponentInDefenseAreaSkipped;
}
void GameEvent::clear_attacker_touched_opponent_in_defense_area_skipped() {
  if (has_attacker_touched_opponent_in_defense_area_skipped()) {
    delete event_.attacker_touched_opponent_in_defense_area_skipped_;
    clear_has_event();
  }
}
 const ::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::attacker_touched_opponent_in_defense_area_skipped() const {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  return has_attacker_touched_opponent_in_defense_area_skipped()
      ? *event_.attacker_touched_opponent_in_defense_area_skipped_
      : ::GameEvent_AttackerTouchedOpponentInDefenseArea::default_instance();
}
::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::mutable_attacker_touched_opponent_in_defense_area_skipped() {
  if (!has_attacker_touched_opponent_in_defense_area_skipped()) {
    clear_event();
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    event_.attacker_touched_opponent_in_defense_area_skipped_ = new ::GameEvent_AttackerTouchedOpponentInDefenseArea;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  return event_.attacker_touched_opponent_in_defense_area_skipped_;
}
::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::release_attacker_touched_opponent_in_defense_area_skipped() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  if (has_attacker_touched_opponent_in_defense_area_skipped()) {
    clear_has_event();
    ::GameEvent_AttackerTouchedOpponentInDefenseArea* temp = event_.attacker_touched_opponent_in_defense_area_skipped_;
    event_.attacker_touched_opponent_in_defense_area_skipped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area_skipped(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped) {
  clear_event();
  if (attacker_touched_opponent_in_defense_area_skipped) {
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    event_.attacker_touched_opponent_in_defense_area_skipped_ = attacker_touched_opponent_in_defense_area_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
}

// optional .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
bool GameEvent::has_bot_dribbled_ball_too_far() const {
  return event_case() == kBotDribbledBallTooFar;
}
void GameEvent::set_has_bot_dribbled_ball_too_far() {
  _oneof_case_[0] = kBotDribbledBallTooFar;
}
void GameEvent::clear_bot_dribbled_ball_too_far() {
  if (has_bot_dribbled_ball_too_far()) {
    delete event_.bot_dribbled_ball_too_far_;
    clear_has_event();
  }
}
 const ::GameEvent_BotDribbledBallTooFar& GameEvent::bot_dribbled_ball_too_far() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_dribbled_ball_too_far)
  return has_bot_dribbled_ball_too_far()
      ? *event_.bot_dribbled_ball_too_far_
      : ::GameEvent_BotDribbledBallTooFar::default_instance();
}
::GameEvent_BotDribbledBallTooFar* GameEvent::mutable_bot_dribbled_ball_too_far() {
  if (!has_bot_dribbled_ball_too_far()) {
    clear_event();
    set_has_bot_dribbled_ball_too_far();
    event_.bot_dribbled_ball_too_far_ = new ::GameEvent_BotDribbledBallTooFar;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_dribbled_ball_too_far)
  return event_.bot_dribbled_ball_too_far_;
}
::GameEvent_BotDribbledBallTooFar* GameEvent::release_bot_dribbled_ball_too_far() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_dribbled_ball_too_far)
  if (has_bot_dribbled_ball_too_far()) {
    clear_has_event();
    ::GameEvent_BotDribbledBallTooFar* temp = event_.bot_dribbled_ball_too_far_;
    event_.bot_dribbled_ball_too_far_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_dribbled_ball_too_far(::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far) {
  clear_event();
  if (bot_dribbled_ball_too_far) {
    set_has_bot_dribbled_ball_too_far();
    event_.bot_dribbled_ball_too_far_ = bot_dribbled_ball_too_far;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_dribbled_ball_too_far)
}

// optional .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
bool GameEvent::has_bot_kicked_ball_too_fast() const {
  return event_case() == kBotKickedBallTooFast;
}
void GameEvent::set_has_bot_kicked_ball_too_fast() {
  _oneof_case_[0] = kBotKickedBallTooFast;
}
void GameEvent::clear_bot_kicked_ball_too_fast() {
  if (has_bot_kicked_ball_too_fast()) {
    delete event_.bot_kicked_ball_too_fast_;
    clear_has_event();
  }
}
 const ::GameEvent_BotKickedBallTooFast& GameEvent::bot_kicked_ball_too_fast() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_kicked_ball_too_fast)
  return has_bot_kicked_ball_too_fast()
      ? *event_.bot_kicked_ball_too_fast_
      : ::GameEvent_BotKickedBallTooFast::default_instance();
}
::GameEvent_BotKickedBallTooFast* GameEvent::mutable_bot_kicked_ball_too_fast() {
  if (!has_bot_kicked_ball_too_fast()) {
    clear_event();
    set_has_bot_kicked_ball_too_fast();
    event_.bot_kicked_ball_too_fast_ = new ::GameEvent_BotKickedBallTooFast;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_kicked_ball_too_fast)
  return event_.bot_kicked_ball_too_fast_;
}
::GameEvent_BotKickedBallTooFast* GameEvent::release_bot_kicked_ball_too_fast() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_kicked_ball_too_fast)
  if (has_bot_kicked_ball_too_fast()) {
    clear_has_event();
    ::GameEvent_BotKickedBallTooFast* temp = event_.bot_kicked_ball_too_fast_;
    event_.bot_kicked_ball_too_fast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_kicked_ball_too_fast(::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast) {
  clear_event();
  if (bot_kicked_ball_too_fast) {
    set_has_bot_kicked_ball_too_fast();
    event_.bot_kicked_ball_too_fast_ = bot_kicked_ball_too_fast;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_kicked_ball_too_fast)
}

// optional .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
bool GameEvent::has_attacker_too_close_to_defense_area() const {
  return event_case() == kAttackerTooCloseToDefenseArea;
}
void GameEvent::set_has_attacker_too_close_to_defense_area() {
  _oneof_case_[0] = kAttackerTooCloseToDefenseArea;
}
void GameEvent::clear_attacker_too_close_to_defense_area() {
  if (has_attacker_too_close_to_defense_area()) {
    delete event_.attacker_too_close_to_defense_area_;
    clear_has_event();
  }
}
 const ::GameEvent_AttackerTooCloseToDefenseArea& GameEvent::attacker_too_close_to_defense_area() const {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_too_close_to_defense_area)
  return has_attacker_too_close_to_defense_area()
      ? *event_.attacker_too_close_to_defense_area_
      : ::GameEvent_AttackerTooCloseToDefenseArea::default_instance();
}
::GameEvent_AttackerTooCloseToDefenseArea* GameEvent::mutable_attacker_too_close_to_defense_area() {
  if (!has_attacker_too_close_to_defense_area()) {
    clear_event();
    set_has_attacker_too_close_to_defense_area();
    event_.attacker_too_close_to_defense_area_ = new ::GameEvent_AttackerTooCloseToDefenseArea;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_too_close_to_defense_area)
  return event_.attacker_too_close_to_defense_area_;
}
::GameEvent_AttackerTooCloseToDefenseArea* GameEvent::release_attacker_too_close_to_defense_area() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_too_close_to_defense_area)
  if (has_attacker_too_close_to_defense_area()) {
    clear_has_event();
    ::GameEvent_AttackerTooCloseToDefenseArea* temp = event_.attacker_too_close_to_defense_area_;
    event_.attacker_too_close_to_defense_area_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_attacker_too_close_to_defense_area(::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area) {
  clear_event();
  if (attacker_too_close_to_defense_area) {
    set_has_attacker_too_close_to_defense_area();
    event_.attacker_too_close_to_defense_area_ = attacker_too_close_to_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_too_close_to_defense_area)
}

// optional .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
bool GameEvent::has_bot_interfered_placement() const {
  return event_case() == kBotInterferedPlacement;
}
void GameEvent::set_has_bot_interfered_placement() {
  _oneof_case_[0] = kBotInterferedPlacement;
}
void GameEvent::clear_bot_interfered_placement() {
  if (has_bot_interfered_placement()) {
    delete event_.bot_interfered_placement_;
    clear_has_event();
  }
}
 const ::GameEvent_BotInterferedPlacement& GameEvent::bot_interfered_placement() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_interfered_placement)
  return has_bot_interfered_placement()
      ? *event_.bot_interfered_placement_
      : ::GameEvent_BotInterferedPlacement::default_instance();
}
::GameEvent_BotInterferedPlacement* GameEvent::mutable_bot_interfered_placement() {
  if (!has_bot_interfered_placement()) {
    clear_event();
    set_has_bot_interfered_placement();
    event_.bot_interfered_placement_ = new ::GameEvent_BotInterferedPlacement;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_interfered_placement)
  return event_.bot_interfered_placement_;
}
::GameEvent_BotInterferedPlacement* GameEvent::release_bot_interfered_placement() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_interfered_placement)
  if (has_bot_interfered_placement()) {
    clear_has_event();
    ::GameEvent_BotInterferedPlacement* temp = event_.bot_interfered_placement_;
    event_.bot_interfered_placement_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_interfered_placement(::GameEvent_BotInterferedPlacement* bot_interfered_placement) {
  clear_event();
  if (bot_interfered_placement) {
    set_has_bot_interfered_placement();
    event_.bot_interfered_placement_ = bot_interfered_placement;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_interfered_placement)
}

// optional .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
bool GameEvent::has_bot_crash_drawn() const {
  return event_case() == kBotCrashDrawn;
}
void GameEvent::set_has_bot_crash_drawn() {
  _oneof_case_[0] = kBotCrashDrawn;
}
void GameEvent::clear_bot_crash_drawn() {
  if (has_bot_crash_drawn()) {
    delete event_.bot_crash_drawn_;
    clear_has_event();
  }
}
 const ::GameEvent_BotCrashDrawn& GameEvent::bot_crash_drawn() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_crash_drawn)
  return has_bot_crash_drawn()
      ? *event_.bot_crash_drawn_
      : ::GameEvent_BotCrashDrawn::default_instance();
}
::GameEvent_BotCrashDrawn* GameEvent::mutable_bot_crash_drawn() {
  if (!has_bot_crash_drawn()) {
    clear_event();
    set_has_bot_crash_drawn();
    event_.bot_crash_drawn_ = new ::GameEvent_BotCrashDrawn;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_crash_drawn)
  return event_.bot_crash_drawn_;
}
::GameEvent_BotCrashDrawn* GameEvent::release_bot_crash_drawn() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_crash_drawn)
  if (has_bot_crash_drawn()) {
    clear_has_event();
    ::GameEvent_BotCrashDrawn* temp = event_.bot_crash_drawn_;
    event_.bot_crash_drawn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_crash_drawn(::GameEvent_BotCrashDrawn* bot_crash_drawn) {
  clear_event();
  if (bot_crash_drawn) {
    set_has_bot_crash_drawn();
    event_.bot_crash_drawn_ = bot_crash_drawn;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_drawn)
}

// optional .GameEvent.BotCrashUnique bot_crash_unique = 22;
bool GameEvent::has_bot_crash_unique() const {
  return event_case() == kBotCrashUnique;
}
void GameEvent::set_has_bot_crash_unique() {
  _oneof_case_[0] = kBotCrashUnique;
}
void GameEvent::clear_bot_crash_unique() {
  if (has_bot_crash_unique()) {
    delete event_.bot_crash_unique_;
    clear_has_event();
  }
}
 const ::GameEvent_BotCrashUnique& GameEvent::bot_crash_unique() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_crash_unique)
  return has_bot_crash_unique()
      ? *event_.bot_crash_unique_
      : ::GameEvent_BotCrashUnique::default_instance();
}
::GameEvent_BotCrashUnique* GameEvent::mutable_bot_crash_unique() {
  if (!has_bot_crash_unique()) {
    clear_event();
    set_has_bot_crash_unique();
    event_.bot_crash_unique_ = new ::GameEvent_BotCrashUnique;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_crash_unique)
  return event_.bot_crash_unique_;
}
::GameEvent_BotCrashUnique* GameEvent::release_bot_crash_unique() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_crash_unique)
  if (has_bot_crash_unique()) {
    clear_has_event();
    ::GameEvent_BotCrashUnique* temp = event_.bot_crash_unique_;
    event_.bot_crash_unique_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique) {
  clear_event();
  if (bot_crash_unique) {
    set_has_bot_crash_unique();
    event_.bot_crash_unique_ = bot_crash_unique;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique)
}

// optional .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23;
bool GameEvent::has_bot_crash_unique_skipped() const {
  return event_case() == kBotCrashUniqueSkipped;
}
void GameEvent::set_has_bot_crash_unique_skipped() {
  _oneof_case_[0] = kBotCrashUniqueSkipped;
}
void GameEvent::clear_bot_crash_unique_skipped() {
  if (has_bot_crash_unique_skipped()) {
    delete event_.bot_crash_unique_skipped_;
    clear_has_event();
  }
}
 const ::GameEvent_BotCrashUnique& GameEvent::bot_crash_unique_skipped() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_crash_unique_skipped)
  return has_bot_crash_unique_skipped()
      ? *event_.bot_crash_unique_skipped_
      : ::GameEvent_BotCrashUnique::default_instance();
}
::GameEvent_BotCrashUnique* GameEvent::mutable_bot_crash_unique_skipped() {
  if (!has_bot_crash_unique_skipped()) {
    clear_event();
    set_has_bot_crash_unique_skipped();
    event_.bot_crash_unique_skipped_ = new ::GameEvent_BotCrashUnique;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_crash_unique_skipped)
  return event_.bot_crash_unique_skipped_;
}
::GameEvent_BotCrashUnique* GameEvent::release_bot_crash_unique_skipped() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_crash_unique_skipped)
  if (has_bot_crash_unique_skipped()) {
    clear_has_event();
    ::GameEvent_BotCrashUnique* temp = event_.bot_crash_unique_skipped_;
    event_.bot_crash_unique_skipped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_crash_unique_skipped(::GameEvent_BotCrashUnique* bot_crash_unique_skipped) {
  clear_event();
  if (bot_crash_unique_skipped) {
    set_has_bot_crash_unique_skipped();
    event_.bot_crash_unique_skipped_ = bot_crash_unique_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique_skipped)
}

// optional .GameEvent.BotPushedBot bot_pushed_bot = 24;
bool GameEvent::has_bot_pushed_bot() const {
  return event_case() == kBotPushedBot;
}
void GameEvent::set_has_bot_pushed_bot() {
  _oneof_case_[0] = kBotPushedBot;
}
void GameEvent::clear_bot_pushed_bot() {
  if (has_bot_pushed_bot()) {
    delete event_.bot_pushed_bot_;
    clear_has_event();
  }
}
 const ::GameEvent_BotPushedBot& GameEvent::bot_pushed_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_pushed_bot)
  return has_bot_pushed_bot()
      ? *event_.bot_pushed_bot_
      : ::GameEvent_BotPushedBot::default_instance();
}
::GameEvent_BotPushedBot* GameEvent::mutable_bot_pushed_bot() {
  if (!has_bot_pushed_bot()) {
    clear_event();
    set_has_bot_pushed_bot();
    event_.bot_pushed_bot_ = new ::GameEvent_BotPushedBot;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_pushed_bot)
  return event_.bot_pushed_bot_;
}
::GameEvent_BotPushedBot* GameEvent::release_bot_pushed_bot() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_pushed_bot)
  if (has_bot_pushed_bot()) {
    clear_has_event();
    ::GameEvent_BotPushedBot* temp = event_.bot_pushed_bot_;
    event_.bot_pushed_bot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot) {
  clear_event();
  if (bot_pushed_bot) {
    set_has_bot_pushed_bot();
    event_.bot_pushed_bot_ = bot_pushed_bot;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot)
}

// optional .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25;
bool GameEvent::has_bot_pushed_bot_skipped() const {
  return event_case() == kBotPushedBotSkipped;
}
void GameEvent::set_has_bot_pushed_bot_skipped() {
  _oneof_case_[0] = kBotPushedBotSkipped;
}
void GameEvent::clear_bot_pushed_bot_skipped() {
  if (has_bot_pushed_bot_skipped()) {
    delete event_.bot_pushed_bot_skipped_;
    clear_has_event();
  }
}
 const ::GameEvent_BotPushedBot& GameEvent::bot_pushed_bot_skipped() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_pushed_bot_skipped)
  return has_bot_pushed_bot_skipped()
      ? *event_.bot_pushed_bot_skipped_
      : ::GameEvent_BotPushedBot::default_instance();
}
::GameEvent_BotPushedBot* GameEvent::mutable_bot_pushed_bot_skipped() {
  if (!has_bot_pushed_bot_skipped()) {
    clear_event();
    set_has_bot_pushed_bot_skipped();
    event_.bot_pushed_bot_skipped_ = new ::GameEvent_BotPushedBot;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_pushed_bot_skipped)
  return event_.bot_pushed_bot_skipped_;
}
::GameEvent_BotPushedBot* GameEvent::release_bot_pushed_bot_skipped() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_pushed_bot_skipped)
  if (has_bot_pushed_bot_skipped()) {
    clear_has_event();
    ::GameEvent_BotPushedBot* temp = event_.bot_pushed_bot_skipped_;
    event_.bot_pushed_bot_skipped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_pushed_bot_skipped(::GameEvent_BotPushedBot* bot_pushed_bot_skipped) {
  clear_event();
  if (bot_pushed_bot_skipped) {
    set_has_bot_pushed_bot_skipped();
    event_.bot_pushed_bot_skipped_ = bot_pushed_bot_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot_skipped)
}

// optional .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
bool GameEvent::has_bot_held_ball_deliberately() const {
  return event_case() == kBotHeldBallDeliberately;
}
void GameEvent::set_has_bot_held_ball_deliberately() {
  _oneof_case_[0] = kBotHeldBallDeliberately;
}
void GameEvent::clear_bot_held_ball_deliberately() {
  if (has_bot_held_ball_deliberately()) {
    delete event_.bot_held_ball_deliberately_;
    clear_has_event();
  }
}
 const ::GameEvent_BotHeldBallDeliberately& GameEvent::bot_held_ball_deliberately() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_held_ball_deliberately)
  return has_bot_held_ball_deliberately()
      ? *event_.bot_held_ball_deliberately_
      : ::GameEvent_BotHeldBallDeliberately::default_instance();
}
::GameEvent_BotHeldBallDeliberately* GameEvent::mutable_bot_held_ball_deliberately() {
  if (!has_bot_held_ball_deliberately()) {
    clear_event();
    set_has_bot_held_ball_deliberately();
    event_.bot_held_ball_deliberately_ = new ::GameEvent_BotHeldBallDeliberately;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_held_ball_deliberately)
  return event_.bot_held_ball_deliberately_;
}
::GameEvent_BotHeldBallDeliberately* GameEvent::release_bot_held_ball_deliberately() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_held_ball_deliberately)
  if (has_bot_held_ball_deliberately()) {
    clear_has_event();
    ::GameEvent_BotHeldBallDeliberately* temp = event_.bot_held_ball_deliberately_;
    event_.bot_held_ball_deliberately_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_held_ball_deliberately(::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately) {
  clear_event();
  if (bot_held_ball_deliberately) {
    set_has_bot_held_ball_deliberately();
    event_.bot_held_ball_deliberately_ = bot_held_ball_deliberately;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_held_ball_deliberately)
}

// optional .GameEvent.BotTippedOver bot_tipped_over = 27;
bool GameEvent::has_bot_tipped_over() const {
  return event_case() == kBotTippedOver;
}
void GameEvent::set_has_bot_tipped_over() {
  _oneof_case_[0] = kBotTippedOver;
}
void GameEvent::clear_bot_tipped_over() {
  if (has_bot_tipped_over()) {
    delete event_.bot_tipped_over_;
    clear_has_event();
  }
}
 const ::GameEvent_BotTippedOver& GameEvent::bot_tipped_over() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_tipped_over)
  return has_bot_tipped_over()
      ? *event_.bot_tipped_over_
      : ::GameEvent_BotTippedOver::default_instance();
}
::GameEvent_BotTippedOver* GameEvent::mutable_bot_tipped_over() {
  if (!has_bot_tipped_over()) {
    clear_event();
    set_has_bot_tipped_over();
    event_.bot_tipped_over_ = new ::GameEvent_BotTippedOver;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_tipped_over)
  return event_.bot_tipped_over_;
}
::GameEvent_BotTippedOver* GameEvent::release_bot_tipped_over() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_tipped_over)
  if (has_bot_tipped_over()) {
    clear_has_event();
    ::GameEvent_BotTippedOver* temp = event_.bot_tipped_over_;
    event_.bot_tipped_over_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_tipped_over(::GameEvent_BotTippedOver* bot_tipped_over) {
  clear_event();
  if (bot_tipped_over) {
    set_has_bot_tipped_over();
    event_.bot_tipped_over_ = bot_tipped_over;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_tipped_over)
}

// optional .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
bool GameEvent::has_bot_too_fast_in_stop() const {
  return event_case() == kBotTooFastInStop;
}
void GameEvent::set_has_bot_too_fast_in_stop() {
  _oneof_case_[0] = kBotTooFastInStop;
}
void GameEvent::clear_bot_too_fast_in_stop() {
  if (has_bot_too_fast_in_stop()) {
    delete event_.bot_too_fast_in_stop_;
    clear_has_event();
  }
}
 const ::GameEvent_BotTooFastInStop& GameEvent::bot_too_fast_in_stop() const {
  // @@protoc_insertion_point(field_get:GameEvent.bot_too_fast_in_stop)
  return has_bot_too_fast_in_stop()
      ? *event_.bot_too_fast_in_stop_
      : ::GameEvent_BotTooFastInStop::default_instance();
}
::GameEvent_BotTooFastInStop* GameEvent::mutable_bot_too_fast_in_stop() {
  if (!has_bot_too_fast_in_stop()) {
    clear_event();
    set_has_bot_too_fast_in_stop();
    event_.bot_too_fast_in_stop_ = new ::GameEvent_BotTooFastInStop;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_too_fast_in_stop)
  return event_.bot_too_fast_in_stop_;
}
::GameEvent_BotTooFastInStop* GameEvent::release_bot_too_fast_in_stop() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_too_fast_in_stop)
  if (has_bot_too_fast_in_stop()) {
    clear_has_event();
    ::GameEvent_BotTooFastInStop* temp = event_.bot_too_fast_in_stop_;
    event_.bot_too_fast_in_stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_bot_too_fast_in_stop(::GameEvent_BotTooFastInStop* bot_too_fast_in_stop) {
  clear_event();
  if (bot_too_fast_in_stop) {
    set_has_bot_too_fast_in_stop();
    event_.bot_too_fast_in_stop_ = bot_too_fast_in_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_too_fast_in_stop)
}

// optional .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
bool GameEvent::has_defender_too_close_to_kick_point() const {
  return event_case() == kDefenderTooCloseToKickPoint;
}
void GameEvent::set_has_defender_too_close_to_kick_point() {
  _oneof_case_[0] = kDefenderTooCloseToKickPoint;
}
void GameEvent::clear_defender_too_close_to_kick_point() {
  if (has_defender_too_close_to_kick_point()) {
    delete event_.defender_too_close_to_kick_point_;
    clear_has_event();
  }
}
 const ::GameEvent_DefenderTooCloseToKickPoint& GameEvent::defender_too_close_to_kick_point() const {
  // @@protoc_insertion_point(field_get:GameEvent.defender_too_close_to_kick_point)
  return has_defender_too_close_to_kick_point()
      ? *event_.defender_too_close_to_kick_point_
      : ::GameEvent_DefenderTooCloseToKickPoint::default_instance();
}
::GameEvent_DefenderTooCloseToKickPoint* GameEvent::mutable_defender_too_close_to_kick_point() {
  if (!has_defender_too_close_to_kick_point()) {
    clear_event();
    set_has_defender_too_close_to_kick_point();
    event_.defender_too_close_to_kick_point_ = new ::GameEvent_DefenderTooCloseToKickPoint;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.defender_too_close_to_kick_point)
  return event_.defender_too_close_to_kick_point_;
}
::GameEvent_DefenderTooCloseToKickPoint* GameEvent::release_defender_too_close_to_kick_point() {
  // @@protoc_insertion_point(field_release:GameEvent.defender_too_close_to_kick_point)
  if (has_defender_too_close_to_kick_point()) {
    clear_has_event();
    ::GameEvent_DefenderTooCloseToKickPoint* temp = event_.defender_too_close_to_kick_point_;
    event_.defender_too_close_to_kick_point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_defender_too_close_to_kick_point(::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point) {
  clear_event();
  if (defender_too_close_to_kick_point) {
    set_has_defender_too_close_to_kick_point();
    event_.defender_too_close_to_kick_point_ = defender_too_close_to_kick_point;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_too_close_to_kick_point)
}

// optional .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30;
bool GameEvent::has_defender_in_defense_area_partially() const {
  return event_case() == kDefenderInDefenseAreaPartially;
}
void GameEvent::set_has_defender_in_defense_area_partially() {
  _oneof_case_[0] = kDefenderInDefenseAreaPartially;
}
void GameEvent::clear_defender_in_defense_area_partially() {
  if (has_defender_in_defense_area_partially()) {
    delete event_.defender_in_defense_area_partially_;
    clear_has_event();
  }
}
 const ::GameEvent_DefenderInDefenseAreaPartially& GameEvent::defender_in_defense_area_partially() const {
  // @@protoc_insertion_point(field_get:GameEvent.defender_in_defense_area_partially)
  return has_defender_in_defense_area_partially()
      ? *event_.defender_in_defense_area_partially_
      : ::GameEvent_DefenderInDefenseAreaPartially::default_instance();
}
::GameEvent_DefenderInDefenseAreaPartially* GameEvent::mutable_defender_in_defense_area_partially() {
  if (!has_defender_in_defense_area_partially()) {
    clear_event();
    set_has_defender_in_defense_area_partially();
    event_.defender_in_defense_area_partially_ = new ::GameEvent_DefenderInDefenseAreaPartially;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.defender_in_defense_area_partially)
  return event_.defender_in_defense_area_partially_;
}
::GameEvent_DefenderInDefenseAreaPartially* GameEvent::release_defender_in_defense_area_partially() {
  // @@protoc_insertion_point(field_release:GameEvent.defender_in_defense_area_partially)
  if (has_defender_in_defense_area_partially()) {
    clear_has_event();
    ::GameEvent_DefenderInDefenseAreaPartially* temp = event_.defender_in_defense_area_partially_;
    event_.defender_in_defense_area_partially_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_defender_in_defense_area_partially(::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially) {
  clear_event();
  if (defender_in_defense_area_partially) {
    set_has_defender_in_defense_area_partially();
    event_.defender_in_defense_area_partially_ = defender_in_defense_area_partially;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area_partially)
}

// optional .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
bool GameEvent::has_defender_in_defense_area() const {
  return event_case() == kDefenderInDefenseArea;
}
void GameEvent::set_has_defender_in_defense_area() {
  _oneof_case_[0] = kDefenderInDefenseArea;
}
void GameEvent::clear_defender_in_defense_area() {
  if (has_defender_in_defense_area()) {
    delete event_.defender_in_defense_area_;
    clear_has_event();
  }
}
 const ::GameEvent_DefenderInDefenseArea& GameEvent::defender_in_defense_area() const {
  // @@protoc_insertion_point(field_get:GameEvent.defender_in_defense_area)
  return has_defender_in_defense_area()
      ? *event_.defender_in_defense_area_
      : ::GameEvent_DefenderInDefenseArea::default_instance();
}
::GameEvent_DefenderInDefenseArea* GameEvent::mutable_defender_in_defense_area() {
  if (!has_defender_in_defense_area()) {
    clear_event();
    set_has_defender_in_defense_area();
    event_.defender_in_defense_area_ = new ::GameEvent_DefenderInDefenseArea;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.defender_in_defense_area)
  return event_.defender_in_defense_area_;
}
::GameEvent_DefenderInDefenseArea* GameEvent::release_defender_in_defense_area() {
  // @@protoc_insertion_point(field_release:GameEvent.defender_in_defense_area)
  if (has_defender_in_defense_area()) {
    clear_has_event();
    ::GameEvent_DefenderInDefenseArea* temp = event_.defender_in_defense_area_;
    event_.defender_in_defense_area_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_defender_in_defense_area(::GameEvent_DefenderInDefenseArea* defender_in_defense_area) {
  clear_event();
  if (defender_in_defense_area) {
    set_has_defender_in_defense_area();
    event_.defender_in_defense_area_ = defender_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area)
}

// optional .GameEvent.MultipleCards multiple_cards = 32;
bool GameEvent::has_multiple_cards() const {
  return event_case() == kMultipleCards;
}
void GameEvent::set_has_multiple_cards() {
  _oneof_case_[0] = kMultipleCards;
}
void GameEvent::clear_multiple_cards() {
  if (has_multiple_cards()) {
    delete event_.multiple_cards_;
    clear_has_event();
  }
}
 const ::GameEvent_MultipleCards& GameEvent::multiple_cards() const {
  // @@protoc_insertion_point(field_get:GameEvent.multiple_cards)
  return has_multiple_cards()
      ? *event_.multiple_cards_
      : ::GameEvent_MultipleCards::default_instance();
}
::GameEvent_MultipleCards* GameEvent::mutable_multiple_cards() {
  if (!has_multiple_cards()) {
    clear_event();
    set_has_multiple_cards();
    event_.multiple_cards_ = new ::GameEvent_MultipleCards;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.multiple_cards)
  return event_.multiple_cards_;
}
::GameEvent_MultipleCards* GameEvent::release_multiple_cards() {
  // @@protoc_insertion_point(field_release:GameEvent.multiple_cards)
  if (has_multiple_cards()) {
    clear_has_event();
    ::GameEvent_MultipleCards* temp = event_.multiple_cards_;
    event_.multiple_cards_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_multiple_cards(::GameEvent_MultipleCards* multiple_cards) {
  clear_event();
  if (multiple_cards) {
    set_has_multiple_cards();
    event_.multiple_cards_ = multiple_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_cards)
}

// optional .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33;
bool GameEvent::has_multiple_placement_failures() const {
  return event_case() == kMultiplePlacementFailures;
}
void GameEvent::set_has_multiple_placement_failures() {
  _oneof_case_[0] = kMultiplePlacementFailures;
}
void GameEvent::clear_multiple_placement_failures() {
  if (has_multiple_placement_failures()) {
    delete event_.multiple_placement_failures_;
    clear_has_event();
  }
}
 const ::GameEvent_MultiplePlacementFailures& GameEvent::multiple_placement_failures() const {
  // @@protoc_insertion_point(field_get:GameEvent.multiple_placement_failures)
  return has_multiple_placement_failures()
      ? *event_.multiple_placement_failures_
      : ::GameEvent_MultiplePlacementFailures::default_instance();
}
::GameEvent_MultiplePlacementFailures* GameEvent::mutable_multiple_placement_failures() {
  if (!has_multiple_placement_failures()) {
    clear_event();
    set_has_multiple_placement_failures();
    event_.multiple_placement_failures_ = new ::GameEvent_MultiplePlacementFailures;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.multiple_placement_failures)
  return event_.multiple_placement_failures_;
}
::GameEvent_MultiplePlacementFailures* GameEvent::release_multiple_placement_failures() {
  // @@protoc_insertion_point(field_release:GameEvent.multiple_placement_failures)
  if (has_multiple_placement_failures()) {
    clear_has_event();
    ::GameEvent_MultiplePlacementFailures* temp = event_.multiple_placement_failures_;
    event_.multiple_placement_failures_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_multiple_placement_failures(::GameEvent_MultiplePlacementFailures* multiple_placement_failures) {
  clear_event();
  if (multiple_placement_failures) {
    set_has_multiple_placement_failures();
    event_.multiple_placement_failures_ = multiple_placement_failures;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_placement_failures)
}

// optional .GameEvent.MultipleFouls multiple_fouls = 34;
bool GameEvent::has_multiple_fouls() const {
  return event_case() == kMultipleFouls;
}
void GameEvent::set_has_multiple_fouls() {
  _oneof_case_[0] = kMultipleFouls;
}
void GameEvent::clear_multiple_fouls() {
  if (has_multiple_fouls()) {
    delete event_.multiple_fouls_;
    clear_has_event();
  }
}
 const ::GameEvent_MultipleFouls& GameEvent::multiple_fouls() const {
  // @@protoc_insertion_point(field_get:GameEvent.multiple_fouls)
  return has_multiple_fouls()
      ? *event_.multiple_fouls_
      : ::GameEvent_MultipleFouls::default_instance();
}
::GameEvent_MultipleFouls* GameEvent::mutable_multiple_fouls() {
  if (!has_multiple_fouls()) {
    clear_event();
    set_has_multiple_fouls();
    event_.multiple_fouls_ = new ::GameEvent_MultipleFouls;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.multiple_fouls)
  return event_.multiple_fouls_;
}
::GameEvent_MultipleFouls* GameEvent::release_multiple_fouls() {
  // @@protoc_insertion_point(field_release:GameEvent.multiple_fouls)
  if (has_multiple_fouls()) {
    clear_has_event();
    ::GameEvent_MultipleFouls* temp = event_.multiple_fouls_;
    event_.multiple_fouls_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_multiple_fouls(::GameEvent_MultipleFouls* multiple_fouls) {
  clear_event();
  if (multiple_fouls) {
    set_has_multiple_fouls();
    event_.multiple_fouls_ = multiple_fouls;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_fouls)
}

// optional .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
bool GameEvent::has_unsporting_behavior_minor() const {
  return event_case() == kUnsportingBehaviorMinor;
}
void GameEvent::set_has_unsporting_behavior_minor() {
  _oneof_case_[0] = kUnsportingBehaviorMinor;
}
void GameEvent::clear_unsporting_behavior_minor() {
  if (has_unsporting_behavior_minor()) {
    delete event_.unsporting_behavior_minor_;
    clear_has_event();
  }
}
 const ::GameEvent_UnsportingBehaviorMinor& GameEvent::unsporting_behavior_minor() const {
  // @@protoc_insertion_point(field_get:GameEvent.unsporting_behavior_minor)
  return has_unsporting_behavior_minor()
      ? *event_.unsporting_behavior_minor_
      : ::GameEvent_UnsportingBehaviorMinor::default_instance();
}
::GameEvent_UnsportingBehaviorMinor* GameEvent::mutable_unsporting_behavior_minor() {
  if (!has_unsporting_behavior_minor()) {
    clear_event();
    set_has_unsporting_behavior_minor();
    event_.unsporting_behavior_minor_ = new ::GameEvent_UnsportingBehaviorMinor;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.unsporting_behavior_minor)
  return event_.unsporting_behavior_minor_;
}
::GameEvent_UnsportingBehaviorMinor* GameEvent::release_unsporting_behavior_minor() {
  // @@protoc_insertion_point(field_release:GameEvent.unsporting_behavior_minor)
  if (has_unsporting_behavior_minor()) {
    clear_has_event();
    ::GameEvent_UnsportingBehaviorMinor* temp = event_.unsporting_behavior_minor_;
    event_.unsporting_behavior_minor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_unsporting_behavior_minor(::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor) {
  clear_event();
  if (unsporting_behavior_minor) {
    set_has_unsporting_behavior_minor();
    event_.unsporting_behavior_minor_ = unsporting_behavior_minor;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_minor)
}

// optional .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
bool GameEvent::has_unsporting_behavior_major() const {
  return event_case() == kUnsportingBehaviorMajor;
}
void GameEvent::set_has_unsporting_behavior_major() {
  _oneof_case_[0] = kUnsportingBehaviorMajor;
}
void GameEvent::clear_unsporting_behavior_major() {
  if (has_unsporting_behavior_major()) {
    delete event_.unsporting_behavior_major_;
    clear_has_event();
  }
}
 const ::GameEvent_UnsportingBehaviorMajor& GameEvent::unsporting_behavior_major() const {
  // @@protoc_insertion_point(field_get:GameEvent.unsporting_behavior_major)
  return has_unsporting_behavior_major()
      ? *event_.unsporting_behavior_major_
      : ::GameEvent_UnsportingBehaviorMajor::default_instance();
}
::GameEvent_UnsportingBehaviorMajor* GameEvent::mutable_unsporting_behavior_major() {
  if (!has_unsporting_behavior_major()) {
    clear_event();
    set_has_unsporting_behavior_major();
    event_.unsporting_behavior_major_ = new ::GameEvent_UnsportingBehaviorMajor;
  }
  // @@protoc_insertion_point(field_mutable:GameEvent.unsporting_behavior_major)
  return event_.unsporting_behavior_major_;
}
::GameEvent_UnsportingBehaviorMajor* GameEvent::release_unsporting_behavior_major() {
  // @@protoc_insertion_point(field_release:GameEvent.unsporting_behavior_major)
  if (has_unsporting_behavior_major()) {
    clear_has_event();
    ::GameEvent_UnsportingBehaviorMajor* temp = event_.unsporting_behavior_major_;
    event_.unsporting_behavior_major_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GameEvent::set_allocated_unsporting_behavior_major(::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major) {
  clear_event();
  if (unsporting_behavior_major) {
    set_has_unsporting_behavior_major();
    event_.unsporting_behavior_major_ = unsporting_behavior_major;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_major)
}

bool GameEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
void GameEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
GameEvent::EventCase GameEvent::event_case() const {
  return GameEvent::EventCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
