// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_rec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zss_rec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZSS {
namespace Protocol {
class RecMessagesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecMessages> {
} _RecMessages_default_instance_;
class RecMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecMessage> {
} _RecMessage_default_instance_;
class SelectedAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectedArea> {
} _SelectedArea_default_instance_;
class MaintainVisionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MaintainVision> {
} _MaintainVision_default_instance_;
class TeamRobotMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TeamRobotMsg> {
} _TeamRobotMsg_default_instance_;
class Robot4RecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Robot4Rec> {
} _Robot4Rec_default_instance_;
class Balls4RecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Balls4Rec> {
} _Balls4Rec_default_instance_;
class Ball4RecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ball4Rec> {
} _Ball4Rec_default_instance_;

namespace protobuf_zss_5frec_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessages, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessages, recmsgs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessage, ctrlc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessage, selectedarea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessage, maintainvision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecMessage, debugmsgs_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedArea, maxx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedArea, maxy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedArea, minx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedArea, miny_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainVision, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainVision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainVision, lasttouch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainVision, lasttouchteam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainVision, processmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainVision, maintain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainVision, balls_),
  1,
  2,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRobotMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRobotMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRobotMsg, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRobotMsg, robot_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot4Rec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot4Rec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot4Rec, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot4Rec, posx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot4Rec, posy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot4Rec, angle_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balls4Rec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balls4Rec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balls4Rec, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balls4Rec, ball_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball4Rec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball4Rec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball4Rec, posx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball4Rec, posy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball4Rec, valid_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(RecMessages)},
  { 7, 16, sizeof(RecMessage)},
  { 20, 29, sizeof(SelectedArea)},
  { 33, 43, sizeof(MaintainVision)},
  { 48, 55, sizeof(TeamRobotMsg)},
  { 57, 66, sizeof(Robot4Rec)},
  { 70, 77, sizeof(Balls4Rec)},
  { 79, 87, sizeof(Ball4Rec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecMessages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectedArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaintainVision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRobotMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Robot4Rec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Balls4Rec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ball4Rec_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zss_rec.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _RecMessages_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RecMessage_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SelectedArea_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MaintainVision_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TeamRobotMsg_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Robot4Rec_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Balls4Rec_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Ball4Rec_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ZSS::Protocol::protobuf_zss_5fdebug_2eproto::InitDefaults();
  _RecMessages_default_instance_.DefaultConstruct();
  _RecMessage_default_instance_.DefaultConstruct();
  _SelectedArea_default_instance_.DefaultConstruct();
  _MaintainVision_default_instance_.DefaultConstruct();
  _TeamRobotMsg_default_instance_.DefaultConstruct();
  _Robot4Rec_default_instance_.DefaultConstruct();
  _Balls4Rec_default_instance_.DefaultConstruct();
  _Ball4Rec_default_instance_.DefaultConstruct();
  _RecMessage_default_instance_.get_mutable()->selectedarea_ = const_cast< ::ZSS::Protocol::SelectedArea*>(
      ::ZSS::Protocol::SelectedArea::internal_default_instance());
  _RecMessage_default_instance_.get_mutable()->maintainvision_ = const_cast< ::ZSS::Protocol::MaintainVision*>(
      ::ZSS::Protocol::MaintainVision::internal_default_instance());
  _MaintainVision_default_instance_.get_mutable()->balls_ = const_cast< ::ZSS::Protocol::Balls4Rec*>(
      ::ZSS::Protocol::Balls4Rec::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rzss_rec.proto\022\014ZSS.Protocol\032\017zss_debug"
      ".proto\"8\n\013RecMessages\022)\n\007recMsgs\030\001 \003(\0132\030"
      ".ZSS.Protocol.RecMessage\"\260\001\n\nRecMessage\022"
      "\r\n\005ctrlC\030\001 \002(\010\0220\n\014selectedArea\030\002 \002(\0132\032.Z"
      "SS.Protocol.SelectedArea\0224\n\016maintainVisi"
      "on\030\003 \002(\0132\034.ZSS.Protocol.MaintainVision\022+"
      "\n\tdebugMsgs\030\004 \003(\0132\030.ZSS.Protocol.Debug_M"
      "sgs\"F\n\014SelectedArea\022\014\n\004maxX\030\001 \002(\002\022\014\n\004max"
      "Y\030\002 \002(\002\022\014\n\004minX\030\003 \002(\002\022\014\n\004minY\030\004 \002(\002\"\300\001\n\016"
      "MaintainVision\022\021\n\tlastTouch\030\001 \002(\005\022\025\n\rlas"
      "tTouchTeam\030\002 \002(\005\022.\n\nprocessMsg\030\003 \003(\0132\032.Z"
      "SS.Protocol.TeamRobotMsg\022,\n\010maintain\030\004 \003"
      "(\0132\032.ZSS.Protocol.TeamRobotMsg\022&\n\005balls\030"
      "\005 \002(\0132\027.ZSS.Protocol.Balls4Rec\"D\n\014TeamRo"
      "botMsg\022\014\n\004size\030\001 \002(\005\022&\n\005robot\030\002 \003(\0132\027.ZS"
      "S.Protocol.Robot4Rec\"B\n\tRobot4Rec\022\n\n\002id\030"
      "\001 \001(\005\022\014\n\004posX\030\002 \002(\001\022\014\n\004posY\030\003 \002(\001\022\r\n\005ang"
      "le\030\004 \002(\001\"\?\n\tBalls4Rec\022\014\n\004size\030\001 \002(\005\022$\n\004b"
      "all\030\002 \003(\0132\026.ZSS.Protocol.Ball4Rec\"5\n\010Bal"
      "l4Rec\022\014\n\004posX\030\001 \002(\001\022\014\n\004posY\030\002 \002(\001\022\r\n\005val"
      "id\030\003 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 808);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zss_rec.proto", &protobuf_RegisterTypes);
  ::ZSS::Protocol::protobuf_zss_5fdebug_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_zss_5frec_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecMessages::kRecMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecMessages::RecMessages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5frec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.RecMessages)
}
RecMessages::RecMessages(const RecMessages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      recmsgs_(from.recmsgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.RecMessages)
}

void RecMessages::SharedCtor() {
  _cached_size_ = 0;
}

RecMessages::~RecMessages() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.RecMessages)
  SharedDtor();
}

void RecMessages::SharedDtor() {
}

void RecMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecMessages::descriptor() {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecMessages& RecMessages::default_instance() {
  protobuf_zss_5frec_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecMessages* RecMessages::New(::google::protobuf::Arena* arena) const {
  RecMessages* n = new RecMessages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.RecMessages)
  recmsgs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.RecMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recmsgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.RecMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.RecMessages)
  return false;
#undef DO_
}

void RecMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.RecMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
  for (unsigned int i = 0, n = this->recmsgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recmsgs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.RecMessages)
}

::google::protobuf::uint8* RecMessages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.RecMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
  for (unsigned int i = 0, n = this->recmsgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->recmsgs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.RecMessages)
  return target;
}

size_t RecMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.RecMessages)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
  {
    unsigned int count = this->recmsgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recmsgs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.RecMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const RecMessages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecMessages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.RecMessages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.RecMessages)
    MergeFrom(*source);
  }
}

void RecMessages::MergeFrom(const RecMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.RecMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recmsgs_.MergeFrom(from.recmsgs_);
}

void RecMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.RecMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecMessages::CopyFrom(const RecMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.RecMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecMessages::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->recmsgs())) return false;
  return true;
}

void RecMessages::Swap(RecMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecMessages::InternalSwap(RecMessages* other) {
  recmsgs_.InternalSwap(&other->recmsgs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecMessages::GetMetadata() const {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecMessages

// repeated .ZSS.Protocol.RecMessage recMsgs = 1;
int RecMessages::recmsgs_size() const {
  return recmsgs_.size();
}
void RecMessages::clear_recmsgs() {
  recmsgs_.Clear();
}
const ::ZSS::Protocol::RecMessage& RecMessages::recmsgs(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_.Get(index);
}
::ZSS::Protocol::RecMessage* RecMessages::mutable_recmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_.Mutable(index);
}
::ZSS::Protocol::RecMessage* RecMessages::add_recmsgs() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::RecMessage >*
RecMessages::mutable_recmsgs() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.RecMessages.recMsgs)
  return &recmsgs_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::RecMessage >&
RecMessages::recmsgs() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecMessage::kCtrlCFieldNumber;
const int RecMessage::kSelectedAreaFieldNumber;
const int RecMessage::kMaintainVisionFieldNumber;
const int RecMessage::kDebugMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecMessage::RecMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5frec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.RecMessage)
}
RecMessage::RecMessage(const RecMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      debugmsgs_(from.debugmsgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selectedarea()) {
    selectedarea_ = new ::ZSS::Protocol::SelectedArea(*from.selectedarea_);
  } else {
    selectedarea_ = NULL;
  }
  if (from.has_maintainvision()) {
    maintainvision_ = new ::ZSS::Protocol::MaintainVision(*from.maintainvision_);
  } else {
    maintainvision_ = NULL;
  }
  ctrlc_ = from.ctrlc_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.RecMessage)
}

void RecMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&selectedarea_, 0, reinterpret_cast<char*>(&ctrlc_) -
    reinterpret_cast<char*>(&selectedarea_) + sizeof(ctrlc_));
}

RecMessage::~RecMessage() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.RecMessage)
  SharedDtor();
}

void RecMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete selectedarea_;
  }
  if (this != internal_default_instance()) {
    delete maintainvision_;
  }
}

void RecMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecMessage::descriptor() {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecMessage& RecMessage::default_instance() {
  protobuf_zss_5frec_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecMessage* RecMessage::New(::google::protobuf::Arena* arena) const {
  RecMessage* n = new RecMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.RecMessage)
  debugmsgs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_selectedarea()) {
      GOOGLE_DCHECK(selectedarea_ != NULL);
      selectedarea_->::ZSS::Protocol::SelectedArea::Clear();
    }
    if (has_maintainvision()) {
      GOOGLE_DCHECK(maintainvision_ != NULL);
      maintainvision_->::ZSS::Protocol::MaintainVision::Clear();
    }
  }
  ctrlc_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.RecMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ctrlC = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ctrlc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrlc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ZSS.Protocol.SelectedArea selectedArea = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selectedarea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ZSS.Protocol.MaintainVision maintainVision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maintainvision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_debugmsgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.RecMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.RecMessage)
  return false;
#undef DO_
}

void RecMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.RecMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool ctrlC = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ctrlc(), output);
  }

  // required .ZSS.Protocol.SelectedArea selectedArea = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->selectedarea_, output);
  }

  // required .ZSS.Protocol.MaintainVision maintainVision = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->maintainvision_, output);
  }

  // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
  for (unsigned int i = 0, n = this->debugmsgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->debugmsgs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.RecMessage)
}

::google::protobuf::uint8* RecMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.RecMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool ctrlC = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ctrlc(), target);
  }

  // required .ZSS.Protocol.SelectedArea selectedArea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->selectedarea_, deterministic, target);
  }

  // required .ZSS.Protocol.MaintainVision maintainVision = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->maintainvision_, deterministic, target);
  }

  // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
  for (unsigned int i = 0, n = this->debugmsgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->debugmsgs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.RecMessage)
  return target;
}

size_t RecMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.RecMessage)
  size_t total_size = 0;

  if (has_selectedarea()) {
    // required .ZSS.Protocol.SelectedArea selectedArea = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selectedarea_);
  }

  if (has_maintainvision()) {
    // required .ZSS.Protocol.MaintainVision maintainVision = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->maintainvision_);
  }

  if (has_ctrlc()) {
    // required bool ctrlC = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RecMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.RecMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ZSS.Protocol.SelectedArea selectedArea = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selectedarea_);

    // required .ZSS.Protocol.MaintainVision maintainVision = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->maintainvision_);

    // required bool ctrlC = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
  {
    unsigned int count = this->debugmsgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debugmsgs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.RecMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RecMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.RecMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.RecMessage)
    MergeFrom(*source);
  }
}

void RecMessage::MergeFrom(const RecMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.RecMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debugmsgs_.MergeFrom(from.debugmsgs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_selectedarea()->::ZSS::Protocol::SelectedArea::MergeFrom(from.selectedarea());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_maintainvision()->::ZSS::Protocol::MaintainVision::MergeFrom(from.maintainvision());
    }
    if (cached_has_bits & 0x00000004u) {
      ctrlc_ = from.ctrlc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.RecMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecMessage::CopyFrom(const RecMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.RecMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->debugmsgs())) return false;
  if (has_selectedarea()) {
    if (!this->selectedarea_->IsInitialized()) return false;
  }
  if (has_maintainvision()) {
    if (!this->maintainvision_->IsInitialized()) return false;
  }
  return true;
}

void RecMessage::Swap(RecMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecMessage::InternalSwap(RecMessage* other) {
  debugmsgs_.InternalSwap(&other->debugmsgs_);
  std::swap(selectedarea_, other->selectedarea_);
  std::swap(maintainvision_, other->maintainvision_);
  std::swap(ctrlc_, other->ctrlc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecMessage::GetMetadata() const {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecMessage

// required bool ctrlC = 1;
bool RecMessage::has_ctrlc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecMessage::set_has_ctrlc() {
  _has_bits_[0] |= 0x00000004u;
}
void RecMessage::clear_has_ctrlc() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecMessage::clear_ctrlc() {
  ctrlc_ = false;
  clear_has_ctrlc();
}
bool RecMessage::ctrlc() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.ctrlC)
  return ctrlc_;
}
void RecMessage::set_ctrlc(bool value) {
  set_has_ctrlc();
  ctrlc_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.RecMessage.ctrlC)
}

// required .ZSS.Protocol.SelectedArea selectedArea = 2;
bool RecMessage::has_selectedarea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecMessage::set_has_selectedarea() {
  _has_bits_[0] |= 0x00000001u;
}
void RecMessage::clear_has_selectedarea() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecMessage::clear_selectedarea() {
  if (selectedarea_ != NULL) selectedarea_->::ZSS::Protocol::SelectedArea::Clear();
  clear_has_selectedarea();
}
const ::ZSS::Protocol::SelectedArea& RecMessage::selectedarea() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.selectedArea)
  return selectedarea_ != NULL ? *selectedarea_
                         : *::ZSS::Protocol::SelectedArea::internal_default_instance();
}
::ZSS::Protocol::SelectedArea* RecMessage::mutable_selectedarea() {
  set_has_selectedarea();
  if (selectedarea_ == NULL) {
    selectedarea_ = new ::ZSS::Protocol::SelectedArea;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.selectedArea)
  return selectedarea_;
}
::ZSS::Protocol::SelectedArea* RecMessage::release_selectedarea() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.RecMessage.selectedArea)
  clear_has_selectedarea();
  ::ZSS::Protocol::SelectedArea* temp = selectedarea_;
  selectedarea_ = NULL;
  return temp;
}
void RecMessage::set_allocated_selectedarea(::ZSS::Protocol::SelectedArea* selectedarea) {
  delete selectedarea_;
  selectedarea_ = selectedarea;
  if (selectedarea) {
    set_has_selectedarea();
  } else {
    clear_has_selectedarea();
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.RecMessage.selectedArea)
}

// required .ZSS.Protocol.MaintainVision maintainVision = 3;
bool RecMessage::has_maintainvision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecMessage::set_has_maintainvision() {
  _has_bits_[0] |= 0x00000002u;
}
void RecMessage::clear_has_maintainvision() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecMessage::clear_maintainvision() {
  if (maintainvision_ != NULL) maintainvision_->::ZSS::Protocol::MaintainVision::Clear();
  clear_has_maintainvision();
}
const ::ZSS::Protocol::MaintainVision& RecMessage::maintainvision() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.maintainVision)
  return maintainvision_ != NULL ? *maintainvision_
                         : *::ZSS::Protocol::MaintainVision::internal_default_instance();
}
::ZSS::Protocol::MaintainVision* RecMessage::mutable_maintainvision() {
  set_has_maintainvision();
  if (maintainvision_ == NULL) {
    maintainvision_ = new ::ZSS::Protocol::MaintainVision;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.maintainVision)
  return maintainvision_;
}
::ZSS::Protocol::MaintainVision* RecMessage::release_maintainvision() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.RecMessage.maintainVision)
  clear_has_maintainvision();
  ::ZSS::Protocol::MaintainVision* temp = maintainvision_;
  maintainvision_ = NULL;
  return temp;
}
void RecMessage::set_allocated_maintainvision(::ZSS::Protocol::MaintainVision* maintainvision) {
  delete maintainvision_;
  maintainvision_ = maintainvision;
  if (maintainvision) {
    set_has_maintainvision();
  } else {
    clear_has_maintainvision();
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.RecMessage.maintainVision)
}

// repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
int RecMessage::debugmsgs_size() const {
  return debugmsgs_.size();
}
void RecMessage::clear_debugmsgs() {
  debugmsgs_.Clear();
}
const ::ZSS::Protocol::Debug_Msgs& RecMessage::debugmsgs(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_.Get(index);
}
::ZSS::Protocol::Debug_Msgs* RecMessage::mutable_debugmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_.Mutable(index);
}
::ZSS::Protocol::Debug_Msgs* RecMessage::add_debugmsgs() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >*
RecMessage::mutable_debugmsgs() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.RecMessage.debugMsgs)
  return &debugmsgs_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >&
RecMessage::debugmsgs() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectedArea::kMaxXFieldNumber;
const int SelectedArea::kMaxYFieldNumber;
const int SelectedArea::kMinXFieldNumber;
const int SelectedArea::kMinYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectedArea::SelectedArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5frec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.SelectedArea)
}
SelectedArea::SelectedArea(const SelectedArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maxx_, &from.maxx_,
    reinterpret_cast<char*>(&miny_) -
    reinterpret_cast<char*>(&maxx_) + sizeof(miny_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.SelectedArea)
}

void SelectedArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&maxx_, 0, reinterpret_cast<char*>(&miny_) -
    reinterpret_cast<char*>(&maxx_) + sizeof(miny_));
}

SelectedArea::~SelectedArea() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.SelectedArea)
  SharedDtor();
}

void SelectedArea::SharedDtor() {
}

void SelectedArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectedArea::descriptor() {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectedArea& SelectedArea::default_instance() {
  protobuf_zss_5frec_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectedArea* SelectedArea::New(::google::protobuf::Arena* arena) const {
  SelectedArea* n = new SelectedArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectedArea::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.SelectedArea)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&maxx_, 0, reinterpret_cast<char*>(&miny_) -
      reinterpret_cast<char*>(&maxx_) + sizeof(miny_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SelectedArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.SelectedArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float maxX = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_maxx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxY = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_maxy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float minX = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_minx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float minY = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_miny();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &miny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.SelectedArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.SelectedArea)
  return false;
#undef DO_
}

void SelectedArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.SelectedArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float maxX = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->maxx(), output);
  }

  // required float maxY = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxy(), output);
  }

  // required float minX = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minx(), output);
  }

  // required float minY = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->miny(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.SelectedArea)
}

::google::protobuf::uint8* SelectedArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.SelectedArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float maxX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->maxx(), target);
  }

  // required float maxY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxy(), target);
  }

  // required float minX = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minx(), target);
  }

  // required float minY = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->miny(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.SelectedArea)
  return target;
}

size_t SelectedArea::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.SelectedArea)
  size_t total_size = 0;

  if (has_maxx()) {
    // required float maxX = 1;
    total_size += 1 + 4;
  }

  if (has_maxy()) {
    // required float maxY = 2;
    total_size += 1 + 4;
  }

  if (has_minx()) {
    // required float minX = 3;
    total_size += 1 + 4;
  }

  if (has_miny()) {
    // required float minY = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SelectedArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.SelectedArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float maxX = 1;
    total_size += 1 + 4;

    // required float maxY = 2;
    total_size += 1 + 4;

    // required float minX = 3;
    total_size += 1 + 4;

    // required float minY = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectedArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.SelectedArea)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectedArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectedArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.SelectedArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.SelectedArea)
    MergeFrom(*source);
  }
}

void SelectedArea::MergeFrom(const SelectedArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.SelectedArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      maxx_ = from.maxx_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxy_ = from.maxy_;
    }
    if (cached_has_bits & 0x00000004u) {
      minx_ = from.minx_;
    }
    if (cached_has_bits & 0x00000008u) {
      miny_ = from.miny_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SelectedArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.SelectedArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectedArea::CopyFrom(const SelectedArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.SelectedArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectedArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void SelectedArea::Swap(SelectedArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectedArea::InternalSwap(SelectedArea* other) {
  std::swap(maxx_, other->maxx_);
  std::swap(maxy_, other->maxy_);
  std::swap(minx_, other->minx_);
  std::swap(miny_, other->miny_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectedArea::GetMetadata() const {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectedArea

// required float maxX = 1;
bool SelectedArea::has_maxx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SelectedArea::set_has_maxx() {
  _has_bits_[0] |= 0x00000001u;
}
void SelectedArea::clear_has_maxx() {
  _has_bits_[0] &= ~0x00000001u;
}
void SelectedArea::clear_maxx() {
  maxx_ = 0;
  clear_has_maxx();
}
float SelectedArea::maxx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.maxX)
  return maxx_;
}
void SelectedArea::set_maxx(float value) {
  set_has_maxx();
  maxx_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.maxX)
}

// required float maxY = 2;
bool SelectedArea::has_maxy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SelectedArea::set_has_maxy() {
  _has_bits_[0] |= 0x00000002u;
}
void SelectedArea::clear_has_maxy() {
  _has_bits_[0] &= ~0x00000002u;
}
void SelectedArea::clear_maxy() {
  maxy_ = 0;
  clear_has_maxy();
}
float SelectedArea::maxy() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.maxY)
  return maxy_;
}
void SelectedArea::set_maxy(float value) {
  set_has_maxy();
  maxy_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.maxY)
}

// required float minX = 3;
bool SelectedArea::has_minx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SelectedArea::set_has_minx() {
  _has_bits_[0] |= 0x00000004u;
}
void SelectedArea::clear_has_minx() {
  _has_bits_[0] &= ~0x00000004u;
}
void SelectedArea::clear_minx() {
  minx_ = 0;
  clear_has_minx();
}
float SelectedArea::minx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.minX)
  return minx_;
}
void SelectedArea::set_minx(float value) {
  set_has_minx();
  minx_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.minX)
}

// required float minY = 4;
bool SelectedArea::has_miny() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SelectedArea::set_has_miny() {
  _has_bits_[0] |= 0x00000008u;
}
void SelectedArea::clear_has_miny() {
  _has_bits_[0] &= ~0x00000008u;
}
void SelectedArea::clear_miny() {
  miny_ = 0;
  clear_has_miny();
}
float SelectedArea::miny() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.minY)
  return miny_;
}
void SelectedArea::set_miny(float value) {
  set_has_miny();
  miny_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.minY)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaintainVision::kLastTouchFieldNumber;
const int MaintainVision::kLastTouchTeamFieldNumber;
const int MaintainVision::kProcessMsgFieldNumber;
const int MaintainVision::kMaintainFieldNumber;
const int MaintainVision::kBallsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaintainVision::MaintainVision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5frec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.MaintainVision)
}
MaintainVision::MaintainVision(const MaintainVision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      processmsg_(from.processmsg_),
      maintain_(from.maintain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_balls()) {
    balls_ = new ::ZSS::Protocol::Balls4Rec(*from.balls_);
  } else {
    balls_ = NULL;
  }
  ::memcpy(&lasttouch_, &from.lasttouch_,
    reinterpret_cast<char*>(&lasttouchteam_) -
    reinterpret_cast<char*>(&lasttouch_) + sizeof(lasttouchteam_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.MaintainVision)
}

void MaintainVision::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&balls_, 0, reinterpret_cast<char*>(&lasttouchteam_) -
    reinterpret_cast<char*>(&balls_) + sizeof(lasttouchteam_));
}

MaintainVision::~MaintainVision() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.MaintainVision)
  SharedDtor();
}

void MaintainVision::SharedDtor() {
  if (this != internal_default_instance()) {
    delete balls_;
  }
}

void MaintainVision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaintainVision::descriptor() {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaintainVision& MaintainVision::default_instance() {
  protobuf_zss_5frec_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaintainVision* MaintainVision::New(::google::protobuf::Arena* arena) const {
  MaintainVision* n = new MaintainVision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaintainVision::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.MaintainVision)
  processmsg_.Clear();
  maintain_.Clear();
  if (has_balls()) {
    GOOGLE_DCHECK(balls_ != NULL);
    balls_->::ZSS::Protocol::Balls4Rec::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&lasttouch_, 0, reinterpret_cast<char*>(&lasttouchteam_) -
      reinterpret_cast<char*>(&lasttouch_) + sizeof(lasttouchteam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaintainVision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.MaintainVision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lastTouch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lasttouch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttouch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 lastTouchTeam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lasttouchteam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttouchteam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maintain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ZSS.Protocol.Balls4Rec balls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.MaintainVision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.MaintainVision)
  return false;
#undef DO_
}

void MaintainVision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.MaintainVision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 lastTouch = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lasttouch(), output);
  }

  // required int32 lastTouchTeam = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttouchteam(), output);
  }

  // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
  for (unsigned int i = 0, n = this->processmsg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->processmsg(i), output);
  }

  // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
  for (unsigned int i = 0, n = this->maintain_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->maintain(i), output);
  }

  // required .ZSS.Protocol.Balls4Rec balls = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->balls_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.MaintainVision)
}

::google::protobuf::uint8* MaintainVision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.MaintainVision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 lastTouch = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lasttouch(), target);
  }

  // required int32 lastTouchTeam = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttouchteam(), target);
  }

  // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
  for (unsigned int i = 0, n = this->processmsg_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->processmsg(i), deterministic, target);
  }

  // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
  for (unsigned int i = 0, n = this->maintain_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->maintain(i), deterministic, target);
  }

  // required .ZSS.Protocol.Balls4Rec balls = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->balls_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.MaintainVision)
  return target;
}

size_t MaintainVision::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.MaintainVision)
  size_t total_size = 0;

  if (has_balls()) {
    // required .ZSS.Protocol.Balls4Rec balls = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->balls_);
  }

  if (has_lasttouch()) {
    // required int32 lastTouch = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lasttouch());
  }

  if (has_lasttouchteam()) {
    // required int32 lastTouchTeam = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lasttouchteam());
  }

  return total_size;
}
size_t MaintainVision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.MaintainVision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ZSS.Protocol.Balls4Rec balls = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->balls_);

    // required int32 lastTouch = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lasttouch());

    // required int32 lastTouchTeam = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lasttouchteam());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
  {
    unsigned int count = this->processmsg_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processmsg(i));
    }
  }

  // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
  {
    unsigned int count = this->maintain_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maintain(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaintainVision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.MaintainVision)
  GOOGLE_DCHECK_NE(&from, this);
  const MaintainVision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaintainVision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.MaintainVision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.MaintainVision)
    MergeFrom(*source);
  }
}

void MaintainVision::MergeFrom(const MaintainVision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.MaintainVision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processmsg_.MergeFrom(from.processmsg_);
  maintain_.MergeFrom(from.maintain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_balls()->::ZSS::Protocol::Balls4Rec::MergeFrom(from.balls());
    }
    if (cached_has_bits & 0x00000002u) {
      lasttouch_ = from.lasttouch_;
    }
    if (cached_has_bits & 0x00000004u) {
      lasttouchteam_ = from.lasttouchteam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaintainVision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.MaintainVision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaintainVision::CopyFrom(const MaintainVision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.MaintainVision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaintainVision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->processmsg())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->maintain())) return false;
  if (has_balls()) {
    if (!this->balls_->IsInitialized()) return false;
  }
  return true;
}

void MaintainVision::Swap(MaintainVision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaintainVision::InternalSwap(MaintainVision* other) {
  processmsg_.InternalSwap(&other->processmsg_);
  maintain_.InternalSwap(&other->maintain_);
  std::swap(balls_, other->balls_);
  std::swap(lasttouch_, other->lasttouch_);
  std::swap(lasttouchteam_, other->lasttouchteam_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaintainVision::GetMetadata() const {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaintainVision

// required int32 lastTouch = 1;
bool MaintainVision::has_lasttouch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MaintainVision::set_has_lasttouch() {
  _has_bits_[0] |= 0x00000002u;
}
void MaintainVision::clear_has_lasttouch() {
  _has_bits_[0] &= ~0x00000002u;
}
void MaintainVision::clear_lasttouch() {
  lasttouch_ = 0;
  clear_has_lasttouch();
}
::google::protobuf::int32 MaintainVision::lasttouch() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.lastTouch)
  return lasttouch_;
}
void MaintainVision::set_lasttouch(::google::protobuf::int32 value) {
  set_has_lasttouch();
  lasttouch_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.MaintainVision.lastTouch)
}

// required int32 lastTouchTeam = 2;
bool MaintainVision::has_lasttouchteam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MaintainVision::set_has_lasttouchteam() {
  _has_bits_[0] |= 0x00000004u;
}
void MaintainVision::clear_has_lasttouchteam() {
  _has_bits_[0] &= ~0x00000004u;
}
void MaintainVision::clear_lasttouchteam() {
  lasttouchteam_ = 0;
  clear_has_lasttouchteam();
}
::google::protobuf::int32 MaintainVision::lasttouchteam() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.lastTouchTeam)
  return lasttouchteam_;
}
void MaintainVision::set_lasttouchteam(::google::protobuf::int32 value) {
  set_has_lasttouchteam();
  lasttouchteam_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.MaintainVision.lastTouchTeam)
}

// repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
int MaintainVision::processmsg_size() const {
  return processmsg_.size();
}
void MaintainVision::clear_processmsg() {
  processmsg_.Clear();
}
const ::ZSS::Protocol::TeamRobotMsg& MaintainVision::processmsg(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_.Get(index);
}
::ZSS::Protocol::TeamRobotMsg* MaintainVision::mutable_processmsg(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_.Mutable(index);
}
::ZSS::Protocol::TeamRobotMsg* MaintainVision::add_processmsg() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
MaintainVision::mutable_processmsg() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.MaintainVision.processMsg)
  return &processmsg_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
MaintainVision::processmsg() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_;
}

// repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
int MaintainVision::maintain_size() const {
  return maintain_.size();
}
void MaintainVision::clear_maintain() {
  maintain_.Clear();
}
const ::ZSS::Protocol::TeamRobotMsg& MaintainVision::maintain(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.maintain)
  return maintain_.Get(index);
}
::ZSS::Protocol::TeamRobotMsg* MaintainVision::mutable_maintain(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.maintain)
  return maintain_.Mutable(index);
}
::ZSS::Protocol::TeamRobotMsg* MaintainVision::add_maintain() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.MaintainVision.maintain)
  return maintain_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
MaintainVision::mutable_maintain() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.MaintainVision.maintain)
  return &maintain_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
MaintainVision::maintain() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.MaintainVision.maintain)
  return maintain_;
}

// required .ZSS.Protocol.Balls4Rec balls = 5;
bool MaintainVision::has_balls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MaintainVision::set_has_balls() {
  _has_bits_[0] |= 0x00000001u;
}
void MaintainVision::clear_has_balls() {
  _has_bits_[0] &= ~0x00000001u;
}
void MaintainVision::clear_balls() {
  if (balls_ != NULL) balls_->::ZSS::Protocol::Balls4Rec::Clear();
  clear_has_balls();
}
const ::ZSS::Protocol::Balls4Rec& MaintainVision::balls() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.balls)
  return balls_ != NULL ? *balls_
                         : *::ZSS::Protocol::Balls4Rec::internal_default_instance();
}
::ZSS::Protocol::Balls4Rec* MaintainVision::mutable_balls() {
  set_has_balls();
  if (balls_ == NULL) {
    balls_ = new ::ZSS::Protocol::Balls4Rec;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.balls)
  return balls_;
}
::ZSS::Protocol::Balls4Rec* MaintainVision::release_balls() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.MaintainVision.balls)
  clear_has_balls();
  ::ZSS::Protocol::Balls4Rec* temp = balls_;
  balls_ = NULL;
  return temp;
}
void MaintainVision::set_allocated_balls(::ZSS::Protocol::Balls4Rec* balls) {
  delete balls_;
  balls_ = balls;
  if (balls) {
    set_has_balls();
  } else {
    clear_has_balls();
  }
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.MaintainVision.balls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRobotMsg::kSizeFieldNumber;
const int TeamRobotMsg::kRobotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRobotMsg::TeamRobotMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5frec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.TeamRobotMsg)
}
TeamRobotMsg::TeamRobotMsg(const TeamRobotMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      robot_(from.robot_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.TeamRobotMsg)
}

void TeamRobotMsg::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
}

TeamRobotMsg::~TeamRobotMsg() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.TeamRobotMsg)
  SharedDtor();
}

void TeamRobotMsg::SharedDtor() {
}

void TeamRobotMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRobotMsg::descriptor() {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRobotMsg& TeamRobotMsg::default_instance() {
  protobuf_zss_5frec_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRobotMsg* TeamRobotMsg::New(::google::protobuf::Arena* arena) const {
  TeamRobotMsg* n = new TeamRobotMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRobotMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.TeamRobotMsg)
  robot_.Clear();
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRobotMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.TeamRobotMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ZSS.Protocol.Robot4Rec robot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.TeamRobotMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.TeamRobotMsg)
  return false;
#undef DO_
}

void TeamRobotMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.TeamRobotMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated .ZSS.Protocol.Robot4Rec robot = 2;
  for (unsigned int i = 0, n = this->robot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->robot(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.TeamRobotMsg)
}

::google::protobuf::uint8* TeamRobotMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.TeamRobotMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated .ZSS.Protocol.Robot4Rec robot = 2;
  for (unsigned int i = 0, n = this->robot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->robot(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.TeamRobotMsg)
  return target;
}

size_t TeamRobotMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.TeamRobotMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 size = 1;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }
  // repeated .ZSS.Protocol.Robot4Rec robot = 2;
  {
    unsigned int count = this->robot_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robot(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRobotMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.TeamRobotMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRobotMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRobotMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.TeamRobotMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.TeamRobotMsg)
    MergeFrom(*source);
  }
}

void TeamRobotMsg::MergeFrom(const TeamRobotMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.TeamRobotMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_.MergeFrom(from.robot_);
  if (from.has_size()) {
    set_size(from.size());
  }
}

void TeamRobotMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.TeamRobotMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRobotMsg::CopyFrom(const TeamRobotMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.TeamRobotMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRobotMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robot())) return false;
  return true;
}

void TeamRobotMsg::Swap(TeamRobotMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRobotMsg::InternalSwap(TeamRobotMsg* other) {
  robot_.InternalSwap(&other->robot_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRobotMsg::GetMetadata() const {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRobotMsg

// required int32 size = 1;
bool TeamRobotMsg::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRobotMsg::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRobotMsg::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRobotMsg::clear_size() {
  size_ = 0;
  clear_has_size();
}
::google::protobuf::int32 TeamRobotMsg::size() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.TeamRobotMsg.size)
  return size_;
}
void TeamRobotMsg::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.TeamRobotMsg.size)
}

// repeated .ZSS.Protocol.Robot4Rec robot = 2;
int TeamRobotMsg::robot_size() const {
  return robot_.size();
}
void TeamRobotMsg::clear_robot() {
  robot_.Clear();
}
const ::ZSS::Protocol::Robot4Rec& TeamRobotMsg::robot(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_.Get(index);
}
::ZSS::Protocol::Robot4Rec* TeamRobotMsg::mutable_robot(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_.Mutable(index);
}
::ZSS::Protocol::Robot4Rec* TeamRobotMsg::add_robot() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >*
TeamRobotMsg::mutable_robot() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.TeamRobotMsg.robot)
  return &robot_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >&
TeamRobotMsg::robot() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot4Rec::kIdFieldNumber;
const int Robot4Rec::kPosXFieldNumber;
const int Robot4Rec::kPosYFieldNumber;
const int Robot4Rec::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot4Rec::Robot4Rec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5frec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robot4Rec)
}
Robot4Rec::Robot4Rec(const Robot4Rec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posx_, &from.posx_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&posx_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot4Rec)
}

void Robot4Rec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&posx_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&posx_) + sizeof(id_));
}

Robot4Rec::~Robot4Rec() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot4Rec)
  SharedDtor();
}

void Robot4Rec::SharedDtor() {
}

void Robot4Rec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot4Rec::descriptor() {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot4Rec& Robot4Rec::default_instance() {
  protobuf_zss_5frec_2eproto::InitDefaults();
  return *internal_default_instance();
}

Robot4Rec* Robot4Rec::New(::google::protobuf::Arena* arena) const {
  Robot4Rec* n = new Robot4Rec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robot4Rec::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robot4Rec)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&posx_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&posx_) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot4Rec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robot4Rec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double posX = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_posx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double posY = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_posy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robot4Rec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robot4Rec)
  return false;
#undef DO_
}

void Robot4Rec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robot4Rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required double posX = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->posx(), output);
  }

  // required double posY = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->posy(), output);
  }

  // required double angle = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robot4Rec)
}

::google::protobuf::uint8* Robot4Rec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot4Rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required double posX = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->posx(), target);
  }

  // required double posY = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->posy(), target);
  }

  // required double angle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot4Rec)
  return target;
}

size_t Robot4Rec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Robot4Rec)
  size_t total_size = 0;

  if (has_posx()) {
    // required double posX = 2;
    total_size += 1 + 8;
  }

  if (has_posy()) {
    // required double posY = 3;
    total_size += 1 + 8;
  }

  if (has_angle()) {
    // required double angle = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Robot4Rec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robot4Rec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double posX = 2;
    total_size += 1 + 8;

    // required double posY = 3;
    total_size += 1 + 8;

    // required double angle = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot4Rec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robot4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot4Rec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot4Rec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robot4Rec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robot4Rec)
    MergeFrom(*source);
  }
}

void Robot4Rec::MergeFrom(const Robot4Rec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robot4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000002u) {
      posy_ = from.posy_;
    }
    if (cached_has_bits & 0x00000004u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot4Rec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robot4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot4Rec::CopyFrom(const Robot4Rec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robot4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot4Rec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Robot4Rec::Swap(Robot4Rec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot4Rec::InternalSwap(Robot4Rec* other) {
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(angle_, other->angle_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robot4Rec::GetMetadata() const {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robot4Rec

// optional int32 id = 1;
bool Robot4Rec::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Robot4Rec::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Robot4Rec::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Robot4Rec::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Robot4Rec::id() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.id)
  return id_;
}
void Robot4Rec::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.id)
}

// required double posX = 2;
bool Robot4Rec::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Robot4Rec::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
void Robot4Rec::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Robot4Rec::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
double Robot4Rec::posx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.posX)
  return posx_;
}
void Robot4Rec::set_posx(double value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.posX)
}

// required double posY = 3;
bool Robot4Rec::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Robot4Rec::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
void Robot4Rec::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
void Robot4Rec::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
double Robot4Rec::posy() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.posY)
  return posy_;
}
void Robot4Rec::set_posy(double value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.posY)
}

// required double angle = 4;
bool Robot4Rec::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Robot4Rec::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
void Robot4Rec::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void Robot4Rec::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
double Robot4Rec::angle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.angle)
  return angle_;
}
void Robot4Rec::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Balls4Rec::kSizeFieldNumber;
const int Balls4Rec::kBallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Balls4Rec::Balls4Rec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5frec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Balls4Rec)
}
Balls4Rec::Balls4Rec(const Balls4Rec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ball_(from.ball_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Balls4Rec)
}

void Balls4Rec::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
}

Balls4Rec::~Balls4Rec() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Balls4Rec)
  SharedDtor();
}

void Balls4Rec::SharedDtor() {
}

void Balls4Rec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Balls4Rec::descriptor() {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Balls4Rec& Balls4Rec::default_instance() {
  protobuf_zss_5frec_2eproto::InitDefaults();
  return *internal_default_instance();
}

Balls4Rec* Balls4Rec::New(::google::protobuf::Arena* arena) const {
  Balls4Rec* n = new Balls4Rec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Balls4Rec::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Balls4Rec)
  ball_.Clear();
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Balls4Rec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Balls4Rec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ZSS.Protocol.Ball4Rec ball = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Balls4Rec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Balls4Rec)
  return false;
#undef DO_
}

void Balls4Rec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Balls4Rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated .ZSS.Protocol.Ball4Rec ball = 2;
  for (unsigned int i = 0, n = this->ball_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ball(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Balls4Rec)
}

::google::protobuf::uint8* Balls4Rec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Balls4Rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated .ZSS.Protocol.Ball4Rec ball = 2;
  for (unsigned int i = 0, n = this->ball_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ball(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Balls4Rec)
  return target;
}

size_t Balls4Rec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Balls4Rec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 size = 1;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }
  // repeated .ZSS.Protocol.Ball4Rec ball = 2;
  {
    unsigned int count = this->ball_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Balls4Rec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Balls4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  const Balls4Rec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Balls4Rec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Balls4Rec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Balls4Rec)
    MergeFrom(*source);
  }
}

void Balls4Rec::MergeFrom(const Balls4Rec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Balls4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ball_.MergeFrom(from.ball_);
  if (from.has_size()) {
    set_size(from.size());
  }
}

void Balls4Rec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Balls4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balls4Rec::CopyFrom(const Balls4Rec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Balls4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balls4Rec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ball())) return false;
  return true;
}

void Balls4Rec::Swap(Balls4Rec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Balls4Rec::InternalSwap(Balls4Rec* other) {
  ball_.InternalSwap(&other->ball_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Balls4Rec::GetMetadata() const {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Balls4Rec

// required int32 size = 1;
bool Balls4Rec::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Balls4Rec::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void Balls4Rec::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void Balls4Rec::clear_size() {
  size_ = 0;
  clear_has_size();
}
::google::protobuf::int32 Balls4Rec::size() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Balls4Rec.size)
  return size_;
}
void Balls4Rec::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Balls4Rec.size)
}

// repeated .ZSS.Protocol.Ball4Rec ball = 2;
int Balls4Rec::ball_size() const {
  return ball_.size();
}
void Balls4Rec::clear_ball() {
  ball_.Clear();
}
const ::ZSS::Protocol::Ball4Rec& Balls4Rec::ball(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Balls4Rec.ball)
  return ball_.Get(index);
}
::ZSS::Protocol::Ball4Rec* Balls4Rec::mutable_ball(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Balls4Rec.ball)
  return ball_.Mutable(index);
}
::ZSS::Protocol::Ball4Rec* Balls4Rec::add_ball() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Balls4Rec.ball)
  return ball_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Ball4Rec >*
Balls4Rec::mutable_ball() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Balls4Rec.ball)
  return &ball_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Ball4Rec >&
Balls4Rec::ball() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Balls4Rec.ball)
  return ball_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ball4Rec::kPosXFieldNumber;
const int Ball4Rec::kPosYFieldNumber;
const int Ball4Rec::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ball4Rec::Ball4Rec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5frec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Ball4Rec)
}
Ball4Rec::Ball4Rec(const Ball4Rec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posx_, &from.posx_,
    reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&posx_) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Ball4Rec)
}

void Ball4Rec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&posx_, 0, reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&posx_) + sizeof(valid_));
}

Ball4Rec::~Ball4Rec() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Ball4Rec)
  SharedDtor();
}

void Ball4Rec::SharedDtor() {
}

void Ball4Rec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball4Rec::descriptor() {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ball4Rec& Ball4Rec::default_instance() {
  protobuf_zss_5frec_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ball4Rec* Ball4Rec::New(::google::protobuf::Arena* arena) const {
  Ball4Rec* n = new Ball4Rec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ball4Rec::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Ball4Rec)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&posx_, 0, reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&posx_) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ball4Rec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Ball4Rec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double posX = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_posx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double posY = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_posy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Ball4Rec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Ball4Rec)
  return false;
#undef DO_
}

void Ball4Rec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Ball4Rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double posX = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->posx(), output);
  }

  // required double posY = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->posy(), output);
  }

  // optional bool valid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Ball4Rec)
}

::google::protobuf::uint8* Ball4Rec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Ball4Rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double posX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->posx(), target);
  }

  // required double posY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->posy(), target);
  }

  // optional bool valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Ball4Rec)
  return target;
}

size_t Ball4Rec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Ball4Rec)
  size_t total_size = 0;

  if (has_posx()) {
    // required double posX = 1;
    total_size += 1 + 8;
  }

  if (has_posy()) {
    // required double posY = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Ball4Rec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Ball4Rec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double posX = 1;
    total_size += 1 + 8;

    // required double posY = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool valid = 3;
  if (has_valid()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball4Rec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Ball4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  const Ball4Rec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ball4Rec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Ball4Rec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Ball4Rec)
    MergeFrom(*source);
  }
}

void Ball4Rec::MergeFrom(const Ball4Rec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Ball4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000002u) {
      posy_ = from.posy_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ball4Rec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Ball4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball4Rec::CopyFrom(const Ball4Rec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Ball4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball4Rec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Ball4Rec::Swap(Ball4Rec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ball4Rec::InternalSwap(Ball4Rec* other) {
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(valid_, other->valid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ball4Rec::GetMetadata() const {
  protobuf_zss_5frec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5frec_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ball4Rec

// required double posX = 1;
bool Ball4Rec::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ball4Rec::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
void Ball4Rec::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ball4Rec::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
double Ball4Rec::posx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Ball4Rec.posX)
  return posx_;
}
void Ball4Rec::set_posx(double value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Ball4Rec.posX)
}

// required double posY = 2;
bool Ball4Rec::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ball4Rec::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
void Ball4Rec::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ball4Rec::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
double Ball4Rec::posy() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Ball4Rec.posY)
  return posy_;
}
void Ball4Rec::set_posy(double value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Ball4Rec.posY)
}

// optional bool valid = 3;
bool Ball4Rec::has_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ball4Rec::set_has_valid() {
  _has_bits_[0] |= 0x00000004u;
}
void Ball4Rec::clear_has_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ball4Rec::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool Ball4Rec::valid() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Ball4Rec.valid)
  return valid_;
}
void Ball4Rec::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Ball4Rec.valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)
