// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vision_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class Vision_DetectionBallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vision_DetectionBall> {
} _Vision_DetectionBall_default_instance_;
class Vision_DetectionRobotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vision_DetectionRobot> {
} _Vision_DetectionRobot_default_instance_;
class Vision_DetectionFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vision_DetectionFrame> {
} _Vision_DetectionFrame_default_instance_;

namespace protobuf_vision_5fdetection_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, vel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, ball_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, last_touch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, raw_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, raw_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, chip_predict_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionBall, chip_predict_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, vel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, rotate_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, accelerate_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, accelerate_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, raw_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, raw_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, raw_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, raw_vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, raw_vel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, raw_rotate_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionRobot, confidence_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, balls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, robots_yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_DetectionFrame, robots_blue_),
  0,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(Vision_DetectionBall)},
  { 31, 53, sizeof(Vision_DetectionRobot)},
  { 70, 78, sizeof(Vision_DetectionFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vision_DetectionBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vision_DetectionRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vision_DetectionFrame_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vision_detection.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vision_DetectionBall_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Vision_DetectionRobot_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Vision_DetectionFrame_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vision_DetectionBall_default_instance_.DefaultConstruct();
  _Vision_DetectionRobot_default_instance_.DefaultConstruct();
  _Vision_DetectionFrame_default_instance_.DefaultConstruct();
  _Vision_DetectionFrame_default_instance_.get_mutable()->balls_ = const_cast< ::Vision_DetectionBall*>(
      ::Vision_DetectionBall::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026vision_detection.proto\"\355\001\n\024Vision_Dete"
      "ctionBall\022\r\n\005vel_x\030\001 \001(\002\022\r\n\005vel_y\030\002 \001(\002\022"
      "\014\n\004area\030\003 \001(\r\022\t\n\001x\030\004 \002(\002\022\t\n\001y\030\005 \002(\002\022\016\n\006h"
      "eight\030\006 \001(\002\022\022\n\nball_state\030\007 \001(\r\022\022\n\nlast_"
      "touch\030\010 \001(\r\022\r\n\005valid\030\t \002(\010\022\r\n\005raw_x\030\n \002("
      "\002\022\r\n\005raw_y\030\013 \002(\002\022\026\n\016chip_predict_x\030\014 \001(\002"
      "\022\026\n\016chip_predict_y\030\r \001(\002\"\312\002\n\025Vision_Dete"
      "ctionRobot\022\r\n\005valid\030\001 \002(\010\022\020\n\010robot_id\030\002 "
      "\001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\023\n\013orientation"
      "\030\005 \001(\002\022\r\n\005vel_x\030\006 \001(\002\022\r\n\005vel_y\030\007 \001(\002\022\022\n\n"
      "rotate_vel\030\010 \001(\002\022\024\n\014accelerate_x\030\t \001(\002\022\024"
      "\n\014accelerate_y\030\n \001(\002\022\r\n\005raw_x\030\013 \002(\002\022\r\n\005r"
      "aw_y\030\014 \002(\002\022\027\n\017raw_orientation\030\r \001(\002\022\021\n\tr"
      "aw_vel_x\030\016 \001(\002\022\021\n\traw_vel_y\030\017 \001(\002\022\026\n\016raw"
      "_rotate_vel\030\020 \001(\002\022\022\n\nconfidence\030\021 \002(\002\"\231\001"
      "\n\025Vision_DetectionFrame\022$\n\005balls\030\001 \002(\0132\025"
      ".Vision_DetectionBall\022-\n\rrobots_yellow\030\002"
      " \003(\0132\026.Vision_DetectionRobot\022+\n\013robots_b"
      "lue\030\003 \003(\0132\026.Vision_DetectionRobot"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision_detection.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_vision_5fdetection_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vision_DetectionBall::kVelXFieldNumber;
const int Vision_DetectionBall::kVelYFieldNumber;
const int Vision_DetectionBall::kAreaFieldNumber;
const int Vision_DetectionBall::kXFieldNumber;
const int Vision_DetectionBall::kYFieldNumber;
const int Vision_DetectionBall::kHeightFieldNumber;
const int Vision_DetectionBall::kBallStateFieldNumber;
const int Vision_DetectionBall::kLastTouchFieldNumber;
const int Vision_DetectionBall::kValidFieldNumber;
const int Vision_DetectionBall::kRawXFieldNumber;
const int Vision_DetectionBall::kRawYFieldNumber;
const int Vision_DetectionBall::kChipPredictXFieldNumber;
const int Vision_DetectionBall::kChipPredictYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vision_DetectionBall::Vision_DetectionBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vision_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionBall)
}
Vision_DetectionBall::Vision_DetectionBall(const Vision_DetectionBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vel_x_, &from.vel_x_,
    reinterpret_cast<char*>(&chip_predict_y_) -
    reinterpret_cast<char*>(&vel_x_) + sizeof(chip_predict_y_));
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionBall)
}

void Vision_DetectionBall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&vel_x_, 0, reinterpret_cast<char*>(&chip_predict_y_) -
    reinterpret_cast<char*>(&vel_x_) + sizeof(chip_predict_y_));
}

Vision_DetectionBall::~Vision_DetectionBall() {
  // @@protoc_insertion_point(destructor:Vision_DetectionBall)
  SharedDtor();
}

void Vision_DetectionBall::SharedDtor() {
}

void Vision_DetectionBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision_DetectionBall::descriptor() {
  protobuf_vision_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vision_DetectionBall& Vision_DetectionBall::default_instance() {
  protobuf_vision_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vision_DetectionBall* Vision_DetectionBall::New(::google::protobuf::Arena* arena) const {
  Vision_DetectionBall* n = new Vision_DetectionBall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vision_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionBall)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&vel_x_, 0, reinterpret_cast<char*>(&last_touch_) -
      reinterpret_cast<char*>(&vel_x_) + sizeof(last_touch_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&valid_, 0, reinterpret_cast<char*>(&chip_predict_y_) -
      reinterpret_cast<char*>(&valid_) + sizeof(chip_predict_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vision_DetectionBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vision_DetectionBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float vel_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vel_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_vel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 area = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ball_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ball_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ball_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_touch = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_last_touch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_touch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool valid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float raw_x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_raw_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float raw_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_raw_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float chip_predict_x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_chip_predict_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chip_predict_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float chip_predict_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_chip_predict_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chip_predict_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vision_DetectionBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vision_DetectionBall)
  return false;
#undef DO_
}

void Vision_DetectionBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vision_DetectionBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->vel_x(), output);
  }

  // optional float vel_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vel_y(), output);
  }

  // optional uint32 area = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area(), output);
  }

  // required float x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // required float y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  // optional uint32 ball_state = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ball_state(), output);
  }

  // optional uint32 last_touch = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_touch(), output);
  }

  // required bool valid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->valid(), output);
  }

  // required float raw_x = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->raw_x(), output);
  }

  // required float raw_y = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->raw_y(), output);
  }

  // optional float chip_predict_x = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->chip_predict_x(), output);
  }

  // optional float chip_predict_y = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->chip_predict_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vision_DetectionBall)
}

::google::protobuf::uint8* Vision_DetectionBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->vel_x(), target);
  }

  // optional float vel_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vel_y(), target);
  }

  // optional uint32 area = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area(), target);
  }

  // required float x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // required float y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  // optional uint32 ball_state = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ball_state(), target);
  }

  // optional uint32 last_touch = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_touch(), target);
  }

  // required bool valid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->valid(), target);
  }

  // required float raw_x = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->raw_x(), target);
  }

  // required float raw_y = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->raw_y(), target);
  }

  // optional float chip_predict_x = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->chip_predict_x(), target);
  }

  // optional float chip_predict_y = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->chip_predict_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionBall)
  return target;
}

size_t Vision_DetectionBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vision_DetectionBall)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 4;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 5;
    total_size += 1 + 4;
  }

  if (has_valid()) {
    // required bool valid = 9;
    total_size += 1 + 1;
  }

  if (has_raw_x()) {
    // required float raw_x = 10;
    total_size += 1 + 4;
  }

  if (has_raw_y()) {
    // required float raw_y = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vision_DetectionBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000718) ^ 0x00000718) == 0) {  // All required fields are present.
    // required float x = 4;
    total_size += 1 + 4;

    // required float y = 5;
    total_size += 1 + 4;

    // required bool valid = 9;
    total_size += 1 + 1;

    // required float raw_x = 10;
    total_size += 1 + 4;

    // required float raw_y = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float vel_x = 1;
    if (has_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 2;
    if (has_vel_y()) {
      total_size += 1 + 4;
    }

    // optional uint32 area = 3;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional float height = 6;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional uint32 ball_state = 7;
    if (has_ball_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ball_state());
    }

    // optional uint32 last_touch = 8;
    if (has_last_touch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_touch());
    }

  }
  if (_has_bits_[8 / 32] & 6144u) {
    // optional float chip_predict_x = 12;
    if (has_chip_predict_x()) {
      total_size += 1 + 4;
    }

    // optional float chip_predict_y = 13;
    if (has_chip_predict_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision_DetectionBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vision_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  const Vision_DetectionBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vision_DetectionBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vision_DetectionBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vision_DetectionBall)
    MergeFrom(*source);
  }
}

void Vision_DetectionBall::MergeFrom(const Vision_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      vel_x_ = from.vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      vel_y_ = from.vel_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      ball_state_ = from.ball_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_touch_ = from.last_touch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00000800u) {
      chip_predict_x_ = from.chip_predict_x_;
    }
    if (cached_has_bits & 0x00001000u) {
      chip_predict_y_ = from.chip_predict_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vision_DetectionBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vision_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionBall::CopyFrom(const Vision_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000718) != 0x00000718) return false;
  return true;
}

void Vision_DetectionBall::Swap(Vision_DetectionBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vision_DetectionBall::InternalSwap(Vision_DetectionBall* other) {
  std::swap(vel_x_, other->vel_x_);
  std::swap(vel_y_, other->vel_y_);
  std::swap(area_, other->area_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(height_, other->height_);
  std::swap(ball_state_, other->ball_state_);
  std::swap(last_touch_, other->last_touch_);
  std::swap(valid_, other->valid_);
  std::swap(raw_x_, other->raw_x_);
  std::swap(raw_y_, other->raw_y_);
  std::swap(chip_predict_x_, other->chip_predict_x_);
  std::swap(chip_predict_y_, other->chip_predict_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vision_DetectionBall::GetMetadata() const {
  protobuf_vision_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vision_DetectionBall

// optional float vel_x = 1;
bool Vision_DetectionBall::has_vel_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vision_DetectionBall::set_has_vel_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vision_DetectionBall::clear_has_vel_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vision_DetectionBall::clear_vel_x() {
  vel_x_ = 0;
  clear_has_vel_x();
}
float Vision_DetectionBall::vel_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.vel_x)
  return vel_x_;
}
void Vision_DetectionBall::set_vel_x(float value) {
  set_has_vel_x();
  vel_x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.vel_x)
}

// optional float vel_y = 2;
bool Vision_DetectionBall::has_vel_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vision_DetectionBall::set_has_vel_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vision_DetectionBall::clear_has_vel_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vision_DetectionBall::clear_vel_y() {
  vel_y_ = 0;
  clear_has_vel_y();
}
float Vision_DetectionBall::vel_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.vel_y)
  return vel_y_;
}
void Vision_DetectionBall::set_vel_y(float value) {
  set_has_vel_y();
  vel_y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.vel_y)
}

// optional uint32 area = 3;
bool Vision_DetectionBall::has_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vision_DetectionBall::set_has_area() {
  _has_bits_[0] |= 0x00000004u;
}
void Vision_DetectionBall::clear_has_area() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vision_DetectionBall::clear_area() {
  area_ = 0u;
  clear_has_area();
}
::google::protobuf::uint32 Vision_DetectionBall::area() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.area)
  return area_;
}
void Vision_DetectionBall::set_area(::google::protobuf::uint32 value) {
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.area)
}

// required float x = 4;
bool Vision_DetectionBall::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vision_DetectionBall::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
void Vision_DetectionBall::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vision_DetectionBall::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vision_DetectionBall::x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.x)
  return x_;
}
void Vision_DetectionBall::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.x)
}

// required float y = 5;
bool Vision_DetectionBall::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Vision_DetectionBall::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
void Vision_DetectionBall::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void Vision_DetectionBall::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vision_DetectionBall::y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.y)
  return y_;
}
void Vision_DetectionBall::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.y)
}

// optional float height = 6;
bool Vision_DetectionBall::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Vision_DetectionBall::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void Vision_DetectionBall::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void Vision_DetectionBall::clear_height() {
  height_ = 0;
  clear_has_height();
}
float Vision_DetectionBall::height() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.height)
  return height_;
}
void Vision_DetectionBall::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.height)
}

// optional uint32 ball_state = 7;
bool Vision_DetectionBall::has_ball_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Vision_DetectionBall::set_has_ball_state() {
  _has_bits_[0] |= 0x00000040u;
}
void Vision_DetectionBall::clear_has_ball_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void Vision_DetectionBall::clear_ball_state() {
  ball_state_ = 0u;
  clear_has_ball_state();
}
::google::protobuf::uint32 Vision_DetectionBall::ball_state() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.ball_state)
  return ball_state_;
}
void Vision_DetectionBall::set_ball_state(::google::protobuf::uint32 value) {
  set_has_ball_state();
  ball_state_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.ball_state)
}

// optional uint32 last_touch = 8;
bool Vision_DetectionBall::has_last_touch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Vision_DetectionBall::set_has_last_touch() {
  _has_bits_[0] |= 0x00000080u;
}
void Vision_DetectionBall::clear_has_last_touch() {
  _has_bits_[0] &= ~0x00000080u;
}
void Vision_DetectionBall::clear_last_touch() {
  last_touch_ = 0u;
  clear_has_last_touch();
}
::google::protobuf::uint32 Vision_DetectionBall::last_touch() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.last_touch)
  return last_touch_;
}
void Vision_DetectionBall::set_last_touch(::google::protobuf::uint32 value) {
  set_has_last_touch();
  last_touch_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.last_touch)
}

// required bool valid = 9;
bool Vision_DetectionBall::has_valid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Vision_DetectionBall::set_has_valid() {
  _has_bits_[0] |= 0x00000100u;
}
void Vision_DetectionBall::clear_has_valid() {
  _has_bits_[0] &= ~0x00000100u;
}
void Vision_DetectionBall::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool Vision_DetectionBall::valid() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.valid)
  return valid_;
}
void Vision_DetectionBall::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.valid)
}

// required float raw_x = 10;
bool Vision_DetectionBall::has_raw_x() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Vision_DetectionBall::set_has_raw_x() {
  _has_bits_[0] |= 0x00000200u;
}
void Vision_DetectionBall::clear_has_raw_x() {
  _has_bits_[0] &= ~0x00000200u;
}
void Vision_DetectionBall::clear_raw_x() {
  raw_x_ = 0;
  clear_has_raw_x();
}
float Vision_DetectionBall::raw_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.raw_x)
  return raw_x_;
}
void Vision_DetectionBall::set_raw_x(float value) {
  set_has_raw_x();
  raw_x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.raw_x)
}

// required float raw_y = 11;
bool Vision_DetectionBall::has_raw_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Vision_DetectionBall::set_has_raw_y() {
  _has_bits_[0] |= 0x00000400u;
}
void Vision_DetectionBall::clear_has_raw_y() {
  _has_bits_[0] &= ~0x00000400u;
}
void Vision_DetectionBall::clear_raw_y() {
  raw_y_ = 0;
  clear_has_raw_y();
}
float Vision_DetectionBall::raw_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.raw_y)
  return raw_y_;
}
void Vision_DetectionBall::set_raw_y(float value) {
  set_has_raw_y();
  raw_y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.raw_y)
}

// optional float chip_predict_x = 12;
bool Vision_DetectionBall::has_chip_predict_x() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Vision_DetectionBall::set_has_chip_predict_x() {
  _has_bits_[0] |= 0x00000800u;
}
void Vision_DetectionBall::clear_has_chip_predict_x() {
  _has_bits_[0] &= ~0x00000800u;
}
void Vision_DetectionBall::clear_chip_predict_x() {
  chip_predict_x_ = 0;
  clear_has_chip_predict_x();
}
float Vision_DetectionBall::chip_predict_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_predict_x)
  return chip_predict_x_;
}
void Vision_DetectionBall::set_chip_predict_x(float value) {
  set_has_chip_predict_x();
  chip_predict_x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_predict_x)
}

// optional float chip_predict_y = 13;
bool Vision_DetectionBall::has_chip_predict_y() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Vision_DetectionBall::set_has_chip_predict_y() {
  _has_bits_[0] |= 0x00001000u;
}
void Vision_DetectionBall::clear_has_chip_predict_y() {
  _has_bits_[0] &= ~0x00001000u;
}
void Vision_DetectionBall::clear_chip_predict_y() {
  chip_predict_y_ = 0;
  clear_has_chip_predict_y();
}
float Vision_DetectionBall::chip_predict_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_predict_y)
  return chip_predict_y_;
}
void Vision_DetectionBall::set_chip_predict_y(float value) {
  set_has_chip_predict_y();
  chip_predict_y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_predict_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vision_DetectionRobot::kValidFieldNumber;
const int Vision_DetectionRobot::kRobotIdFieldNumber;
const int Vision_DetectionRobot::kXFieldNumber;
const int Vision_DetectionRobot::kYFieldNumber;
const int Vision_DetectionRobot::kOrientationFieldNumber;
const int Vision_DetectionRobot::kVelXFieldNumber;
const int Vision_DetectionRobot::kVelYFieldNumber;
const int Vision_DetectionRobot::kRotateVelFieldNumber;
const int Vision_DetectionRobot::kAccelerateXFieldNumber;
const int Vision_DetectionRobot::kAccelerateYFieldNumber;
const int Vision_DetectionRobot::kRawXFieldNumber;
const int Vision_DetectionRobot::kRawYFieldNumber;
const int Vision_DetectionRobot::kRawOrientationFieldNumber;
const int Vision_DetectionRobot::kRawVelXFieldNumber;
const int Vision_DetectionRobot::kRawVelYFieldNumber;
const int Vision_DetectionRobot::kRawRotateVelFieldNumber;
const int Vision_DetectionRobot::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vision_DetectionRobot::Vision_DetectionRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vision_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionRobot)
}
Vision_DetectionRobot::Vision_DetectionRobot(const Vision_DetectionRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&valid_) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionRobot)
}

void Vision_DetectionRobot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&valid_, 0, reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&valid_) + sizeof(confidence_));
}

Vision_DetectionRobot::~Vision_DetectionRobot() {
  // @@protoc_insertion_point(destructor:Vision_DetectionRobot)
  SharedDtor();
}

void Vision_DetectionRobot::SharedDtor() {
}

void Vision_DetectionRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision_DetectionRobot::descriptor() {
  protobuf_vision_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vision_DetectionRobot& Vision_DetectionRobot::default_instance() {
  protobuf_vision_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vision_DetectionRobot* Vision_DetectionRobot::New(::google::protobuf::Arena* arena) const {
  Vision_DetectionRobot* n = new Vision_DetectionRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vision_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionRobot)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&valid_, 0, reinterpret_cast<char*>(&rotate_vel_) -
      reinterpret_cast<char*>(&valid_) + sizeof(rotate_vel_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&accelerate_x_, 0, reinterpret_cast<char*>(&raw_rotate_vel_) -
      reinterpret_cast<char*>(&accelerate_x_) + sizeof(raw_rotate_vel_));
  }
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vision_DetectionRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vision_DetectionRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 robot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_robot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float orientation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vel_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vel_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_vel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rotate_vel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_rotate_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotate_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accelerate_x = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_accelerate_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accelerate_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accelerate_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_accelerate_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accelerate_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float raw_x = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_raw_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float raw_y = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_raw_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float raw_orientation = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_raw_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float raw_vel_x = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_raw_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float raw_vel_y = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_raw_vel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float raw_rotate_vel = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_raw_rotate_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_rotate_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float confidence = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vision_DetectionRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vision_DetectionRobot)
  return false;
#undef DO_
}

void Vision_DetectionRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vision_DetectionRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool valid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->orientation(), output);
  }

  // optional float vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vel_x(), output);
  }

  // optional float vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vel_y(), output);
  }

  // optional float rotate_vel = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rotate_vel(), output);
  }

  // optional float accelerate_x = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->accelerate_x(), output);
  }

  // optional float accelerate_y = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->accelerate_y(), output);
  }

  // required float raw_x = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->raw_x(), output);
  }

  // required float raw_y = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->raw_y(), output);
  }

  // optional float raw_orientation = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->raw_orientation(), output);
  }

  // optional float raw_vel_x = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->raw_vel_x(), output);
  }

  // optional float raw_vel_y = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->raw_vel_y(), output);
  }

  // optional float raw_rotate_vel = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->raw_rotate_vel(), output);
  }

  // required float confidence = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vision_DetectionRobot)
}

::google::protobuf::uint8* Vision_DetectionRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->orientation(), target);
  }

  // optional float vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vel_x(), target);
  }

  // optional float vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vel_y(), target);
  }

  // optional float rotate_vel = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rotate_vel(), target);
  }

  // optional float accelerate_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->accelerate_x(), target);
  }

  // optional float accelerate_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->accelerate_y(), target);
  }

  // required float raw_x = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->raw_x(), target);
  }

  // required float raw_y = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->raw_y(), target);
  }

  // optional float raw_orientation = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->raw_orientation(), target);
  }

  // optional float raw_vel_x = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->raw_vel_x(), target);
  }

  // optional float raw_vel_y = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->raw_vel_y(), target);
  }

  // optional float raw_rotate_vel = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->raw_rotate_vel(), target);
  }

  // required float confidence = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionRobot)
  return target;
}

size_t Vision_DetectionRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vision_DetectionRobot)
  size_t total_size = 0;

  if (has_valid()) {
    // required bool valid = 1;
    total_size += 1 + 1;
  }

  if (has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (has_raw_x()) {
    // required float raw_x = 11;
    total_size += 1 + 4;
  }

  if (has_raw_y()) {
    // required float raw_y = 12;
    total_size += 1 + 4;
  }

  if (has_confidence()) {
    // required float confidence = 17;
    total_size += 2 + 4;
  }

  return total_size;
}
size_t Vision_DetectionRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionRobot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00010c0d) ^ 0x00010c0d) == 0) {  // All required fields are present.
    // required bool valid = 1;
    total_size += 1 + 1;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float raw_x = 11;
    total_size += 1 + 4;

    // required float raw_y = 12;
    total_size += 1 + 4;

    // required float confidence = 17;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 robot_id = 2;
  if (has_robot_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional float orientation = 5;
    if (has_orientation()) {
      total_size += 1 + 4;
    }

    // optional float vel_x = 6;
    if (has_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 7;
    if (has_vel_y()) {
      total_size += 1 + 4;
    }

    // optional float rotate_vel = 8;
    if (has_rotate_vel()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float accelerate_x = 9;
    if (has_accelerate_x()) {
      total_size += 1 + 4;
    }

    // optional float accelerate_y = 10;
    if (has_accelerate_y()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 61440u) {
    // optional float raw_orientation = 13;
    if (has_raw_orientation()) {
      total_size += 1 + 4;
    }

    // optional float raw_vel_x = 14;
    if (has_raw_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float raw_vel_y = 15;
    if (has_raw_vel_y()) {
      total_size += 1 + 4;
    }

    // optional float raw_rotate_vel = 16;
    if (has_raw_rotate_vel()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision_DetectionRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vision_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const Vision_DetectionRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vision_DetectionRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vision_DetectionRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vision_DetectionRobot)
    MergeFrom(*source);
  }
}

void Vision_DetectionRobot::MergeFrom(const Vision_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000020u) {
      vel_x_ = from.vel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      vel_y_ = from.vel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      rotate_vel_ = from.rotate_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      accelerate_x_ = from.accelerate_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      accelerate_y_ = from.accelerate_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000800u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00001000u) {
      raw_orientation_ = from.raw_orientation_;
    }
    if (cached_has_bits & 0x00002000u) {
      raw_vel_x_ = from.raw_vel_x_;
    }
    if (cached_has_bits & 0x00004000u) {
      raw_vel_y_ = from.raw_vel_y_;
    }
    if (cached_has_bits & 0x00008000u) {
      raw_rotate_vel_ = from.raw_rotate_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_confidence(from.confidence());
  }
}

void Vision_DetectionRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vision_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionRobot::CopyFrom(const Vision_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00010c0d) != 0x00010c0d) return false;
  return true;
}

void Vision_DetectionRobot::Swap(Vision_DetectionRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vision_DetectionRobot::InternalSwap(Vision_DetectionRobot* other) {
  std::swap(valid_, other->valid_);
  std::swap(robot_id_, other->robot_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(orientation_, other->orientation_);
  std::swap(vel_x_, other->vel_x_);
  std::swap(vel_y_, other->vel_y_);
  std::swap(rotate_vel_, other->rotate_vel_);
  std::swap(accelerate_x_, other->accelerate_x_);
  std::swap(accelerate_y_, other->accelerate_y_);
  std::swap(raw_x_, other->raw_x_);
  std::swap(raw_y_, other->raw_y_);
  std::swap(raw_orientation_, other->raw_orientation_);
  std::swap(raw_vel_x_, other->raw_vel_x_);
  std::swap(raw_vel_y_, other->raw_vel_y_);
  std::swap(raw_rotate_vel_, other->raw_rotate_vel_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vision_DetectionRobot::GetMetadata() const {
  protobuf_vision_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vision_DetectionRobot

// required bool valid = 1;
bool Vision_DetectionRobot::has_valid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vision_DetectionRobot::set_has_valid() {
  _has_bits_[0] |= 0x00000001u;
}
void Vision_DetectionRobot::clear_has_valid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vision_DetectionRobot::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool Vision_DetectionRobot::valid() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.valid)
  return valid_;
}
void Vision_DetectionRobot::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.valid)
}

// optional uint32 robot_id = 2;
bool Vision_DetectionRobot::has_robot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vision_DetectionRobot::set_has_robot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Vision_DetectionRobot::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vision_DetectionRobot::clear_robot_id() {
  robot_id_ = 0u;
  clear_has_robot_id();
}
::google::protobuf::uint32 Vision_DetectionRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.robot_id)
  return robot_id_;
}
void Vision_DetectionRobot::set_robot_id(::google::protobuf::uint32 value) {
  set_has_robot_id();
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.robot_id)
}

// required float x = 3;
bool Vision_DetectionRobot::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vision_DetectionRobot::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void Vision_DetectionRobot::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vision_DetectionRobot::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vision_DetectionRobot::x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.x)
  return x_;
}
void Vision_DetectionRobot::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.x)
}

// required float y = 4;
bool Vision_DetectionRobot::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vision_DetectionRobot::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void Vision_DetectionRobot::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vision_DetectionRobot::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vision_DetectionRobot::y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.y)
  return y_;
}
void Vision_DetectionRobot::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.y)
}

// optional float orientation = 5;
bool Vision_DetectionRobot::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Vision_DetectionRobot::set_has_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
void Vision_DetectionRobot::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
void Vision_DetectionRobot::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
float Vision_DetectionRobot::orientation() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.orientation)
  return orientation_;
}
void Vision_DetectionRobot::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.orientation)
}

// optional float vel_x = 6;
bool Vision_DetectionRobot::has_vel_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Vision_DetectionRobot::set_has_vel_x() {
  _has_bits_[0] |= 0x00000020u;
}
void Vision_DetectionRobot::clear_has_vel_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void Vision_DetectionRobot::clear_vel_x() {
  vel_x_ = 0;
  clear_has_vel_x();
}
float Vision_DetectionRobot::vel_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.vel_x)
  return vel_x_;
}
void Vision_DetectionRobot::set_vel_x(float value) {
  set_has_vel_x();
  vel_x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.vel_x)
}

// optional float vel_y = 7;
bool Vision_DetectionRobot::has_vel_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Vision_DetectionRobot::set_has_vel_y() {
  _has_bits_[0] |= 0x00000040u;
}
void Vision_DetectionRobot::clear_has_vel_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void Vision_DetectionRobot::clear_vel_y() {
  vel_y_ = 0;
  clear_has_vel_y();
}
float Vision_DetectionRobot::vel_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.vel_y)
  return vel_y_;
}
void Vision_DetectionRobot::set_vel_y(float value) {
  set_has_vel_y();
  vel_y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.vel_y)
}

// optional float rotate_vel = 8;
bool Vision_DetectionRobot::has_rotate_vel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Vision_DetectionRobot::set_has_rotate_vel() {
  _has_bits_[0] |= 0x00000080u;
}
void Vision_DetectionRobot::clear_has_rotate_vel() {
  _has_bits_[0] &= ~0x00000080u;
}
void Vision_DetectionRobot::clear_rotate_vel() {
  rotate_vel_ = 0;
  clear_has_rotate_vel();
}
float Vision_DetectionRobot::rotate_vel() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.rotate_vel)
  return rotate_vel_;
}
void Vision_DetectionRobot::set_rotate_vel(float value) {
  set_has_rotate_vel();
  rotate_vel_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.rotate_vel)
}

// optional float accelerate_x = 9;
bool Vision_DetectionRobot::has_accelerate_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Vision_DetectionRobot::set_has_accelerate_x() {
  _has_bits_[0] |= 0x00000100u;
}
void Vision_DetectionRobot::clear_has_accelerate_x() {
  _has_bits_[0] &= ~0x00000100u;
}
void Vision_DetectionRobot::clear_accelerate_x() {
  accelerate_x_ = 0;
  clear_has_accelerate_x();
}
float Vision_DetectionRobot::accelerate_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.accelerate_x)
  return accelerate_x_;
}
void Vision_DetectionRobot::set_accelerate_x(float value) {
  set_has_accelerate_x();
  accelerate_x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.accelerate_x)
}

// optional float accelerate_y = 10;
bool Vision_DetectionRobot::has_accelerate_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Vision_DetectionRobot::set_has_accelerate_y() {
  _has_bits_[0] |= 0x00000200u;
}
void Vision_DetectionRobot::clear_has_accelerate_y() {
  _has_bits_[0] &= ~0x00000200u;
}
void Vision_DetectionRobot::clear_accelerate_y() {
  accelerate_y_ = 0;
  clear_has_accelerate_y();
}
float Vision_DetectionRobot::accelerate_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.accelerate_y)
  return accelerate_y_;
}
void Vision_DetectionRobot::set_accelerate_y(float value) {
  set_has_accelerate_y();
  accelerate_y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.accelerate_y)
}

// required float raw_x = 11;
bool Vision_DetectionRobot::has_raw_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Vision_DetectionRobot::set_has_raw_x() {
  _has_bits_[0] |= 0x00000400u;
}
void Vision_DetectionRobot::clear_has_raw_x() {
  _has_bits_[0] &= ~0x00000400u;
}
void Vision_DetectionRobot::clear_raw_x() {
  raw_x_ = 0;
  clear_has_raw_x();
}
float Vision_DetectionRobot::raw_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_x)
  return raw_x_;
}
void Vision_DetectionRobot::set_raw_x(float value) {
  set_has_raw_x();
  raw_x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_x)
}

// required float raw_y = 12;
bool Vision_DetectionRobot::has_raw_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Vision_DetectionRobot::set_has_raw_y() {
  _has_bits_[0] |= 0x00000800u;
}
void Vision_DetectionRobot::clear_has_raw_y() {
  _has_bits_[0] &= ~0x00000800u;
}
void Vision_DetectionRobot::clear_raw_y() {
  raw_y_ = 0;
  clear_has_raw_y();
}
float Vision_DetectionRobot::raw_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_y)
  return raw_y_;
}
void Vision_DetectionRobot::set_raw_y(float value) {
  set_has_raw_y();
  raw_y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_y)
}

// optional float raw_orientation = 13;
bool Vision_DetectionRobot::has_raw_orientation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Vision_DetectionRobot::set_has_raw_orientation() {
  _has_bits_[0] |= 0x00001000u;
}
void Vision_DetectionRobot::clear_has_raw_orientation() {
  _has_bits_[0] &= ~0x00001000u;
}
void Vision_DetectionRobot::clear_raw_orientation() {
  raw_orientation_ = 0;
  clear_has_raw_orientation();
}
float Vision_DetectionRobot::raw_orientation() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_orientation)
  return raw_orientation_;
}
void Vision_DetectionRobot::set_raw_orientation(float value) {
  set_has_raw_orientation();
  raw_orientation_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_orientation)
}

// optional float raw_vel_x = 14;
bool Vision_DetectionRobot::has_raw_vel_x() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Vision_DetectionRobot::set_has_raw_vel_x() {
  _has_bits_[0] |= 0x00002000u;
}
void Vision_DetectionRobot::clear_has_raw_vel_x() {
  _has_bits_[0] &= ~0x00002000u;
}
void Vision_DetectionRobot::clear_raw_vel_x() {
  raw_vel_x_ = 0;
  clear_has_raw_vel_x();
}
float Vision_DetectionRobot::raw_vel_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_vel_x)
  return raw_vel_x_;
}
void Vision_DetectionRobot::set_raw_vel_x(float value) {
  set_has_raw_vel_x();
  raw_vel_x_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_vel_x)
}

// optional float raw_vel_y = 15;
bool Vision_DetectionRobot::has_raw_vel_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Vision_DetectionRobot::set_has_raw_vel_y() {
  _has_bits_[0] |= 0x00004000u;
}
void Vision_DetectionRobot::clear_has_raw_vel_y() {
  _has_bits_[0] &= ~0x00004000u;
}
void Vision_DetectionRobot::clear_raw_vel_y() {
  raw_vel_y_ = 0;
  clear_has_raw_vel_y();
}
float Vision_DetectionRobot::raw_vel_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_vel_y)
  return raw_vel_y_;
}
void Vision_DetectionRobot::set_raw_vel_y(float value) {
  set_has_raw_vel_y();
  raw_vel_y_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_vel_y)
}

// optional float raw_rotate_vel = 16;
bool Vision_DetectionRobot::has_raw_rotate_vel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Vision_DetectionRobot::set_has_raw_rotate_vel() {
  _has_bits_[0] |= 0x00008000u;
}
void Vision_DetectionRobot::clear_has_raw_rotate_vel() {
  _has_bits_[0] &= ~0x00008000u;
}
void Vision_DetectionRobot::clear_raw_rotate_vel() {
  raw_rotate_vel_ = 0;
  clear_has_raw_rotate_vel();
}
float Vision_DetectionRobot::raw_rotate_vel() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_rotate_vel)
  return raw_rotate_vel_;
}
void Vision_DetectionRobot::set_raw_rotate_vel(float value) {
  set_has_raw_rotate_vel();
  raw_rotate_vel_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_rotate_vel)
}

// required float confidence = 17;
bool Vision_DetectionRobot::has_confidence() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Vision_DetectionRobot::set_has_confidence() {
  _has_bits_[0] |= 0x00010000u;
}
void Vision_DetectionRobot::clear_has_confidence() {
  _has_bits_[0] &= ~0x00010000u;
}
void Vision_DetectionRobot::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
float Vision_DetectionRobot::confidence() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.confidence)
  return confidence_;
}
void Vision_DetectionRobot::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vision_DetectionFrame::kBallsFieldNumber;
const int Vision_DetectionFrame::kRobotsYellowFieldNumber;
const int Vision_DetectionFrame::kRobotsBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vision_DetectionFrame::Vision_DetectionFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vision_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionFrame)
}
Vision_DetectionFrame::Vision_DetectionFrame(const Vision_DetectionFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      robots_yellow_(from.robots_yellow_),
      robots_blue_(from.robots_blue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_balls()) {
    balls_ = new ::Vision_DetectionBall(*from.balls_);
  } else {
    balls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionFrame)
}

void Vision_DetectionFrame::SharedCtor() {
  _cached_size_ = 0;
  balls_ = NULL;
}

Vision_DetectionFrame::~Vision_DetectionFrame() {
  // @@protoc_insertion_point(destructor:Vision_DetectionFrame)
  SharedDtor();
}

void Vision_DetectionFrame::SharedDtor() {
  if (this != internal_default_instance()) {
    delete balls_;
  }
}

void Vision_DetectionFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision_DetectionFrame::descriptor() {
  protobuf_vision_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vision_DetectionFrame& Vision_DetectionFrame::default_instance() {
  protobuf_vision_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vision_DetectionFrame* Vision_DetectionFrame::New(::google::protobuf::Arena* arena) const {
  Vision_DetectionFrame* n = new Vision_DetectionFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vision_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionFrame)
  robots_yellow_.Clear();
  robots_blue_.Clear();
  if (has_balls()) {
    GOOGLE_DCHECK(balls_ != NULL);
    balls_->::Vision_DetectionBall::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vision_DetectionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vision_DetectionFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Vision_DetectionBall balls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Vision_DetectionRobot robots_yellow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_yellow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Vision_DetectionRobot robots_blue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_blue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vision_DetectionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vision_DetectionFrame)
  return false;
#undef DO_
}

void Vision_DetectionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vision_DetectionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vision_DetectionBall balls = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->balls_, output);
  }

  // repeated .Vision_DetectionRobot robots_yellow = 2;
  for (unsigned int i = 0, n = this->robots_yellow_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->robots_yellow(i), output);
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  for (unsigned int i = 0, n = this->robots_blue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robots_blue(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vision_DetectionFrame)
}

::google::protobuf::uint8* Vision_DetectionFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vision_DetectionBall balls = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->balls_, deterministic, target);
  }

  // repeated .Vision_DetectionRobot robots_yellow = 2;
  for (unsigned int i = 0, n = this->robots_yellow_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->robots_yellow(i), deterministic, target);
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  for (unsigned int i = 0, n = this->robots_blue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->robots_blue(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionFrame)
  return target;
}

size_t Vision_DetectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Vision_DetectionBall balls = 1;
  if (has_balls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->balls_);
  }
  // repeated .Vision_DetectionRobot robots_yellow = 2;
  {
    unsigned int count = this->robots_yellow_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robots_yellow(i));
    }
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  {
    unsigned int count = this->robots_blue_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robots_blue(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision_DetectionFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vision_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const Vision_DetectionFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vision_DetectionFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vision_DetectionFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vision_DetectionFrame)
    MergeFrom(*source);
  }
}

void Vision_DetectionFrame::MergeFrom(const Vision_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from.has_balls()) {
    mutable_balls()->::Vision_DetectionBall::MergeFrom(from.balls());
  }
}

void Vision_DetectionFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vision_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionFrame::CopyFrom(const Vision_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_yellow())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_blue())) return false;
  if (has_balls()) {
    if (!this->balls_->IsInitialized()) return false;
  }
  return true;
}

void Vision_DetectionFrame::Swap(Vision_DetectionFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vision_DetectionFrame::InternalSwap(Vision_DetectionFrame* other) {
  robots_yellow_.InternalSwap(&other->robots_yellow_);
  robots_blue_.InternalSwap(&other->robots_blue_);
  std::swap(balls_, other->balls_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vision_DetectionFrame::GetMetadata() const {
  protobuf_vision_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vision_DetectionFrame

// required .Vision_DetectionBall balls = 1;
bool Vision_DetectionFrame::has_balls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vision_DetectionFrame::set_has_balls() {
  _has_bits_[0] |= 0x00000001u;
}
void Vision_DetectionFrame::clear_has_balls() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vision_DetectionFrame::clear_balls() {
  if (balls_ != NULL) balls_->::Vision_DetectionBall::Clear();
  clear_has_balls();
}
const ::Vision_DetectionBall& Vision_DetectionFrame::balls() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionFrame.balls)
  return balls_ != NULL ? *balls_
                         : *::Vision_DetectionBall::internal_default_instance();
}
::Vision_DetectionBall* Vision_DetectionFrame::mutable_balls() {
  set_has_balls();
  if (balls_ == NULL) {
    balls_ = new ::Vision_DetectionBall;
  }
  // @@protoc_insertion_point(field_mutable:Vision_DetectionFrame.balls)
  return balls_;
}
::Vision_DetectionBall* Vision_DetectionFrame::release_balls() {
  // @@protoc_insertion_point(field_release:Vision_DetectionFrame.balls)
  clear_has_balls();
  ::Vision_DetectionBall* temp = balls_;
  balls_ = NULL;
  return temp;
}
void Vision_DetectionFrame::set_allocated_balls(::Vision_DetectionBall* balls) {
  delete balls_;
  balls_ = balls;
  if (balls) {
    set_has_balls();
  } else {
    clear_has_balls();
  }
  // @@protoc_insertion_point(field_set_allocated:Vision_DetectionFrame.balls)
}

// repeated .Vision_DetectionRobot robots_yellow = 2;
int Vision_DetectionFrame::robots_yellow_size() const {
  return robots_yellow_.size();
}
void Vision_DetectionFrame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
const ::Vision_DetectionRobot& Vision_DetectionFrame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:Vision_DetectionFrame.robots_yellow)
  return robots_yellow_.Get(index);
}
::Vision_DetectionRobot* Vision_DetectionFrame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:Vision_DetectionFrame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
::Vision_DetectionRobot* Vision_DetectionFrame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:Vision_DetectionFrame.robots_yellow)
  return robots_yellow_.Add();
}
::google::protobuf::RepeatedPtrField< ::Vision_DetectionRobot >*
Vision_DetectionFrame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:Vision_DetectionFrame.robots_yellow)
  return &robots_yellow_;
}
const ::google::protobuf::RepeatedPtrField< ::Vision_DetectionRobot >&
Vision_DetectionFrame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:Vision_DetectionFrame.robots_yellow)
  return robots_yellow_;
}

// repeated .Vision_DetectionRobot robots_blue = 3;
int Vision_DetectionFrame::robots_blue_size() const {
  return robots_blue_.size();
}
void Vision_DetectionFrame::clear_robots_blue() {
  robots_blue_.Clear();
}
const ::Vision_DetectionRobot& Vision_DetectionFrame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:Vision_DetectionFrame.robots_blue)
  return robots_blue_.Get(index);
}
::Vision_DetectionRobot* Vision_DetectionFrame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:Vision_DetectionFrame.robots_blue)
  return robots_blue_.Mutable(index);
}
::Vision_DetectionRobot* Vision_DetectionFrame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:Vision_DetectionFrame.robots_blue)
  return robots_blue_.Add();
}
::google::protobuf::RepeatedPtrField< ::Vision_DetectionRobot >*
Vision_DetectionFrame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:Vision_DetectionFrame.robots_blue)
  return &robots_blue_;
}
const ::google::protobuf::RepeatedPtrField< ::Vision_DetectionRobot >&
Vision_DetectionFrame::robots_blue() const {
  // @@protoc_insertion_point(field_list:Vision_DetectionFrame.robots_blue)
  return robots_blue_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
